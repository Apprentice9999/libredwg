# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package LibreDWG;
use base qw(Exporter);
use base qw(DynaLoader);
package LibreDWGc;
bootstrap LibreDWG;
package LibreDWG;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package LibreDWG;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package LibreDWG;

*new_Dwg_Object_Array = *LibreDWGc::new_Dwg_Object_Array;
*delete_Dwg_Object_Array = *LibreDWGc::delete_Dwg_Object_Array;
*Dwg_Object_Array_getitem = *LibreDWGc::Dwg_Object_Array_getitem;
*Dwg_Object_Array_setitem = *LibreDWGc::Dwg_Object_Array_setitem;
*dwg_read_file = *LibreDWGc::dwg_read_file;
*dxf_read_file = *LibreDWGc::dxf_read_file;
*dwg_bmp = *LibreDWGc::dwg_bmp;
*dwg_model_x_min = *LibreDWGc::dwg_model_x_min;
*dwg_model_x_max = *LibreDWGc::dwg_model_x_max;
*dwg_model_y_min = *LibreDWGc::dwg_model_y_min;
*dwg_model_y_max = *LibreDWGc::dwg_model_y_max;
*dwg_model_z_min = *LibreDWGc::dwg_model_z_min;
*dwg_model_z_max = *LibreDWGc::dwg_model_z_max;
*dwg_page_x_min = *LibreDWGc::dwg_page_x_min;
*dwg_page_x_max = *LibreDWGc::dwg_page_x_max;
*dwg_page_y_min = *LibreDWGc::dwg_page_y_min;
*dwg_page_y_max = *LibreDWGc::dwg_page_y_max;
*dwg_get_layer_count = *LibreDWGc::dwg_get_layer_count;
*dwg_get_layers = *LibreDWGc::dwg_get_layers;
*dwg_get_num_objects = *LibreDWGc::dwg_get_num_objects;
*dwg_get_object_num_objects = *LibreDWGc::dwg_get_object_num_objects;
*dwg_class_is_entity = *LibreDWGc::dwg_class_is_entity;
*dwg_obj_is_control = *LibreDWGc::dwg_obj_is_control;
*dwg_obj_is_table = *LibreDWGc::dwg_obj_is_table;
*dwg_get_num_entities = *LibreDWGc::dwg_get_num_entities;
*dwg_get_entities = *LibreDWGc::dwg_get_entities;
*dwg_get_entity_layer = *LibreDWGc::dwg_get_entity_layer;
*dwg_next_object = *LibreDWGc::dwg_next_object;
*dwg_ref_get_object = *LibreDWGc::dwg_ref_get_object;
*dwg_ref_get_object_relative = *LibreDWGc::dwg_ref_get_object_relative;
*get_first_owned_object = *LibreDWGc::get_first_owned_object;
*get_next_owned_object = *LibreDWGc::get_next_owned_object;
*get_first_owned_block = *LibreDWGc::get_first_owned_block;
*get_next_owned_block = *LibreDWGc::get_next_owned_block;
*dwg_resolve_handle = *LibreDWGc::dwg_resolve_handle;
*dwg_resolve_handleref = *LibreDWGc::dwg_resolve_handleref;
*dwg_section_type = *LibreDWGc::dwg_section_type;
*dwg_free = *LibreDWGc::dwg_free;
*dwg_free_object = *LibreDWGc::dwg_free_object;
*dwg_add_object = *LibreDWGc::dwg_add_object;
*dwg_add_TEXT = *LibreDWGc::dwg_add_TEXT;
*dwg_add_ATTRIB = *LibreDWGc::dwg_add_ATTRIB;
*dwg_add_ATTDEF = *LibreDWGc::dwg_add_ATTDEF;
*dwg_add_BLOCK = *LibreDWGc::dwg_add_BLOCK;
*dwg_add_ENDBLK = *LibreDWGc::dwg_add_ENDBLK;
*dwg_add_SEQEND = *LibreDWGc::dwg_add_SEQEND;
*dwg_add_INSERT = *LibreDWGc::dwg_add_INSERT;
*dwg_add_MINSERT = *LibreDWGc::dwg_add_MINSERT;
*dwg_add_VERTEX_2D = *LibreDWGc::dwg_add_VERTEX_2D;
*dwg_add_VERTEX_3D = *LibreDWGc::dwg_add_VERTEX_3D;
*dwg_add_VERTEX_MESH = *LibreDWGc::dwg_add_VERTEX_MESH;
*dwg_add_VERTEX_PFACE = *LibreDWGc::dwg_add_VERTEX_PFACE;
*dwg_add_VERTEX_PFACE_FACE = *LibreDWGc::dwg_add_VERTEX_PFACE_FACE;
*dwg_add_POLYLINE_2D = *LibreDWGc::dwg_add_POLYLINE_2D;
*dwg_add_POLYLINE_3D = *LibreDWGc::dwg_add_POLYLINE_3D;
*dwg_add_ARC = *LibreDWGc::dwg_add_ARC;
*dwg_add_CIRCLE = *LibreDWGc::dwg_add_CIRCLE;
*dwg_add_LINE = *LibreDWGc::dwg_add_LINE;
*dwg_add_DIMENSION_ORDINATE = *LibreDWGc::dwg_add_DIMENSION_ORDINATE;
*dwg_add_DIMENSION_LINEAR = *LibreDWGc::dwg_add_DIMENSION_LINEAR;
*dwg_add_DIMENSION_ALIGNED = *LibreDWGc::dwg_add_DIMENSION_ALIGNED;
*dwg_add_DIMENSION_ANG3PT = *LibreDWGc::dwg_add_DIMENSION_ANG3PT;
*dwg_add_DIMENSION_ANG2LN = *LibreDWGc::dwg_add_DIMENSION_ANG2LN;
*dwg_add_DIMENSION_RADIUS = *LibreDWGc::dwg_add_DIMENSION_RADIUS;
*dwg_add_DIMENSION_DIAMETER = *LibreDWGc::dwg_add_DIMENSION_DIAMETER;
*dwg_add_POINT = *LibreDWGc::dwg_add_POINT;
*dwg_add__3DFACE = *LibreDWGc::dwg_add__3DFACE;
*dwg_add__3DSOLID = *LibreDWGc::dwg_add__3DSOLID;
*dwg_add_POLYLINE_PFACE = *LibreDWGc::dwg_add_POLYLINE_PFACE;
*dwg_add_POLYLINE_MESH = *LibreDWGc::dwg_add_POLYLINE_MESH;
*dwg_add_SOLID = *LibreDWGc::dwg_add_SOLID;
*dwg_add_TRACE = *LibreDWGc::dwg_add_TRACE;
*dwg_add_SHAPE = *LibreDWGc::dwg_add_SHAPE;
*dwg_add_VIEWPORT = *LibreDWGc::dwg_add_VIEWPORT;
*dwg_add_ELLIPSE = *LibreDWGc::dwg_add_ELLIPSE;
*dwg_add_SPLINE = *LibreDWGc::dwg_add_SPLINE;
*dwg_add_REGION = *LibreDWGc::dwg_add_REGION;
*dwg_add_3DSOLID = *LibreDWGc::dwg_add_3DSOLID;
*dwg_add_BODY = *LibreDWGc::dwg_add_BODY;
*dwg_add_RAY = *LibreDWGc::dwg_add_RAY;
*dwg_add_XLINE = *LibreDWGc::dwg_add_XLINE;
*dwg_add_DICTIONARY = *LibreDWGc::dwg_add_DICTIONARY;
*dwg_add_OLEFRAME = *LibreDWGc::dwg_add_OLEFRAME;
*dwg_add_MTEXT = *LibreDWGc::dwg_add_MTEXT;
*dwg_add_LEADER = *LibreDWGc::dwg_add_LEADER;
*dwg_add_TOLERANCE = *LibreDWGc::dwg_add_TOLERANCE;
*dwg_add_MLINE = *LibreDWGc::dwg_add_MLINE;
*dwg_add_BLOCK_CONTROL = *LibreDWGc::dwg_add_BLOCK_CONTROL;
*dwg_add_BLOCK_HEADER = *LibreDWGc::dwg_add_BLOCK_HEADER;
*dwg_add_LAYER_CONTROL = *LibreDWGc::dwg_add_LAYER_CONTROL;
*dwg_add_LAYER = *LibreDWGc::dwg_add_LAYER;
*dwg_add_STYLE_CONTROL = *LibreDWGc::dwg_add_STYLE_CONTROL;
*dwg_add_STYLE = *LibreDWGc::dwg_add_STYLE;
*dwg_add_LTYPE_CONTROL = *LibreDWGc::dwg_add_LTYPE_CONTROL;
*dwg_add_LTYPE = *LibreDWGc::dwg_add_LTYPE;
*dwg_add_VIEW_CONTROL = *LibreDWGc::dwg_add_VIEW_CONTROL;
*dwg_add_VIEW = *LibreDWGc::dwg_add_VIEW;
*dwg_add_UCS_CONTROL = *LibreDWGc::dwg_add_UCS_CONTROL;
*dwg_add_UCS = *LibreDWGc::dwg_add_UCS;
*dwg_add_VPORT_CONTROL = *LibreDWGc::dwg_add_VPORT_CONTROL;
*dwg_add_VPORT = *LibreDWGc::dwg_add_VPORT;
*dwg_add_APPID_CONTROL = *LibreDWGc::dwg_add_APPID_CONTROL;
*dwg_add_APPID = *LibreDWGc::dwg_add_APPID;
*dwg_add_DIMSTYLE_CONTROL = *LibreDWGc::dwg_add_DIMSTYLE_CONTROL;
*dwg_add_DIMSTYLE = *LibreDWGc::dwg_add_DIMSTYLE;
*dwg_add_VPORT_ENTITY_CONTROL = *LibreDWGc::dwg_add_VPORT_ENTITY_CONTROL;
*dwg_add_VPORT_ENTITY_HEADER = *LibreDWGc::dwg_add_VPORT_ENTITY_HEADER;
*dwg_add_GROUP = *LibreDWGc::dwg_add_GROUP;
*dwg_add_MLINESTYLE = *LibreDWGc::dwg_add_MLINESTYLE;
*dwg_add_OLE2FRAME = *LibreDWGc::dwg_add_OLE2FRAME;
*dwg_add_DUMMY = *LibreDWGc::dwg_add_DUMMY;
*dwg_add_LONG_TRANSACTION = *LibreDWGc::dwg_add_LONG_TRANSACTION;
*dwg_add_LWPOLYLINE = *LibreDWGc::dwg_add_LWPOLYLINE;
*dwg_add_HATCH = *LibreDWGc::dwg_add_HATCH;
*dwg_add_XRECORD = *LibreDWGc::dwg_add_XRECORD;
*dwg_add_PLACEHOLDER = *LibreDWGc::dwg_add_PLACEHOLDER;
*dwg_add_LAYOUT = *LibreDWGc::dwg_add_LAYOUT;
*dwg_add_PROXY_ENTITY = *LibreDWGc::dwg_add_PROXY_ENTITY;
*dwg_add_PROXY_OBJECT = *LibreDWGc::dwg_add_PROXY_OBJECT;
*dwg_add_CAMERA = *LibreDWGc::dwg_add_CAMERA;
*dwg_add_DBCOLOR = *LibreDWGc::dwg_add_DBCOLOR;
*dwg_add_DETAILVIEWSTYLE = *LibreDWGc::dwg_add_DETAILVIEWSTYLE;
*dwg_add_DIMASSOC = *LibreDWGc::dwg_add_DIMASSOC;
*dwg_add_DICTIONARYVAR = *LibreDWGc::dwg_add_DICTIONARYVAR;
*dwg_add_DICTIONARYWDFLT = *LibreDWGc::dwg_add_DICTIONARYWDFLT;
*dwg_add_FIELD = *LibreDWGc::dwg_add_FIELD;
*dwg_add_FIELDLIST = *LibreDWGc::dwg_add_FIELDLIST;
*dwg_add_GEODATA = *LibreDWGc::dwg_add_GEODATA;
*dwg_add_IMAGE = *LibreDWGc::dwg_add_IMAGE;
*dwg_add_IMAGEDEF = *LibreDWGc::dwg_add_IMAGEDEF;
*dwg_add_IMAGEDEF_REACTOR = *LibreDWGc::dwg_add_IMAGEDEF_REACTOR;
*dwg_add_LAYER_INDEX = *LibreDWGc::dwg_add_LAYER_INDEX;
*dwg_add_LAYER_FILTER = *LibreDWGc::dwg_add_LAYER_FILTER;
*dwg_add_LEADEROBJECTCONTEXTDATA = *LibreDWGc::dwg_add_LEADEROBJECTCONTEXTDATA;
*dwg_add_MLEADERSTYLE = *LibreDWGc::dwg_add_MLEADERSTYLE;
*dwg_add_OBJECT_PTR = *LibreDWGc::dwg_add_OBJECT_PTR;
*dwg_add_RASTERVARIABLES = *LibreDWGc::dwg_add_RASTERVARIABLES;
*dwg_add_SCALE = *LibreDWGc::dwg_add_SCALE;
*dwg_add_SORTENTSTABLE = *LibreDWGc::dwg_add_SORTENTSTABLE;
*dwg_add_SPATIAL_FILTER = *LibreDWGc::dwg_add_SPATIAL_FILTER;
*dwg_add_SPATIAL_INDEX = *LibreDWGc::dwg_add_SPATIAL_INDEX;
*dwg_add_VISUALSTYLE = *LibreDWGc::dwg_add_VISUALSTYLE;
*dwg_add_WIPEOUT = *LibreDWGc::dwg_add_WIPEOUT;
*dwg_add_WIPEOUTVARIABLES = *LibreDWGc::dwg_add_WIPEOUTVARIABLES;
*dwg_get_TEXT = *LibreDWGc::dwg_get_TEXT;
*dwg_get_ATTRIB = *LibreDWGc::dwg_get_ATTRIB;
*dwg_get_ATTDEF = *LibreDWGc::dwg_get_ATTDEF;
*dwg_get_BLOCK = *LibreDWGc::dwg_get_BLOCK;
*dwg_get_ENDBLK = *LibreDWGc::dwg_get_ENDBLK;
*dwg_get_SEQEND = *LibreDWGc::dwg_get_SEQEND;
*dwg_get_INSERT = *LibreDWGc::dwg_get_INSERT;
*dwg_get_MINSERT = *LibreDWGc::dwg_get_MINSERT;
*dwg_get_VERTEX_2D = *LibreDWGc::dwg_get_VERTEX_2D;
*dwg_get_VERTEX_3D = *LibreDWGc::dwg_get_VERTEX_3D;
*dwg_get_VERTEX_MESH = *LibreDWGc::dwg_get_VERTEX_MESH;
*dwg_get_VERTEX_PFACE = *LibreDWGc::dwg_get_VERTEX_PFACE;
*dwg_get_VERTEX_PFACE_FACE = *LibreDWGc::dwg_get_VERTEX_PFACE_FACE;
*dwg_get_POLYLINE_2D = *LibreDWGc::dwg_get_POLYLINE_2D;
*dwg_get_POLYLINE_3D = *LibreDWGc::dwg_get_POLYLINE_3D;
*dwg_get_ARC = *LibreDWGc::dwg_get_ARC;
*dwg_get_CIRCLE = *LibreDWGc::dwg_get_CIRCLE;
*dwg_get_LINE = *LibreDWGc::dwg_get_LINE;
*dwg_get_DIMENSION_ORDINATE = *LibreDWGc::dwg_get_DIMENSION_ORDINATE;
*dwg_get_DIMENSION_LINEAR = *LibreDWGc::dwg_get_DIMENSION_LINEAR;
*dwg_get_DIMENSION_ALIGNED = *LibreDWGc::dwg_get_DIMENSION_ALIGNED;
*dwg_get_DIMENSION_ANG3PT = *LibreDWGc::dwg_get_DIMENSION_ANG3PT;
*dwg_get_DIMENSION_ANG2LN = *LibreDWGc::dwg_get_DIMENSION_ANG2LN;
*dwg_get_DIMENSION_RADIUS = *LibreDWGc::dwg_get_DIMENSION_RADIUS;
*dwg_get_DIMENSION_DIAMETER = *LibreDWGc::dwg_get_DIMENSION_DIAMETER;
*dwg_get_POINT = *LibreDWGc::dwg_get_POINT;
*dwg_get_POLYLINE_PFACE = *LibreDWGc::dwg_get_POLYLINE_PFACE;
*dwg_get_POLYLINE_MESH = *LibreDWGc::dwg_get_POLYLINE_MESH;
*dwg_get_SOLID = *LibreDWGc::dwg_get_SOLID;
*dwg_get_TRACE = *LibreDWGc::dwg_get_TRACE;
*dwg_get_SHAPE = *LibreDWGc::dwg_get_SHAPE;
*dwg_get_VIEWPORT = *LibreDWGc::dwg_get_VIEWPORT;
*dwg_get_ELLIPSE = *LibreDWGc::dwg_get_ELLIPSE;
*dwg_get_SPLINE = *LibreDWGc::dwg_get_SPLINE;
*dwg_get_REGION = *LibreDWGc::dwg_get_REGION;
*dwg_get_BODY = *LibreDWGc::dwg_get_BODY;
*dwg_get_RAY = *LibreDWGc::dwg_get_RAY;
*dwg_get_XLINE = *LibreDWGc::dwg_get_XLINE;
*dwg_get_OLEFRAME = *LibreDWGc::dwg_get_OLEFRAME;
*dwg_get_MTEXT = *LibreDWGc::dwg_get_MTEXT;
*dwg_get_LEADER = *LibreDWGc::dwg_get_LEADER;
*dwg_get_TOLERANCE = *LibreDWGc::dwg_get_TOLERANCE;
*dwg_get_MLINE = *LibreDWGc::dwg_get_MLINE;
*dwg_get_OLE2FRAME = *LibreDWGc::dwg_get_OLE2FRAME;
*dwg_get_LWPOLYLINE = *LibreDWGc::dwg_get_LWPOLYLINE;
*dwg_get_PROXY_ENTITY = *LibreDWGc::dwg_get_PROXY_ENTITY;
*dwg_get_HATCH = *LibreDWGc::dwg_get_HATCH;
*dwg_get_IMAGE = *LibreDWGc::dwg_get_IMAGE;
*dwg_object_to_TEXT = *LibreDWGc::dwg_object_to_TEXT;
*dwg_object_to_ATTRIB = *LibreDWGc::dwg_object_to_ATTRIB;
*dwg_object_to_ATTDEF = *LibreDWGc::dwg_object_to_ATTDEF;
*dwg_object_to_BLOCK = *LibreDWGc::dwg_object_to_BLOCK;
*dwg_object_to_ENDBLK = *LibreDWGc::dwg_object_to_ENDBLK;
*dwg_object_to_SEQEND = *LibreDWGc::dwg_object_to_SEQEND;
*dwg_object_to_INSERT = *LibreDWGc::dwg_object_to_INSERT;
*dwg_object_to_MINSERT = *LibreDWGc::dwg_object_to_MINSERT;
*dwg_object_to_VERTEX_2D = *LibreDWGc::dwg_object_to_VERTEX_2D;
*dwg_object_to_VERTEX_3D = *LibreDWGc::dwg_object_to_VERTEX_3D;
*dwg_object_to_VERTEX_MESH = *LibreDWGc::dwg_object_to_VERTEX_MESH;
*dwg_object_to_VERTEX_PFACE = *LibreDWGc::dwg_object_to_VERTEX_PFACE;
*dwg_object_to_VERTEX_PFACE_FACE = *LibreDWGc::dwg_object_to_VERTEX_PFACE_FACE;
*dwg_object_to_POLYLINE_2D = *LibreDWGc::dwg_object_to_POLYLINE_2D;
*dwg_object_to_POLYLINE_3D = *LibreDWGc::dwg_object_to_POLYLINE_3D;
*dwg_object_to_ARC = *LibreDWGc::dwg_object_to_ARC;
*dwg_object_to_CIRCLE = *LibreDWGc::dwg_object_to_CIRCLE;
*dwg_object_to_LINE = *LibreDWGc::dwg_object_to_LINE;
*dwg_object_to_DIMENSION = *LibreDWGc::dwg_object_to_DIMENSION;
*dwg_object_to_DIMENSION_ORDINATE = *LibreDWGc::dwg_object_to_DIMENSION_ORDINATE;
*dwg_object_to_DIMENSION_LINEAR = *LibreDWGc::dwg_object_to_DIMENSION_LINEAR;
*dwg_object_to_DIMENSION_ALIGNED = *LibreDWGc::dwg_object_to_DIMENSION_ALIGNED;
*dwg_object_to_DIMENSION_ANG3PT = *LibreDWGc::dwg_object_to_DIMENSION_ANG3PT;
*dwg_object_to_DIMENSION_ANG2LN = *LibreDWGc::dwg_object_to_DIMENSION_ANG2LN;
*dwg_object_to_DIMENSION_RADIUS = *LibreDWGc::dwg_object_to_DIMENSION_RADIUS;
*dwg_object_to_DIMENSION_DIAMETER = *LibreDWGc::dwg_object_to_DIMENSION_DIAMETER;
*dwg_object_to_POINT = *LibreDWGc::dwg_object_to_POINT;
*dwg_object_to_POLYLINE_PFACE = *LibreDWGc::dwg_object_to_POLYLINE_PFACE;
*dwg_object_to_POLYLINE_MESH = *LibreDWGc::dwg_object_to_POLYLINE_MESH;
*dwg_object_to_SOLID = *LibreDWGc::dwg_object_to_SOLID;
*dwg_object_to_TRACE = *LibreDWGc::dwg_object_to_TRACE;
*dwg_object_to_SHAPE = *LibreDWGc::dwg_object_to_SHAPE;
*dwg_object_to_VIEWPORT = *LibreDWGc::dwg_object_to_VIEWPORT;
*dwg_object_to_ELLIPSE = *LibreDWGc::dwg_object_to_ELLIPSE;
*dwg_object_to_SPLINE = *LibreDWGc::dwg_object_to_SPLINE;
*dwg_object_to_REGION = *LibreDWGc::dwg_object_to_REGION;
*dwg_object_to_BODY = *LibreDWGc::dwg_object_to_BODY;
*dwg_object_to_RAY = *LibreDWGc::dwg_object_to_RAY;
*dwg_object_to_XLINE = *LibreDWGc::dwg_object_to_XLINE;
*dwg_object_to_OLEFRAME = *LibreDWGc::dwg_object_to_OLEFRAME;
*dwg_object_to_MTEXT = *LibreDWGc::dwg_object_to_MTEXT;
*dwg_object_to_LEADER = *LibreDWGc::dwg_object_to_LEADER;
*dwg_object_to_TOLERANCE = *LibreDWGc::dwg_object_to_TOLERANCE;
*dwg_object_to_MLINE = *LibreDWGc::dwg_object_to_MLINE;
*dwg_object_to_OLE2FRAME = *LibreDWGc::dwg_object_to_OLE2FRAME;
*dwg_object_to_LWPOLYLINE = *LibreDWGc::dwg_object_to_LWPOLYLINE;
*dwg_object_to_PROXY_ENTITY = *LibreDWGc::dwg_object_to_PROXY_ENTITY;
*dwg_object_to_HATCH = *LibreDWGc::dwg_object_to_HATCH;
*dwg_object_to_IMAGE = *LibreDWGc::dwg_object_to_IMAGE;
*dwg_object_to_CAMERA = *LibreDWGc::dwg_object_to_CAMERA;
*dwg_object_to_SURFACE = *LibreDWGc::dwg_object_to_SURFACE;
*dwg_object_to_GEOPOSITIONMARKER = *LibreDWGc::dwg_object_to_GEOPOSITIONMARKER;
*dwg_object_to_LIGHT = *LibreDWGc::dwg_object_to_LIGHT;
*dwg_object_to_MULTILEADER = *LibreDWGc::dwg_object_to_MULTILEADER;
*dwg_object_to_TABLE = *LibreDWGc::dwg_object_to_TABLE;
*dwg_object_to_UNDERLAY = *LibreDWGc::dwg_object_to_UNDERLAY;
*dwg_object_to_WIPEOUT = *LibreDWGc::dwg_object_to_WIPEOUT;
*dwg_object_to_BLOCK_HEADER = *LibreDWGc::dwg_object_to_BLOCK_HEADER;
*dwg_object_to_BLOCK_CONTROL = *LibreDWGc::dwg_object_to_BLOCK_CONTROL;
*dwg_object_to_LAYER = *LibreDWGc::dwg_object_to_LAYER;
*dwg_object_to_XRECORD = *LibreDWGc::dwg_object_to_XRECORD;
*dwg_api_init_version = *LibreDWGc::dwg_api_init_version;
*dwg_ent_circle_get_center = *LibreDWGc::dwg_ent_circle_get_center;
*dwg_ent_circle_set_center = *LibreDWGc::dwg_ent_circle_set_center;
*dwg_ent_circle_get_radius = *LibreDWGc::dwg_ent_circle_get_radius;
*dwg_ent_circle_set_radius = *LibreDWGc::dwg_ent_circle_set_radius;
*dwg_ent_circle_get_thickness = *LibreDWGc::dwg_ent_circle_get_thickness;
*dwg_ent_circle_set_thickness = *LibreDWGc::dwg_ent_circle_set_thickness;
*dwg_ent_circle_get_extrusion = *LibreDWGc::dwg_ent_circle_get_extrusion;
*dwg_ent_circle_set_extrusion = *LibreDWGc::dwg_ent_circle_set_extrusion;
*dwg_ent_line_get_start_point = *LibreDWGc::dwg_ent_line_get_start_point;
*dwg_ent_line_set_start_point = *LibreDWGc::dwg_ent_line_set_start_point;
*dwg_ent_line_get_end_point = *LibreDWGc::dwg_ent_line_get_end_point;
*dwg_ent_line_set_end_point = *LibreDWGc::dwg_ent_line_set_end_point;
*dwg_ent_line_get_thickness = *LibreDWGc::dwg_ent_line_get_thickness;
*dwg_ent_line_set_thickness = *LibreDWGc::dwg_ent_line_set_thickness;
*dwg_ent_line_set_extrusion = *LibreDWGc::dwg_ent_line_set_extrusion;
*dwg_ent_line_get_extrusion = *LibreDWGc::dwg_ent_line_get_extrusion;
*dwg_ent_arc_get_center = *LibreDWGc::dwg_ent_arc_get_center;
*dwg_ent_arc_set_center = *LibreDWGc::dwg_ent_arc_set_center;
*dwg_ent_arc_get_radius = *LibreDWGc::dwg_ent_arc_get_radius;
*dwg_ent_arc_set_radius = *LibreDWGc::dwg_ent_arc_set_radius;
*dwg_ent_arc_get_thickness = *LibreDWGc::dwg_ent_arc_get_thickness;
*dwg_ent_arc_set_thickness = *LibreDWGc::dwg_ent_arc_set_thickness;
*dwg_ent_arc_get_extrusion = *LibreDWGc::dwg_ent_arc_get_extrusion;
*dwg_ent_arc_set_extrusion = *LibreDWGc::dwg_ent_arc_set_extrusion;
*dwg_ent_arc_get_start_angle = *LibreDWGc::dwg_ent_arc_get_start_angle;
*dwg_ent_arc_set_start_angle = *LibreDWGc::dwg_ent_arc_set_start_angle;
*dwg_ent_arc_get_end_angle = *LibreDWGc::dwg_ent_arc_get_end_angle;
*dwg_ent_arc_set_end_angle = *LibreDWGc::dwg_ent_arc_set_end_angle;
*dwg_ent_ellipse_get_center = *LibreDWGc::dwg_ent_ellipse_get_center;
*dwg_ent_ellipse_set_center = *LibreDWGc::dwg_ent_ellipse_set_center;
*dwg_ent_ellipse_get_sm_axis = *LibreDWGc::dwg_ent_ellipse_get_sm_axis;
*dwg_ent_ellipse_set_sm_axis = *LibreDWGc::dwg_ent_ellipse_set_sm_axis;
*dwg_ent_ellipse_get_extrusion = *LibreDWGc::dwg_ent_ellipse_get_extrusion;
*dwg_ent_ellipse_set_extrusion = *LibreDWGc::dwg_ent_ellipse_set_extrusion;
*dwg_ent_ellipse_get_axis_ratio = *LibreDWGc::dwg_ent_ellipse_get_axis_ratio;
*dwg_ent_ellipse_set_axis_ratio = *LibreDWGc::dwg_ent_ellipse_set_axis_ratio;
*dwg_ent_ellipse_get_start_angle = *LibreDWGc::dwg_ent_ellipse_get_start_angle;
*dwg_ent_ellipse_set_start_angle = *LibreDWGc::dwg_ent_ellipse_set_start_angle;
*dwg_ent_ellipse_get_end_angle = *LibreDWGc::dwg_ent_ellipse_get_end_angle;
*dwg_ent_ellipse_set_end_angle = *LibreDWGc::dwg_ent_ellipse_set_end_angle;
*dwg_ent_text_set_text = *LibreDWGc::dwg_ent_text_set_text;
*dwg_ent_text_get_text = *LibreDWGc::dwg_ent_text_get_text;
*dwg_ent_text_get_insertion_point = *LibreDWGc::dwg_ent_text_get_insertion_point;
*dwg_ent_text_set_insertion_point = *LibreDWGc::dwg_ent_text_set_insertion_point;
*dwg_ent_text_get_height = *LibreDWGc::dwg_ent_text_get_height;
*dwg_ent_text_set_height = *LibreDWGc::dwg_ent_text_set_height;
*dwg_ent_text_get_extrusion = *LibreDWGc::dwg_ent_text_get_extrusion;
*dwg_ent_text_set_extrusion = *LibreDWGc::dwg_ent_text_set_extrusion;
*dwg_ent_text_get_thickness = *LibreDWGc::dwg_ent_text_get_thickness;
*dwg_ent_text_set_thickness = *LibreDWGc::dwg_ent_text_set_thickness;
*dwg_ent_text_get_rotation = *LibreDWGc::dwg_ent_text_get_rotation;
*dwg_ent_text_set_rotation = *LibreDWGc::dwg_ent_text_set_rotation;
*dwg_ent_text_get_vert_align = *LibreDWGc::dwg_ent_text_get_vert_align;
*dwg_ent_text_set_vert_align = *LibreDWGc::dwg_ent_text_set_vert_align;
*dwg_ent_text_get_horiz_align = *LibreDWGc::dwg_ent_text_get_horiz_align;
*dwg_ent_text_set_horiz_align = *LibreDWGc::dwg_ent_text_set_horiz_align;
*dwg_ent_attrib_set_text = *LibreDWGc::dwg_ent_attrib_set_text;
*dwg_ent_attrib_get_text = *LibreDWGc::dwg_ent_attrib_get_text;
*dwg_ent_attrib_get_insertion_point = *LibreDWGc::dwg_ent_attrib_get_insertion_point;
*dwg_ent_attrib_set_insertion_point = *LibreDWGc::dwg_ent_attrib_set_insertion_point;
*dwg_ent_attrib_get_height = *LibreDWGc::dwg_ent_attrib_get_height;
*dwg_ent_attrib_set_height = *LibreDWGc::dwg_ent_attrib_set_height;
*dwg_ent_attrib_get_extrusion = *LibreDWGc::dwg_ent_attrib_get_extrusion;
*dwg_ent_attrib_set_extrusion = *LibreDWGc::dwg_ent_attrib_set_extrusion;
*dwg_ent_attrib_get_thickness = *LibreDWGc::dwg_ent_attrib_get_thickness;
*dwg_ent_attrib_set_thickness = *LibreDWGc::dwg_ent_attrib_set_thickness;
*dwg_ent_attrib_get_rot_angle = *LibreDWGc::dwg_ent_attrib_get_rot_angle;
*dwg_ent_attrib_set_rot_angle = *LibreDWGc::dwg_ent_attrib_set_rot_angle;
*dwg_ent_attrib_get_vert_align = *LibreDWGc::dwg_ent_attrib_get_vert_align;
*dwg_ent_attrib_set_vert_align = *LibreDWGc::dwg_ent_attrib_set_vert_align;
*dwg_ent_attrib_get_horiz_align = *LibreDWGc::dwg_ent_attrib_get_horiz_align;
*dwg_ent_attrib_set_horiz_align = *LibreDWGc::dwg_ent_attrib_set_horiz_align;
*dwg_ent_attdef_set_text = *LibreDWGc::dwg_ent_attdef_set_text;
*dwg_ent_attdef_get_text = *LibreDWGc::dwg_ent_attdef_get_text;
*dwg_ent_attdef_get_insertion_point = *LibreDWGc::dwg_ent_attdef_get_insertion_point;
*dwg_ent_attdef_set_insertion_point = *LibreDWGc::dwg_ent_attdef_set_insertion_point;
*dwg_ent_attdef_get_height = *LibreDWGc::dwg_ent_attdef_get_height;
*dwg_ent_attdef_set_height = *LibreDWGc::dwg_ent_attdef_set_height;
*dwg_ent_attdef_get_extrusion = *LibreDWGc::dwg_ent_attdef_get_extrusion;
*dwg_ent_attdef_set_extrusion = *LibreDWGc::dwg_ent_attdef_set_extrusion;
*dwg_ent_attdef_get_thickness = *LibreDWGc::dwg_ent_attdef_get_thickness;
*dwg_ent_attdef_set_thickness = *LibreDWGc::dwg_ent_attdef_set_thickness;
*dwg_ent_attdef_get_rot_angle = *LibreDWGc::dwg_ent_attdef_get_rot_angle;
*dwg_ent_attdef_set_rot_angle = *LibreDWGc::dwg_ent_attdef_set_rot_angle;
*dwg_ent_attdef_get_vert_align = *LibreDWGc::dwg_ent_attdef_get_vert_align;
*dwg_ent_attdef_set_vert_align = *LibreDWGc::dwg_ent_attdef_set_vert_align;
*dwg_ent_attdef_get_horiz_align = *LibreDWGc::dwg_ent_attdef_get_horiz_align;
*dwg_ent_attdef_set_horiz_align = *LibreDWGc::dwg_ent_attdef_set_horiz_align;
*dwg_ent_point_set_point = *LibreDWGc::dwg_ent_point_set_point;
*dwg_ent_point_get_point = *LibreDWGc::dwg_ent_point_get_point;
*dwg_ent_point_get_thickness = *LibreDWGc::dwg_ent_point_get_thickness;
*dwg_ent_point_set_thickness = *LibreDWGc::dwg_ent_point_set_thickness;
*dwg_ent_point_set_extrusion = *LibreDWGc::dwg_ent_point_set_extrusion;
*dwg_ent_point_get_extrusion = *LibreDWGc::dwg_ent_point_get_extrusion;
*dwg_ent_solid_get_thickness = *LibreDWGc::dwg_ent_solid_get_thickness;
*dwg_ent_solid_set_thickness = *LibreDWGc::dwg_ent_solid_set_thickness;
*dwg_ent_solid_get_elevation = *LibreDWGc::dwg_ent_solid_get_elevation;
*dwg_ent_solid_set_elevation = *LibreDWGc::dwg_ent_solid_set_elevation;
*dwg_ent_solid_get_corner1 = *LibreDWGc::dwg_ent_solid_get_corner1;
*dwg_ent_solid_set_corner1 = *LibreDWGc::dwg_ent_solid_set_corner1;
*dwg_ent_solid_get_corner2 = *LibreDWGc::dwg_ent_solid_get_corner2;
*dwg_ent_solid_set_corner2 = *LibreDWGc::dwg_ent_solid_set_corner2;
*dwg_ent_solid_get_corner3 = *LibreDWGc::dwg_ent_solid_get_corner3;
*dwg_ent_solid_set_corner3 = *LibreDWGc::dwg_ent_solid_set_corner3;
*dwg_ent_solid_get_corner4 = *LibreDWGc::dwg_ent_solid_get_corner4;
*dwg_ent_solid_set_corner4 = *LibreDWGc::dwg_ent_solid_set_corner4;
*dwg_ent_solid_get_extrusion = *LibreDWGc::dwg_ent_solid_get_extrusion;
*dwg_ent_solid_set_extrusion = *LibreDWGc::dwg_ent_solid_set_extrusion;
*dwg_ent_block_set_name = *LibreDWGc::dwg_ent_block_set_name;
*dwg_ent_block_get_name = *LibreDWGc::dwg_ent_block_get_name;
*dwg_ent_ray_get_point = *LibreDWGc::dwg_ent_ray_get_point;
*dwg_ent_ray_set_point = *LibreDWGc::dwg_ent_ray_set_point;
*dwg_ent_ray_get_vector = *LibreDWGc::dwg_ent_ray_get_vector;
*dwg_ent_ray_set_vector = *LibreDWGc::dwg_ent_ray_set_vector;
*dwg_ent_xline_get_point = *LibreDWGc::dwg_ent_xline_get_point;
*dwg_ent_xline_set_point = *LibreDWGc::dwg_ent_xline_set_point;
*dwg_ent_xline_get_vector = *LibreDWGc::dwg_ent_xline_get_vector;
*dwg_ent_xline_set_vector = *LibreDWGc::dwg_ent_xline_set_vector;
*dwg_ent_trace_get_thickness = *LibreDWGc::dwg_ent_trace_get_thickness;
*dwg_ent_trace_set_thickness = *LibreDWGc::dwg_ent_trace_set_thickness;
*dwg_ent_trace_get_elevation = *LibreDWGc::dwg_ent_trace_get_elevation;
*dwg_ent_trace_set_elevation = *LibreDWGc::dwg_ent_trace_set_elevation;
*dwg_ent_trace_get_corner1 = *LibreDWGc::dwg_ent_trace_get_corner1;
*dwg_ent_trace_set_corner1 = *LibreDWGc::dwg_ent_trace_set_corner1;
*dwg_ent_trace_get_corner2 = *LibreDWGc::dwg_ent_trace_get_corner2;
*dwg_ent_trace_set_corner2 = *LibreDWGc::dwg_ent_trace_set_corner2;
*dwg_ent_trace_get_corner3 = *LibreDWGc::dwg_ent_trace_get_corner3;
*dwg_ent_trace_set_corner3 = *LibreDWGc::dwg_ent_trace_set_corner3;
*dwg_ent_trace_get_corner4 = *LibreDWGc::dwg_ent_trace_get_corner4;
*dwg_ent_trace_set_corner4 = *LibreDWGc::dwg_ent_trace_set_corner4;
*dwg_ent_trace_get_extrusion = *LibreDWGc::dwg_ent_trace_get_extrusion;
*dwg_ent_trace_set_extrusion = *LibreDWGc::dwg_ent_trace_set_extrusion;
*dwg_ent_vertex_3d_get_flag = *LibreDWGc::dwg_ent_vertex_3d_get_flag;
*dwg_ent_vertex_3d_set_flag = *LibreDWGc::dwg_ent_vertex_3d_set_flag;
*dwg_ent_vertex_3d_get_point = *LibreDWGc::dwg_ent_vertex_3d_get_point;
*dwg_ent_vertex_3d_set_point = *LibreDWGc::dwg_ent_vertex_3d_set_point;
*dwg_ent_vertex_mesh_get_flag = *LibreDWGc::dwg_ent_vertex_mesh_get_flag;
*dwg_ent_vertex_mesh_set_flag = *LibreDWGc::dwg_ent_vertex_mesh_set_flag;
*dwg_ent_vertex_mesh_get_point = *LibreDWGc::dwg_ent_vertex_mesh_get_point;
*dwg_ent_vertex_mesh_set_point = *LibreDWGc::dwg_ent_vertex_mesh_set_point;
*dwg_ent_vertex_pface_get_flag = *LibreDWGc::dwg_ent_vertex_pface_get_flag;
*dwg_ent_vertex_pface_set_flag = *LibreDWGc::dwg_ent_vertex_pface_set_flag;
*dwg_ent_vertex_pface_get_point = *LibreDWGc::dwg_ent_vertex_pface_get_point;
*dwg_ent_vertex_pface_set_point = *LibreDWGc::dwg_ent_vertex_pface_set_point;
*dwg_ent_vertex_2d_get_flag = *LibreDWGc::dwg_ent_vertex_2d_get_flag;
*dwg_ent_vertex_2d_set_flag = *LibreDWGc::dwg_ent_vertex_2d_set_flag;
*dwg_ent_vertex_2d_get_point = *LibreDWGc::dwg_ent_vertex_2d_get_point;
*dwg_ent_vertex_2d_set_point = *LibreDWGc::dwg_ent_vertex_2d_set_point;
*dwg_ent_vertex_2d_get_start_width = *LibreDWGc::dwg_ent_vertex_2d_get_start_width;
*dwg_ent_vertex_2d_set_start_width = *LibreDWGc::dwg_ent_vertex_2d_set_start_width;
*dwg_ent_vertex_2d_get_end_width = *LibreDWGc::dwg_ent_vertex_2d_get_end_width;
*dwg_ent_vertex_2d_set_end_width = *LibreDWGc::dwg_ent_vertex_2d_set_end_width;
*dwg_ent_vertex_2d_get_bulge = *LibreDWGc::dwg_ent_vertex_2d_get_bulge;
*dwg_ent_vertex_2d_set_bulge = *LibreDWGc::dwg_ent_vertex_2d_set_bulge;
*dwg_ent_vertex_2d_get_tangent_dir = *LibreDWGc::dwg_ent_vertex_2d_get_tangent_dir;
*dwg_ent_vertex_2d_set_tangent_dir = *LibreDWGc::dwg_ent_vertex_2d_set_tangent_dir;
*dwg_ent_insert_get_ins_pt = *LibreDWGc::dwg_ent_insert_get_ins_pt;
*dwg_ent_insert_set_ins_pt = *LibreDWGc::dwg_ent_insert_set_ins_pt;
*dwg_ent_insert_get_scale_flag = *LibreDWGc::dwg_ent_insert_get_scale_flag;
*dwg_ent_insert_set_scale_flag = *LibreDWGc::dwg_ent_insert_set_scale_flag;
*dwg_ent_insert_get_scale = *LibreDWGc::dwg_ent_insert_get_scale;
*dwg_ent_insert_set_scale = *LibreDWGc::dwg_ent_insert_set_scale;
*dwg_ent_insert_get_rotation = *LibreDWGc::dwg_ent_insert_get_rotation;
*dwg_ent_insert_set_rotation = *LibreDWGc::dwg_ent_insert_set_rotation;
*dwg_ent_insert_get_extrusion = *LibreDWGc::dwg_ent_insert_get_extrusion;
*dwg_ent_insert_set_extrusion = *LibreDWGc::dwg_ent_insert_set_extrusion;
*dwg_ent_insert_has_attribs = *LibreDWGc::dwg_ent_insert_has_attribs;
*dwg_ent_insert_get_num_owned = *LibreDWGc::dwg_ent_insert_get_num_owned;
*dwg_ent_insert_get_block_header = *LibreDWGc::dwg_ent_insert_get_block_header;
*dwg_ent_minsert_get_ins_pt = *LibreDWGc::dwg_ent_minsert_get_ins_pt;
*dwg_ent_minsert_set_ins_pt = *LibreDWGc::dwg_ent_minsert_set_ins_pt;
*dwg_ent_minsert_get_scale_flag = *LibreDWGc::dwg_ent_minsert_get_scale_flag;
*dwg_ent_minsert_set_scale_flag = *LibreDWGc::dwg_ent_minsert_set_scale_flag;
*dwg_ent_minsert_get_scale = *LibreDWGc::dwg_ent_minsert_get_scale;
*dwg_ent_minsert_set_scale = *LibreDWGc::dwg_ent_minsert_set_scale;
*dwg_ent_minsert_get_rotation = *LibreDWGc::dwg_ent_minsert_get_rotation;
*dwg_ent_minsert_set_rotation = *LibreDWGc::dwg_ent_minsert_set_rotation;
*dwg_ent_minsert_get_extrusion = *LibreDWGc::dwg_ent_minsert_get_extrusion;
*dwg_ent_minsert_set_extrusion = *LibreDWGc::dwg_ent_minsert_set_extrusion;
*dwg_ent_minsert_has_attribs = *LibreDWGc::dwg_ent_minsert_has_attribs;
*dwg_ent_minsert_get_num_owned = *LibreDWGc::dwg_ent_minsert_get_num_owned;
*dwg_ent_minsert_get_numcols = *LibreDWGc::dwg_ent_minsert_get_numcols;
*dwg_ent_minsert_get_numrows = *LibreDWGc::dwg_ent_minsert_get_numrows;
*dwg_ent_minsert_get_col_spacing = *LibreDWGc::dwg_ent_minsert_get_col_spacing;
*dwg_ent_minsert_set_col_spacing = *LibreDWGc::dwg_ent_minsert_set_col_spacing;
*dwg_ent_minsert_get_row_spacing = *LibreDWGc::dwg_ent_minsert_get_row_spacing;
*dwg_ent_minsert_set_row_spacing = *LibreDWGc::dwg_ent_minsert_set_row_spacing;
*dwg_ent_minsert_get_block_header = *LibreDWGc::dwg_ent_minsert_get_block_header;
*dwg_obj_mlinestyle_get_name = *LibreDWGc::dwg_obj_mlinestyle_get_name;
*dwg_obj_mlinestyle_set_name = *LibreDWGc::dwg_obj_mlinestyle_set_name;
*dwg_obj_mlinestyle_get_desc = *LibreDWGc::dwg_obj_mlinestyle_get_desc;
*dwg_obj_mlinestyle_set_desc = *LibreDWGc::dwg_obj_mlinestyle_set_desc;
*dwg_obj_mlinestyle_get_flag = *LibreDWGc::dwg_obj_mlinestyle_get_flag;
*dwg_obj_mlinestyle_set_flag = *LibreDWGc::dwg_obj_mlinestyle_set_flag;
*dwg_obj_mlinestyle_get_start_angle = *LibreDWGc::dwg_obj_mlinestyle_get_start_angle;
*dwg_obj_mlinestyle_set_start_angle = *LibreDWGc::dwg_obj_mlinestyle_set_start_angle;
*dwg_obj_mlinestyle_get_end_angle = *LibreDWGc::dwg_obj_mlinestyle_get_end_angle;
*dwg_obj_mlinestyle_set_end_angle = *LibreDWGc::dwg_obj_mlinestyle_set_end_angle;
*dwg_obj_mlinestyle_get_num_lines = *LibreDWGc::dwg_obj_mlinestyle_get_num_lines;
*dwg_obj_appid_control_get_num_entries = *LibreDWGc::dwg_obj_appid_control_get_num_entries;
*dwg_obj_appid_control_get_appid = *LibreDWGc::dwg_obj_appid_control_get_appid;
*dwg_obj_appid_get_entry_name = *LibreDWGc::dwg_obj_appid_get_entry_name;
*dwg_obj_appid_set_entry_name = *LibreDWGc::dwg_obj_appid_set_entry_name;
*dwg_obj_appid_get_flag = *LibreDWGc::dwg_obj_appid_get_flag;
*dwg_obj_appid_set_flag = *LibreDWGc::dwg_obj_appid_set_flag;
*dwg_obj_appid_get_appid_control = *LibreDWGc::dwg_obj_appid_get_appid_control;
*dwg_ent_dim_get_block_name = *LibreDWGc::dwg_ent_dim_get_block_name;
*dwg_ent_dim_get_elevation = *LibreDWGc::dwg_ent_dim_get_elevation;
*dwg_ent_dim_set_elevation = *LibreDWGc::dwg_ent_dim_set_elevation;
*dwg_ent_dim_get_flag1 = *LibreDWGc::dwg_ent_dim_get_flag1;
*dwg_ent_dim_set_flag1 = *LibreDWGc::dwg_ent_dim_set_flag1;
*dwg_ent_dim_get_act_measurement = *LibreDWGc::dwg_ent_dim_get_act_measurement;
*dwg_ent_dim_set_act_measurement = *LibreDWGc::dwg_ent_dim_set_act_measurement;
*dwg_ent_dim_get_horiz_dir = *LibreDWGc::dwg_ent_dim_get_horiz_dir;
*dwg_ent_dim_set_horiz_dir = *LibreDWGc::dwg_ent_dim_set_horiz_dir;
*dwg_ent_dim_get_lspace_factor = *LibreDWGc::dwg_ent_dim_get_lspace_factor;
*dwg_ent_dim_set_lspace_factor = *LibreDWGc::dwg_ent_dim_set_lspace_factor;
*dwg_ent_dim_get_lspace_style = *LibreDWGc::dwg_ent_dim_get_lspace_style;
*dwg_ent_dim_set_lspace_style = *LibreDWGc::dwg_ent_dim_set_lspace_style;
*dwg_ent_dim_get_attachment = *LibreDWGc::dwg_ent_dim_get_attachment;
*dwg_ent_dim_set_attachment = *LibreDWGc::dwg_ent_dim_set_attachment;
*dwg_ent_dim_set_extrusion = *LibreDWGc::dwg_ent_dim_set_extrusion;
*dwg_ent_dim_get_extrusion = *LibreDWGc::dwg_ent_dim_get_extrusion;
*dwg_ent_dim_get_user_text = *LibreDWGc::dwg_ent_dim_get_user_text;
*dwg_ent_dim_set_user_text = *LibreDWGc::dwg_ent_dim_set_user_text;
*dwg_ent_dim_get_text_rot = *LibreDWGc::dwg_ent_dim_get_text_rot;
*dwg_ent_dim_set_text_rot = *LibreDWGc::dwg_ent_dim_set_text_rot;
*dwg_ent_dim_get_ins_rotation = *LibreDWGc::dwg_ent_dim_get_ins_rotation;
*dwg_ent_dim_set_ins_rotation = *LibreDWGc::dwg_ent_dim_set_ins_rotation;
*dwg_ent_dim_get_flip_arrow1 = *LibreDWGc::dwg_ent_dim_get_flip_arrow1;
*dwg_ent_dim_set_flip_arrow1 = *LibreDWGc::dwg_ent_dim_set_flip_arrow1;
*dwg_ent_dim_get_flip_arrow2 = *LibreDWGc::dwg_ent_dim_get_flip_arrow2;
*dwg_ent_dim_set_flip_arrow2 = *LibreDWGc::dwg_ent_dim_set_flip_arrow2;
*dwg_ent_dim_set_text_mid_pt = *LibreDWGc::dwg_ent_dim_set_text_mid_pt;
*dwg_ent_dim_get_text_mid_pt = *LibreDWGc::dwg_ent_dim_get_text_mid_pt;
*dwg_ent_dim_set_ins_scale = *LibreDWGc::dwg_ent_dim_set_ins_scale;
*dwg_ent_dim_get_ins_scale = *LibreDWGc::dwg_ent_dim_get_ins_scale;
*dwg_ent_dim_set_clone_ins_pt = *LibreDWGc::dwg_ent_dim_set_clone_ins_pt;
*dwg_ent_dim_get_clone_ins_pt = *LibreDWGc::dwg_ent_dim_get_clone_ins_pt;
*dwg_ent_dim_ordinate_set_ucsorigin_pt = *LibreDWGc::dwg_ent_dim_ordinate_set_ucsorigin_pt;
*dwg_ent_dim_ordinate_get_ucsorigin_pt = *LibreDWGc::dwg_ent_dim_ordinate_get_ucsorigin_pt;
*dwg_ent_dim_ordinate_set_feature_location_pt = *LibreDWGc::dwg_ent_dim_ordinate_set_feature_location_pt;
*dwg_ent_dim_ordinate_get_feature_location_pt = *LibreDWGc::dwg_ent_dim_ordinate_get_feature_location_pt;
*dwg_ent_dim_ordinate_set_leader_endpt = *LibreDWGc::dwg_ent_dim_ordinate_set_leader_endpt;
*dwg_ent_dim_ordinate_get_leader_endpt = *LibreDWGc::dwg_ent_dim_ordinate_get_leader_endpt;
*dwg_ent_dim_ordinate_set_flag2 = *LibreDWGc::dwg_ent_dim_ordinate_set_flag2;
*dwg_ent_dim_ordinate_get_flag2 = *LibreDWGc::dwg_ent_dim_ordinate_get_flag2;
*dwg_ent_dim_linear_set_def_pt = *LibreDWGc::dwg_ent_dim_linear_set_def_pt;
*dwg_ent_dim_linear_get_def_pt = *LibreDWGc::dwg_ent_dim_linear_get_def_pt;
*dwg_ent_dim_linear_set_13_pt = *LibreDWGc::dwg_ent_dim_linear_set_13_pt;
*dwg_ent_dim_linear_get_13_pt = *LibreDWGc::dwg_ent_dim_linear_get_13_pt;
*dwg_ent_dim_linear_set_14_pt = *LibreDWGc::dwg_ent_dim_linear_set_14_pt;
*dwg_ent_dim_linear_get_14_pt = *LibreDWGc::dwg_ent_dim_linear_get_14_pt;
*dwg_ent_dim_linear_get_dim_rot = *LibreDWGc::dwg_ent_dim_linear_get_dim_rot;
*dwg_ent_dim_linear_set_dim_rot = *LibreDWGc::dwg_ent_dim_linear_set_dim_rot;
*dwg_ent_dim_linear_get_ext_line_rotation = *LibreDWGc::dwg_ent_dim_linear_get_ext_line_rotation;
*dwg_ent_dim_linear_set_ext_line_rotation = *LibreDWGc::dwg_ent_dim_linear_set_ext_line_rotation;
*dwg_ent_dim_aligned_set_def_pt = *LibreDWGc::dwg_ent_dim_aligned_set_def_pt;
*dwg_ent_dim_aligned_get_def_pt = *LibreDWGc::dwg_ent_dim_aligned_get_def_pt;
*dwg_ent_dim_aligned_set_13_pt = *LibreDWGc::dwg_ent_dim_aligned_set_13_pt;
*dwg_ent_dim_aligned_get_13_pt = *LibreDWGc::dwg_ent_dim_aligned_get_13_pt;
*dwg_ent_dim_aligned_set_14_pt = *LibreDWGc::dwg_ent_dim_aligned_set_14_pt;
*dwg_ent_dim_aligned_get_14_pt = *LibreDWGc::dwg_ent_dim_aligned_get_14_pt;
*dwg_ent_dim_aligned_get_ext_line_rotation = *LibreDWGc::dwg_ent_dim_aligned_get_ext_line_rotation;
*dwg_ent_dim_aligned_set_ext_line_rotation = *LibreDWGc::dwg_ent_dim_aligned_set_ext_line_rotation;
*dwg_ent_dim_ang3pt_set_def_pt = *LibreDWGc::dwg_ent_dim_ang3pt_set_def_pt;
*dwg_ent_dim_ang3pt_get_def_pt = *LibreDWGc::dwg_ent_dim_ang3pt_get_def_pt;
*dwg_ent_dim_ang3pt_set_13_pt = *LibreDWGc::dwg_ent_dim_ang3pt_set_13_pt;
*dwg_ent_dim_ang3pt_get_13_pt = *LibreDWGc::dwg_ent_dim_ang3pt_get_13_pt;
*dwg_ent_dim_ang3pt_set_14_pt = *LibreDWGc::dwg_ent_dim_ang3pt_set_14_pt;
*dwg_ent_dim_ang3pt_get_14_pt = *LibreDWGc::dwg_ent_dim_ang3pt_get_14_pt;
*dwg_ent_dim_ang3pt_set_first_arc_pt = *LibreDWGc::dwg_ent_dim_ang3pt_set_first_arc_pt;
*dwg_ent_dim_ang3pt_get_first_arc_pt = *LibreDWGc::dwg_ent_dim_ang3pt_get_first_arc_pt;
*dwg_ent_dim_ang2ln_set_def_pt = *LibreDWGc::dwg_ent_dim_ang2ln_set_def_pt;
*dwg_ent_dim_ang2ln_get_def_pt = *LibreDWGc::dwg_ent_dim_ang2ln_get_def_pt;
*dwg_ent_dim_ang2ln_set_13_pt = *LibreDWGc::dwg_ent_dim_ang2ln_set_13_pt;
*dwg_ent_dim_ang2ln_get_13_pt = *LibreDWGc::dwg_ent_dim_ang2ln_get_13_pt;
*dwg_ent_dim_ang2ln_set_14_pt = *LibreDWGc::dwg_ent_dim_ang2ln_set_14_pt;
*dwg_ent_dim_ang2ln_get_14_pt = *LibreDWGc::dwg_ent_dim_ang2ln_get_14_pt;
*dwg_ent_dim_ang2ln_set_first_arc_pt = *LibreDWGc::dwg_ent_dim_ang2ln_set_first_arc_pt;
*dwg_ent_dim_ang2ln_get_first_arc_pt = *LibreDWGc::dwg_ent_dim_ang2ln_get_first_arc_pt;
*dwg_ent_dim_ang2ln_set_16_pt = *LibreDWGc::dwg_ent_dim_ang2ln_set_16_pt;
*dwg_ent_dim_ang2ln_get_16_pt = *LibreDWGc::dwg_ent_dim_ang2ln_get_16_pt;
*dwg_ent_dim_radius_set_def_pt = *LibreDWGc::dwg_ent_dim_radius_set_def_pt;
*dwg_ent_dim_radius_get_def_pt = *LibreDWGc::dwg_ent_dim_radius_get_def_pt;
*dwg_ent_dim_radius_set_first_arc_pt = *LibreDWGc::dwg_ent_dim_radius_set_first_arc_pt;
*dwg_ent_dim_radius_get_first_arc_pt = *LibreDWGc::dwg_ent_dim_radius_get_first_arc_pt;
*dwg_ent_dim_radius_get_leader_length = *LibreDWGc::dwg_ent_dim_radius_get_leader_length;
*dwg_ent_dim_radius_set_leader_length = *LibreDWGc::dwg_ent_dim_radius_set_leader_length;
*dwg_ent_dim_diameter_set_def_pt = *LibreDWGc::dwg_ent_dim_diameter_set_def_pt;
*dwg_ent_dim_diameter_get_def_pt = *LibreDWGc::dwg_ent_dim_diameter_get_def_pt;
*dwg_ent_dim_diameter_set_first_arc_pt = *LibreDWGc::dwg_ent_dim_diameter_set_first_arc_pt;
*dwg_ent_dim_diameter_get_first_arc_pt = *LibreDWGc::dwg_ent_dim_diameter_get_first_arc_pt;
*dwg_ent_dim_diameter_get_leader_length = *LibreDWGc::dwg_ent_dim_diameter_get_leader_length;
*dwg_ent_dim_diameter_set_leader_length = *LibreDWGc::dwg_ent_dim_diameter_set_leader_length;
*dwg_ent_shape_get_ins_pt = *LibreDWGc::dwg_ent_shape_get_ins_pt;
*dwg_ent_shape_set_ins_pt = *LibreDWGc::dwg_ent_shape_set_ins_pt;
*dwg_ent_shape_get_scale = *LibreDWGc::dwg_ent_shape_get_scale;
*dwg_ent_shape_set_scale = *LibreDWGc::dwg_ent_shape_set_scale;
*dwg_ent_shape_get_rotation = *LibreDWGc::dwg_ent_shape_get_rotation;
*dwg_ent_shape_set_rotation = *LibreDWGc::dwg_ent_shape_set_rotation;
*dwg_ent_shape_get_width_factor = *LibreDWGc::dwg_ent_shape_get_width_factor;
*dwg_ent_shape_set_width_factor = *LibreDWGc::dwg_ent_shape_set_width_factor;
*dwg_ent_shape_get_oblique = *LibreDWGc::dwg_ent_shape_get_oblique;
*dwg_ent_shape_set_oblique = *LibreDWGc::dwg_ent_shape_set_oblique;
*dwg_ent_shape_get_thickness = *LibreDWGc::dwg_ent_shape_get_thickness;
*dwg_ent_shape_set_thickness = *LibreDWGc::dwg_ent_shape_set_thickness;
*dwg_ent_shape_get_shape_no = *LibreDWGc::dwg_ent_shape_get_shape_no;
*dwg_ent_shape_set_shape_no = *LibreDWGc::dwg_ent_shape_set_shape_no;
*dwg_ent_shape_get_extrusion = *LibreDWGc::dwg_ent_shape_get_extrusion;
*dwg_ent_shape_set_extrusion = *LibreDWGc::dwg_ent_shape_set_extrusion;
*dwg_ent_mtext_set_insertion_pt = *LibreDWGc::dwg_ent_mtext_set_insertion_pt;
*dwg_ent_mtext_get_insertion_pt = *LibreDWGc::dwg_ent_mtext_get_insertion_pt;
*dwg_ent_mtext_set_extrusion = *LibreDWGc::dwg_ent_mtext_set_extrusion;
*dwg_ent_mtext_get_extrusion = *LibreDWGc::dwg_ent_mtext_get_extrusion;
*dwg_ent_mtext_set_x_axis_dir = *LibreDWGc::dwg_ent_mtext_set_x_axis_dir;
*dwg_ent_mtext_get_x_axis_dir = *LibreDWGc::dwg_ent_mtext_get_x_axis_dir;
*dwg_ent_mtext_set_rect_height = *LibreDWGc::dwg_ent_mtext_set_rect_height;
*dwg_ent_mtext_get_rect_height = *LibreDWGc::dwg_ent_mtext_get_rect_height;
*dwg_ent_mtext_set_rect_width = *LibreDWGc::dwg_ent_mtext_set_rect_width;
*dwg_ent_mtext_get_rect_width = *LibreDWGc::dwg_ent_mtext_get_rect_width;
*dwg_ent_mtext_set_text_height = *LibreDWGc::dwg_ent_mtext_set_text_height;
*dwg_ent_mtext_get_text_height = *LibreDWGc::dwg_ent_mtext_get_text_height;
*dwg_ent_mtext_get_attachment = *LibreDWGc::dwg_ent_mtext_get_attachment;
*dwg_ent_mtext_set_attachment = *LibreDWGc::dwg_ent_mtext_set_attachment;
*dwg_ent_mtext_get_drawing_dir = *LibreDWGc::dwg_ent_mtext_get_drawing_dir;
*dwg_ent_mtext_set_drawing_dir = *LibreDWGc::dwg_ent_mtext_set_drawing_dir;
*dwg_ent_mtext_get_extents_height = *LibreDWGc::dwg_ent_mtext_get_extents_height;
*dwg_ent_mtext_set_extents_height = *LibreDWGc::dwg_ent_mtext_set_extents_height;
*dwg_ent_mtext_get_extents_width = *LibreDWGc::dwg_ent_mtext_get_extents_width;
*dwg_ent_mtext_set_extents_width = *LibreDWGc::dwg_ent_mtext_set_extents_width;
*dwg_ent_mtext_get_text = *LibreDWGc::dwg_ent_mtext_get_text;
*dwg_ent_mtext_set_text = *LibreDWGc::dwg_ent_mtext_set_text;
*dwg_ent_mtext_get_linespace_style = *LibreDWGc::dwg_ent_mtext_get_linespace_style;
*dwg_ent_mtext_set_linespace_style = *LibreDWGc::dwg_ent_mtext_set_linespace_style;
*dwg_ent_mtext_get_linespace_factor = *LibreDWGc::dwg_ent_mtext_get_linespace_factor;
*dwg_ent_mtext_set_linespace_factor = *LibreDWGc::dwg_ent_mtext_set_linespace_factor;
*dwg_ent_leader_set_annot_type = *LibreDWGc::dwg_ent_leader_set_annot_type;
*dwg_ent_leader_get_annot_type = *LibreDWGc::dwg_ent_leader_get_annot_type;
*dwg_ent_leader_set_path_type = *LibreDWGc::dwg_ent_leader_set_path_type;
*dwg_ent_leader_get_path_type = *LibreDWGc::dwg_ent_leader_get_path_type;
*dwg_ent_leader_get_numpts = *LibreDWGc::dwg_ent_leader_get_numpts;
*dwg_ent_leader_set_origin = *LibreDWGc::dwg_ent_leader_set_origin;
*dwg_ent_leader_get_origin = *LibreDWGc::dwg_ent_leader_get_origin;
*dwg_ent_leader_set_extrusion = *LibreDWGc::dwg_ent_leader_set_extrusion;
*dwg_ent_leader_get_extrusion = *LibreDWGc::dwg_ent_leader_get_extrusion;
*dwg_ent_leader_set_x_direction = *LibreDWGc::dwg_ent_leader_set_x_direction;
*dwg_ent_leader_get_x_direction = *LibreDWGc::dwg_ent_leader_get_x_direction;
*dwg_ent_leader_set_offset_to_block_ins_pt = *LibreDWGc::dwg_ent_leader_set_offset_to_block_ins_pt;
*dwg_ent_leader_get_offset_to_block_ins_pt = *LibreDWGc::dwg_ent_leader_get_offset_to_block_ins_pt;
*dwg_ent_leader_set_dimgap = *LibreDWGc::dwg_ent_leader_set_dimgap;
*dwg_ent_leader_get_dimgap = *LibreDWGc::dwg_ent_leader_get_dimgap;
*dwg_ent_leader_set_box_height = *LibreDWGc::dwg_ent_leader_set_box_height;
*dwg_ent_leader_get_box_height = *LibreDWGc::dwg_ent_leader_get_box_height;
*dwg_ent_leader_set_box_width = *LibreDWGc::dwg_ent_leader_set_box_width;
*dwg_ent_leader_get_box_width = *LibreDWGc::dwg_ent_leader_get_box_width;
*dwg_ent_leader_set_hook_line_on_x_dir = *LibreDWGc::dwg_ent_leader_set_hook_line_on_x_dir;
*dwg_ent_leader_get_hook_line_on_x_dir = *LibreDWGc::dwg_ent_leader_get_hook_line_on_x_dir;
*dwg_ent_leader_set_arrowhead_on = *LibreDWGc::dwg_ent_leader_set_arrowhead_on;
*dwg_ent_leader_get_arrowhead_on = *LibreDWGc::dwg_ent_leader_get_arrowhead_on;
*dwg_ent_leader_set_arrowhead_type = *LibreDWGc::dwg_ent_leader_set_arrowhead_type;
*dwg_ent_leader_get_arrowhead_type = *LibreDWGc::dwg_ent_leader_get_arrowhead_type;
*dwg_ent_leader_set_dimasz = *LibreDWGc::dwg_ent_leader_set_dimasz;
*dwg_ent_leader_get_dimasz = *LibreDWGc::dwg_ent_leader_get_dimasz;
*dwg_ent_leader_set_byblock_color = *LibreDWGc::dwg_ent_leader_set_byblock_color;
*dwg_ent_leader_get_byblock_color = *LibreDWGc::dwg_ent_leader_get_byblock_color;
*dwg_ent_tolerance_set_height = *LibreDWGc::dwg_ent_tolerance_set_height;
*dwg_ent_tolerance_get_height = *LibreDWGc::dwg_ent_tolerance_get_height;
*dwg_ent_tolerance_set_dimgap = *LibreDWGc::dwg_ent_tolerance_set_dimgap;
*dwg_ent_tolerance_get_dimgap = *LibreDWGc::dwg_ent_tolerance_get_dimgap;
*dwg_ent_tolerance_set_ins_pt = *LibreDWGc::dwg_ent_tolerance_set_ins_pt;
*dwg_ent_tolerance_get_ins_pt = *LibreDWGc::dwg_ent_tolerance_get_ins_pt;
*dwg_ent_tolerance_set_x_direction = *LibreDWGc::dwg_ent_tolerance_set_x_direction;
*dwg_ent_tolerance_get_x_direction = *LibreDWGc::dwg_ent_tolerance_get_x_direction;
*dwg_ent_tolerance_set_extrusion = *LibreDWGc::dwg_ent_tolerance_set_extrusion;
*dwg_ent_tolerance_get_extrusion = *LibreDWGc::dwg_ent_tolerance_get_extrusion;
*dwg_ent_tolerance_set_text_string = *LibreDWGc::dwg_ent_tolerance_set_text_string;
*dwg_ent_tolerance_get_text_string = *LibreDWGc::dwg_ent_tolerance_get_text_string;
*dwg_ent_lwpline_get_flag = *LibreDWGc::dwg_ent_lwpline_get_flag;
*dwg_ent_lwpline_set_flag = *LibreDWGc::dwg_ent_lwpline_set_flag;
*dwg_ent_lwpline_get_const_width = *LibreDWGc::dwg_ent_lwpline_get_const_width;
*dwg_ent_lwpline_set_const_width = *LibreDWGc::dwg_ent_lwpline_set_const_width;
*dwg_ent_lwpline_get_elevation = *LibreDWGc::dwg_ent_lwpline_get_elevation;
*dwg_ent_lwpline_set_elevation = *LibreDWGc::dwg_ent_lwpline_set_elevation;
*dwg_ent_lwpline_get_thickness = *LibreDWGc::dwg_ent_lwpline_get_thickness;
*dwg_ent_lwpline_set_thickness = *LibreDWGc::dwg_ent_lwpline_set_thickness;
*dwg_ent_lwpline_get_normal = *LibreDWGc::dwg_ent_lwpline_get_normal;
*dwg_ent_lwpline_set_normal = *LibreDWGc::dwg_ent_lwpline_set_normal;
*dwg_ent_lwpline_get_numpoints = *LibreDWGc::dwg_ent_lwpline_get_numpoints;
*dwg_ent_lwpline_get_numbulges = *LibreDWGc::dwg_ent_lwpline_get_numbulges;
*dwg_ent_lwpline_get_numwidths = *LibreDWGc::dwg_ent_lwpline_get_numwidths;
*dwg_ent_lwpline_get_bulges = *LibreDWGc::dwg_ent_lwpline_get_bulges;
*dwg_ent_lwpline_get_points = *LibreDWGc::dwg_ent_lwpline_get_points;
*dwg_ent_lwpline_get_widths = *LibreDWGc::dwg_ent_lwpline_get_widths;
*dwg_ent_ole2frame_get_flag = *LibreDWGc::dwg_ent_ole2frame_get_flag;
*dwg_ent_ole2frame_set_flag = *LibreDWGc::dwg_ent_ole2frame_set_flag;
*dwg_ent_ole2frame_get_mode = *LibreDWGc::dwg_ent_ole2frame_get_mode;
*dwg_ent_ole2frame_set_mode = *LibreDWGc::dwg_ent_ole2frame_set_mode;
*dwg_ent_ole2frame_get_data_length = *LibreDWGc::dwg_ent_ole2frame_get_data_length;
*dwg_ent_ole2frame_set_data_length = *LibreDWGc::dwg_ent_ole2frame_set_data_length;
*dwg_ent_ole2frame_get_data = *LibreDWGc::dwg_ent_ole2frame_get_data;
*dwg_ent_ole2frame_set_data = *LibreDWGc::dwg_ent_ole2frame_set_data;
*dwg_obj_proxy_get_class_id = *LibreDWGc::dwg_obj_proxy_get_class_id;
*dwg_obj_proxy_set_class_id = *LibreDWGc::dwg_obj_proxy_set_class_id;
*dwg_obj_proxy_get_version = *LibreDWGc::dwg_obj_proxy_get_version;
*dwg_obj_proxy_set_version = *LibreDWGc::dwg_obj_proxy_set_version;
*dwg_obj_proxy_get_from_dxf = *LibreDWGc::dwg_obj_proxy_get_from_dxf;
*dwg_obj_proxy_set_from_dxf = *LibreDWGc::dwg_obj_proxy_set_from_dxf;
*dwg_obj_proxy_get_data = *LibreDWGc::dwg_obj_proxy_get_data;
*dwg_obj_proxy_set_data = *LibreDWGc::dwg_obj_proxy_set_data;
*dwg_obj_proxy_get_parenthandle = *LibreDWGc::dwg_obj_proxy_get_parenthandle;
*dwg_obj_proxy_get_objid_object_handles = *LibreDWGc::dwg_obj_proxy_get_objid_object_handles;
*dwg_ent_spline_get_scenario = *LibreDWGc::dwg_ent_spline_get_scenario;
*dwg_ent_spline_set_scenario = *LibreDWGc::dwg_ent_spline_set_scenario;
*dwg_ent_spline_get_degree = *LibreDWGc::dwg_ent_spline_get_degree;
*dwg_ent_spline_set_degree = *LibreDWGc::dwg_ent_spline_set_degree;
*dwg_ent_spline_get_fit_tol = *LibreDWGc::dwg_ent_spline_get_fit_tol;
*dwg_ent_spline_set_fit_tol = *LibreDWGc::dwg_ent_spline_set_fit_tol;
*dwg_ent_spline_get_begin_tan_vector = *LibreDWGc::dwg_ent_spline_get_begin_tan_vector;
*dwg_ent_spline_set_begin_tan_vector = *LibreDWGc::dwg_ent_spline_set_begin_tan_vector;
*dwg_ent_spline_get_end_tan_vector = *LibreDWGc::dwg_ent_spline_get_end_tan_vector;
*dwg_ent_spline_set_end_tan_vector = *LibreDWGc::dwg_ent_spline_set_end_tan_vector;
*dwg_ent_spline_get_knot_tol = *LibreDWGc::dwg_ent_spline_get_knot_tol;
*dwg_ent_spline_set_knot_tol = *LibreDWGc::dwg_ent_spline_set_knot_tol;
*dwg_ent_spline_get_ctrl_tol = *LibreDWGc::dwg_ent_spline_get_ctrl_tol;
*dwg_ent_spline_set_ctrl_tol = *LibreDWGc::dwg_ent_spline_set_ctrl_tol;
*dwg_ent_spline_get_num_fit_pts = *LibreDWGc::dwg_ent_spline_get_num_fit_pts;
*dwg_ent_spline_get_rational = *LibreDWGc::dwg_ent_spline_get_rational;
*dwg_ent_spline_set_rational = *LibreDWGc::dwg_ent_spline_set_rational;
*dwg_ent_spline_get_closed_b = *LibreDWGc::dwg_ent_spline_get_closed_b;
*dwg_ent_spline_set_closed_b = *LibreDWGc::dwg_ent_spline_set_closed_b;
*dwg_ent_spline_get_weighted = *LibreDWGc::dwg_ent_spline_get_weighted;
*dwg_ent_spline_set_weighted = *LibreDWGc::dwg_ent_spline_set_weighted;
*dwg_ent_spline_get_periodic = *LibreDWGc::dwg_ent_spline_get_periodic;
*dwg_ent_spline_set_periodic = *LibreDWGc::dwg_ent_spline_set_periodic;
*dwg_ent_spline_get_num_knots = *LibreDWGc::dwg_ent_spline_get_num_knots;
*dwg_ent_spline_get_num_ctrl_pts = *LibreDWGc::dwg_ent_spline_get_num_ctrl_pts;
*dwg_ent_spline_get_fit_pts = *LibreDWGc::dwg_ent_spline_get_fit_pts;
*dwg_ent_spline_get_ctrl_pts = *LibreDWGc::dwg_ent_spline_get_ctrl_pts;
*dwg_ent_spline_get_knots = *LibreDWGc::dwg_ent_spline_get_knots;
*dwg_ent_viewport_get_center = *LibreDWGc::dwg_ent_viewport_get_center;
*dwg_ent_viewport_set_center = *LibreDWGc::dwg_ent_viewport_set_center;
*dwg_ent_viewport_get_width = *LibreDWGc::dwg_ent_viewport_get_width;
*dwg_ent_viewport_set_width = *LibreDWGc::dwg_ent_viewport_set_width;
*dwg_ent_viewport_get_height = *LibreDWGc::dwg_ent_viewport_get_height;
*dwg_ent_viewport_set_height = *LibreDWGc::dwg_ent_viewport_set_height;
*dwg_ent_viewport_get_grid_major = *LibreDWGc::dwg_ent_viewport_get_grid_major;
*dwg_ent_viewport_set_grid_major = *LibreDWGc::dwg_ent_viewport_set_grid_major;
*dwg_ent_viewport_get_num_frozen_layers = *LibreDWGc::dwg_ent_viewport_get_num_frozen_layers;
*dwg_ent_viewport_set_num_frozen_layers = *LibreDWGc::dwg_ent_viewport_set_num_frozen_layers;
*dwg_ent_viewport_get_style_sheet = *LibreDWGc::dwg_ent_viewport_get_style_sheet;
*dwg_ent_viewport_set_style_sheet = *LibreDWGc::dwg_ent_viewport_set_style_sheet;
*dwg_ent_viewport_set_circle_zoom = *LibreDWGc::dwg_ent_viewport_set_circle_zoom;
*dwg_ent_viewport_get_circle_zoom = *LibreDWGc::dwg_ent_viewport_get_circle_zoom;
*dwg_ent_viewport_set_status_flag = *LibreDWGc::dwg_ent_viewport_set_status_flag;
*dwg_ent_viewport_get_status_flag = *LibreDWGc::dwg_ent_viewport_get_status_flag;
*dwg_ent_viewport_get_render_mode = *LibreDWGc::dwg_ent_viewport_get_render_mode;
*dwg_ent_viewport_set_render_mode = *LibreDWGc::dwg_ent_viewport_set_render_mode;
*dwg_ent_viewport_set_ucs_at_origin = *LibreDWGc::dwg_ent_viewport_set_ucs_at_origin;
*dwg_ent_viewport_get_ucs_at_origin = *LibreDWGc::dwg_ent_viewport_get_ucs_at_origin;
*dwg_ent_viewport_set_ucs_per_viewport = *LibreDWGc::dwg_ent_viewport_set_ucs_per_viewport;
*dwg_ent_viewport_get_ucs_per_viewport = *LibreDWGc::dwg_ent_viewport_get_ucs_per_viewport;
*dwg_ent_viewport_set_view_target = *LibreDWGc::dwg_ent_viewport_set_view_target;
*dwg_ent_viewport_get_view_target = *LibreDWGc::dwg_ent_viewport_get_view_target;
*dwg_ent_viewport_set_view_direction = *LibreDWGc::dwg_ent_viewport_set_view_direction;
*dwg_ent_viewport_get_view_direction = *LibreDWGc::dwg_ent_viewport_get_view_direction;
*dwg_ent_viewport_set_view_twist = *LibreDWGc::dwg_ent_viewport_set_view_twist;
*dwg_ent_viewport_get_view_twist = *LibreDWGc::dwg_ent_viewport_get_view_twist;
*dwg_ent_viewport_set_view_height = *LibreDWGc::dwg_ent_viewport_set_view_height;
*dwg_ent_viewport_get_view_height = *LibreDWGc::dwg_ent_viewport_get_view_height;
*dwg_ent_viewport_set_lens_length = *LibreDWGc::dwg_ent_viewport_set_lens_length;
*dwg_ent_viewport_get_lens_length = *LibreDWGc::dwg_ent_viewport_get_lens_length;
*dwg_ent_viewport_set_front_clip_z = *LibreDWGc::dwg_ent_viewport_set_front_clip_z;
*dwg_ent_viewport_get_front_clip_z = *LibreDWGc::dwg_ent_viewport_get_front_clip_z;
*dwg_ent_viewport_set_back_clip_z = *LibreDWGc::dwg_ent_viewport_set_back_clip_z;
*dwg_ent_viewport_get_back_clip_z = *LibreDWGc::dwg_ent_viewport_get_back_clip_z;
*dwg_ent_viewport_set_snap_angle = *LibreDWGc::dwg_ent_viewport_set_snap_angle;
*dwg_ent_viewport_get_snap_angle = *LibreDWGc::dwg_ent_viewport_get_snap_angle;
*dwg_ent_viewport_get_view_center = *LibreDWGc::dwg_ent_viewport_get_view_center;
*dwg_ent_viewport_set_view_center = *LibreDWGc::dwg_ent_viewport_set_view_center;
*dwg_ent_viewport_get_grid_spacing = *LibreDWGc::dwg_ent_viewport_get_grid_spacing;
*dwg_ent_viewport_set_grid_spacing = *LibreDWGc::dwg_ent_viewport_set_grid_spacing;
*dwg_ent_viewport_get_snap_base = *LibreDWGc::dwg_ent_viewport_get_snap_base;
*dwg_ent_viewport_set_snap_base = *LibreDWGc::dwg_ent_viewport_set_snap_base;
*dwg_ent_viewport_get_snap_spacing = *LibreDWGc::dwg_ent_viewport_get_snap_spacing;
*dwg_ent_viewport_set_snap_spacing = *LibreDWGc::dwg_ent_viewport_set_snap_spacing;
*dwg_ent_viewport_set_ucs_origin = *LibreDWGc::dwg_ent_viewport_set_ucs_origin;
*dwg_ent_viewport_get_ucs_origin = *LibreDWGc::dwg_ent_viewport_get_ucs_origin;
*dwg_ent_viewport_set_ucs_x_axis = *LibreDWGc::dwg_ent_viewport_set_ucs_x_axis;
*dwg_ent_viewport_get_ucs_x_axis = *LibreDWGc::dwg_ent_viewport_get_ucs_x_axis;
*dwg_ent_viewport_set_ucs_y_axis = *LibreDWGc::dwg_ent_viewport_set_ucs_y_axis;
*dwg_ent_viewport_get_ucs_y_axis = *LibreDWGc::dwg_ent_viewport_get_ucs_y_axis;
*dwg_ent_viewport_set_ucs_elevation = *LibreDWGc::dwg_ent_viewport_set_ucs_elevation;
*dwg_ent_viewport_get_ucs_elevation = *LibreDWGc::dwg_ent_viewport_get_ucs_elevation;
*dwg_ent_viewport_set_ucs_ortho_view_type = *LibreDWGc::dwg_ent_viewport_set_ucs_ortho_view_type;
*dwg_ent_viewport_get_ucs_ortho_view_type = *LibreDWGc::dwg_ent_viewport_get_ucs_ortho_view_type;
*dwg_ent_viewport_set_shadeplot_mode = *LibreDWGc::dwg_ent_viewport_set_shadeplot_mode;
*dwg_ent_viewport_get_shadeplot_mode = *LibreDWGc::dwg_ent_viewport_get_shadeplot_mode;
*dwg_ent_viewport_set_use_default_lights = *LibreDWGc::dwg_ent_viewport_set_use_default_lights;
*dwg_ent_viewport_get_use_default_lights = *LibreDWGc::dwg_ent_viewport_get_use_default_lights;
*dwg_ent_viewport_set_default_lighting_type = *LibreDWGc::dwg_ent_viewport_set_default_lighting_type;
*dwg_ent_viewport_get_default_lighting_type = *LibreDWGc::dwg_ent_viewport_get_default_lighting_type;
*dwg_ent_viewport_set_brightness = *LibreDWGc::dwg_ent_viewport_set_brightness;
*dwg_ent_viewport_get_brightness = *LibreDWGc::dwg_ent_viewport_get_brightness;
*dwg_ent_viewport_set_contrast = *LibreDWGc::dwg_ent_viewport_set_contrast;
*dwg_ent_viewport_get_contrast = *LibreDWGc::dwg_ent_viewport_get_contrast;
*dwg_ent_polyline_pface_get_numpoints = *LibreDWGc::dwg_ent_polyline_pface_get_numpoints;
*dwg_ent_polyline_pface_get_numfaces = *LibreDWGc::dwg_ent_polyline_pface_get_numfaces;
*dwg_obj_polyline_pface_get_points = *LibreDWGc::dwg_obj_polyline_pface_get_points;
*dwg_ent_polyline_mesh_get_flag = *LibreDWGc::dwg_ent_polyline_mesh_get_flag;
*dwg_ent_polyline_mesh_set_flag = *LibreDWGc::dwg_ent_polyline_mesh_set_flag;
*dwg_ent_polyline_mesh_get_curve_type = *LibreDWGc::dwg_ent_polyline_mesh_get_curve_type;
*dwg_ent_polyline_mesh_set_curve_type = *LibreDWGc::dwg_ent_polyline_mesh_set_curve_type;
*dwg_ent_polyline_mesh_get_num_m_verts = *LibreDWGc::dwg_ent_polyline_mesh_get_num_m_verts;
*dwg_ent_polyline_mesh_get_num_n_verts = *LibreDWGc::dwg_ent_polyline_mesh_get_num_n_verts;
*dwg_ent_polyline_mesh_get_m_density = *LibreDWGc::dwg_ent_polyline_mesh_get_m_density;
*dwg_ent_polyline_mesh_set_m_density = *LibreDWGc::dwg_ent_polyline_mesh_set_m_density;
*dwg_ent_polyline_mesh_get_n_density = *LibreDWGc::dwg_ent_polyline_mesh_get_n_density;
*dwg_ent_polyline_mesh_set_n_density = *LibreDWGc::dwg_ent_polyline_mesh_set_n_density;
*dwg_ent_polyline_mesh_get_num_owned = *LibreDWGc::dwg_ent_polyline_mesh_get_num_owned;
*dwg_ent_polyline_2d_get_extrusion = *LibreDWGc::dwg_ent_polyline_2d_get_extrusion;
*dwg_ent_polyline_2d_set_extrusion = *LibreDWGc::dwg_ent_polyline_2d_set_extrusion;
*dwg_ent_polyline_2d_get_start_width = *LibreDWGc::dwg_ent_polyline_2d_get_start_width;
*dwg_ent_polyline_2d_set_start_width = *LibreDWGc::dwg_ent_polyline_2d_set_start_width;
*dwg_ent_polyline_2d_get_end_width = *LibreDWGc::dwg_ent_polyline_2d_get_end_width;
*dwg_ent_polyline_2d_set_end_width = *LibreDWGc::dwg_ent_polyline_2d_set_end_width;
*dwg_ent_polyline_2d_get_thickness = *LibreDWGc::dwg_ent_polyline_2d_get_thickness;
*dwg_ent_polyline_2d_set_thickness = *LibreDWGc::dwg_ent_polyline_2d_set_thickness;
*dwg_ent_polyline_2d_get_elevation = *LibreDWGc::dwg_ent_polyline_2d_get_elevation;
*dwg_ent_polyline_2d_set_elevation = *LibreDWGc::dwg_ent_polyline_2d_set_elevation;
*dwg_ent_polyline_2d_get_flag = *LibreDWGc::dwg_ent_polyline_2d_get_flag;
*dwg_ent_polyline_2d_set_flag = *LibreDWGc::dwg_ent_polyline_2d_set_flag;
*dwg_ent_polyline_2d_get_curve_type = *LibreDWGc::dwg_ent_polyline_2d_get_curve_type;
*dwg_ent_polyline_2d_set_curve_type = *LibreDWGc::dwg_ent_polyline_2d_set_curve_type;
*dwg_obj_polyline_2d_get_numpoints = *LibreDWGc::dwg_obj_polyline_2d_get_numpoints;
*dwg_obj_polyline_2d_get_points = *LibreDWGc::dwg_obj_polyline_2d_get_points;
*dwg_ent_polyline_3d_get_flag = *LibreDWGc::dwg_ent_polyline_3d_get_flag;
*dwg_ent_polyline_3d_set_flag = *LibreDWGc::dwg_ent_polyline_3d_set_flag;
*dwg_ent_polyline_3d_get_flag2 = *LibreDWGc::dwg_ent_polyline_3d_get_flag2;
*dwg_ent_polyline_3d_set_flag2 = *LibreDWGc::dwg_ent_polyline_3d_set_flag2;
*dwg_obj_polyline_3d_get_numpoints = *LibreDWGc::dwg_obj_polyline_3d_get_numpoints;
*dwg_obj_polyline_3d_get_points = *LibreDWGc::dwg_obj_polyline_3d_get_points;
*dwg_ent_3dface_get_invis_flags = *LibreDWGc::dwg_ent_3dface_get_invis_flags;
*dwg_ent_3dface_set_invis_flags = *LibreDWGc::dwg_ent_3dface_set_invis_flags;
*dwg_ent_3dface_get_corner1 = *LibreDWGc::dwg_ent_3dface_get_corner1;
*dwg_ent_3dface_set_corner1 = *LibreDWGc::dwg_ent_3dface_set_corner1;
*dwg_ent_3dface_get_corner2 = *LibreDWGc::dwg_ent_3dface_get_corner2;
*dwg_ent_3dface_set_corner2 = *LibreDWGc::dwg_ent_3dface_set_corner2;
*dwg_ent_3dface_get_corner3 = *LibreDWGc::dwg_ent_3dface_get_corner3;
*dwg_ent_3dface_set_corner3 = *LibreDWGc::dwg_ent_3dface_set_corner3;
*dwg_ent_3dface_get_corner4 = *LibreDWGc::dwg_ent_3dface_get_corner4;
*dwg_ent_3dface_set_corner4 = *LibreDWGc::dwg_ent_3dface_set_corner4;
*dwg_ent_image_get_class_version = *LibreDWGc::dwg_ent_image_get_class_version;
*dwg_ent_image_set_class_version = *LibreDWGc::dwg_ent_image_set_class_version;
*dwg_ent_image_get_pt0 = *LibreDWGc::dwg_ent_image_get_pt0;
*dwg_ent_image_set_pt0 = *LibreDWGc::dwg_ent_image_set_pt0;
*dwg_ent_image_get_u_vector = *LibreDWGc::dwg_ent_image_get_u_vector;
*dwg_ent_image_set_u_vector = *LibreDWGc::dwg_ent_image_set_u_vector;
*dwg_ent_image_get_v_vector = *LibreDWGc::dwg_ent_image_get_v_vector;
*dwg_ent_image_set_v_vector = *LibreDWGc::dwg_ent_image_set_v_vector;
*dwg_ent_image_get_size_height = *LibreDWGc::dwg_ent_image_get_size_height;
*dwg_ent_image_set_size_height = *LibreDWGc::dwg_ent_image_set_size_height;
*dwg_ent_image_get_size_width = *LibreDWGc::dwg_ent_image_get_size_width;
*dwg_ent_image_set_size_width = *LibreDWGc::dwg_ent_image_set_size_width;
*dwg_ent_image_get_display_props = *LibreDWGc::dwg_ent_image_get_display_props;
*dwg_ent_image_set_display_props = *LibreDWGc::dwg_ent_image_set_display_props;
*dwg_ent_image_get_clipping = *LibreDWGc::dwg_ent_image_get_clipping;
*dwg_ent_image_set_clipping = *LibreDWGc::dwg_ent_image_set_clipping;
*dwg_ent_image_get_brightness = *LibreDWGc::dwg_ent_image_get_brightness;
*dwg_ent_image_set_brightness = *LibreDWGc::dwg_ent_image_set_brightness;
*dwg_ent_image_get_contrast = *LibreDWGc::dwg_ent_image_get_contrast;
*dwg_ent_image_set_contrast = *LibreDWGc::dwg_ent_image_set_contrast;
*dwg_ent_image_get_fade = *LibreDWGc::dwg_ent_image_get_fade;
*dwg_ent_image_set_fade = *LibreDWGc::dwg_ent_image_set_fade;
*dwg_ent_image_get_clip_boundary_type = *LibreDWGc::dwg_ent_image_get_clip_boundary_type;
*dwg_ent_image_set_clip_boundary_type = *LibreDWGc::dwg_ent_image_set_clip_boundary_type;
*dwg_ent_image_get_boundary_pt0 = *LibreDWGc::dwg_ent_image_get_boundary_pt0;
*dwg_ent_image_set_boundary_pt0 = *LibreDWGc::dwg_ent_image_set_boundary_pt0;
*dwg_ent_image_get_boundary_pt1 = *LibreDWGc::dwg_ent_image_get_boundary_pt1;
*dwg_ent_image_set_boundary_pt1 = *LibreDWGc::dwg_ent_image_set_boundary_pt1;
*dwg_ent_image_get_num_clip_verts = *LibreDWGc::dwg_ent_image_get_num_clip_verts;
*dwg_ent_image_get_clip_verts = *LibreDWGc::dwg_ent_image_get_clip_verts;
*dwg_ent_mline_set_scale = *LibreDWGc::dwg_ent_mline_set_scale;
*dwg_ent_mline_get_scale = *LibreDWGc::dwg_ent_mline_get_scale;
*dwg_ent_mline_set_justification = *LibreDWGc::dwg_ent_mline_set_justification;
*dwg_ent_mline_get_justification = *LibreDWGc::dwg_ent_mline_get_justification;
*dwg_ent_mline_set_base_point = *LibreDWGc::dwg_ent_mline_set_base_point;
*dwg_ent_mline_get_base_point = *LibreDWGc::dwg_ent_mline_get_base_point;
*dwg_ent_mline_set_extrusion = *LibreDWGc::dwg_ent_mline_set_extrusion;
*dwg_ent_mline_get_extrusion = *LibreDWGc::dwg_ent_mline_get_extrusion;
*dwg_ent_mline_set_flags = *LibreDWGc::dwg_ent_mline_set_flags;
*dwg_ent_mline_get_flags = *LibreDWGc::dwg_ent_mline_get_flags;
*dwg_ent_mline_get_num_lines = *LibreDWGc::dwg_ent_mline_get_num_lines;
*dwg_ent_mline_get_num_verts = *LibreDWGc::dwg_ent_mline_get_num_verts;
*dwg_ent_mline_get_verts = *LibreDWGc::dwg_ent_mline_get_verts;
*dwg_ent_mline_get_lines = *LibreDWGc::dwg_ent_mline_get_lines;
*dwg_ent_3dsolid_get_acis_empty = *LibreDWGc::dwg_ent_3dsolid_get_acis_empty;
*dwg_ent_3dsolid_set_acis_empty = *LibreDWGc::dwg_ent_3dsolid_set_acis_empty;
*dwg_ent_3dsolid_get_version = *LibreDWGc::dwg_ent_3dsolid_get_version;
*dwg_ent_3dsolid_get_acis_data = *LibreDWGc::dwg_ent_3dsolid_get_acis_data;
*dwg_ent_3dsolid_set_acis_data = *LibreDWGc::dwg_ent_3dsolid_set_acis_data;
*dwg_ent_3dsolid_get_wireframe_data_present = *LibreDWGc::dwg_ent_3dsolid_get_wireframe_data_present;
*dwg_ent_3dsolid_set_wireframe_data_present = *LibreDWGc::dwg_ent_3dsolid_set_wireframe_data_present;
*dwg_ent_3dsolid_get_point_present = *LibreDWGc::dwg_ent_3dsolid_get_point_present;
*dwg_ent_3dsolid_set_point_present = *LibreDWGc::dwg_ent_3dsolid_set_point_present;
*dwg_ent_3dsolid_get_point = *LibreDWGc::dwg_ent_3dsolid_get_point;
*dwg_ent_3dsolid_set_point = *LibreDWGc::dwg_ent_3dsolid_set_point;
*dwg_ent_3dsolid_get_num_isolines = *LibreDWGc::dwg_ent_3dsolid_get_num_isolines;
*dwg_ent_3dsolid_set_num_isolines = *LibreDWGc::dwg_ent_3dsolid_set_num_isolines;
*dwg_ent_3dsolid_get_isoline_present = *LibreDWGc::dwg_ent_3dsolid_get_isoline_present;
*dwg_ent_3dsolid_set_isoline_present = *LibreDWGc::dwg_ent_3dsolid_set_isoline_present;
*dwg_ent_3dsolid_get_num_wires = *LibreDWGc::dwg_ent_3dsolid_get_num_wires;
*dwg_ent_3dsolid_get_wires = *LibreDWGc::dwg_ent_3dsolid_get_wires;
*dwg_ent_3dsolid_get_num_silhouettes = *LibreDWGc::dwg_ent_3dsolid_get_num_silhouettes;
*dwg_ent_3dsolid_get_silhouettes = *LibreDWGc::dwg_ent_3dsolid_get_silhouettes;
*dwg_ent_3dsolid_get_acis_empty2 = *LibreDWGc::dwg_ent_3dsolid_get_acis_empty2;
*dwg_ent_3dsolid_set_acis_empty2 = *LibreDWGc::dwg_ent_3dsolid_set_acis_empty2;
*dwg_ent_region_get_acis_empty = *LibreDWGc::dwg_ent_region_get_acis_empty;
*dwg_ent_region_set_acis_empty = *LibreDWGc::dwg_ent_region_set_acis_empty;
*dwg_ent_region_get_version = *LibreDWGc::dwg_ent_region_get_version;
*dwg_ent_region_get_acis_data = *LibreDWGc::dwg_ent_region_get_acis_data;
*dwg_ent_region_set_acis_data = *LibreDWGc::dwg_ent_region_set_acis_data;
*dwg_ent_region_get_wireframe_data_present = *LibreDWGc::dwg_ent_region_get_wireframe_data_present;
*dwg_ent_region_set_wireframe_data_present = *LibreDWGc::dwg_ent_region_set_wireframe_data_present;
*dwg_ent_region_get_point_present = *LibreDWGc::dwg_ent_region_get_point_present;
*dwg_ent_region_set_point_present = *LibreDWGc::dwg_ent_region_set_point_present;
*dwg_ent_region_get_point = *LibreDWGc::dwg_ent_region_get_point;
*dwg_ent_region_set_point = *LibreDWGc::dwg_ent_region_set_point;
*dwg_ent_region_get_num_isolines = *LibreDWGc::dwg_ent_region_get_num_isolines;
*dwg_ent_region_set_num_isolines = *LibreDWGc::dwg_ent_region_set_num_isolines;
*dwg_ent_region_get_isoline_present = *LibreDWGc::dwg_ent_region_get_isoline_present;
*dwg_ent_region_set_isoline_present = *LibreDWGc::dwg_ent_region_set_isoline_present;
*dwg_ent_region_get_num_wires = *LibreDWGc::dwg_ent_region_get_num_wires;
*dwg_ent_region_get_wires = *LibreDWGc::dwg_ent_region_get_wires;
*dwg_ent_region_get_num_silhouettes = *LibreDWGc::dwg_ent_region_get_num_silhouettes;
*dwg_ent_region_get_silhouettes = *LibreDWGc::dwg_ent_region_get_silhouettes;
*dwg_ent_region_get_acis_empty2 = *LibreDWGc::dwg_ent_region_get_acis_empty2;
*dwg_ent_region_set_acis_empty2 = *LibreDWGc::dwg_ent_region_set_acis_empty2;
*dwg_ent_body_get_acis_empty = *LibreDWGc::dwg_ent_body_get_acis_empty;
*dwg_ent_body_set_acis_empty = *LibreDWGc::dwg_ent_body_set_acis_empty;
*dwg_ent_body_get_version = *LibreDWGc::dwg_ent_body_get_version;
*dwg_ent_body_get_acis_data = *LibreDWGc::dwg_ent_body_get_acis_data;
*dwg_ent_body_set_acis_data = *LibreDWGc::dwg_ent_body_set_acis_data;
*dwg_ent_body_get_wireframe_data_present = *LibreDWGc::dwg_ent_body_get_wireframe_data_present;
*dwg_ent_body_set_wireframe_data_present = *LibreDWGc::dwg_ent_body_set_wireframe_data_present;
*dwg_ent_body_get_point_present = *LibreDWGc::dwg_ent_body_get_point_present;
*dwg_ent_body_set_point_present = *LibreDWGc::dwg_ent_body_set_point_present;
*dwg_ent_body_get_point = *LibreDWGc::dwg_ent_body_get_point;
*dwg_ent_body_set_point = *LibreDWGc::dwg_ent_body_set_point;
*dwg_ent_body_get_num_isolines = *LibreDWGc::dwg_ent_body_get_num_isolines;
*dwg_ent_body_set_num_isolines = *LibreDWGc::dwg_ent_body_set_num_isolines;
*dwg_ent_body_get_isoline_present = *LibreDWGc::dwg_ent_body_get_isoline_present;
*dwg_ent_body_set_isoline_present = *LibreDWGc::dwg_ent_body_set_isoline_present;
*dwg_ent_body_get_num_wires = *LibreDWGc::dwg_ent_body_get_num_wires;
*dwg_ent_body_get_wires = *LibreDWGc::dwg_ent_body_get_wires;
*dwg_ent_body_get_num_silhouettes = *LibreDWGc::dwg_ent_body_get_num_silhouettes;
*dwg_ent_body_get_silhouettes = *LibreDWGc::dwg_ent_body_get_silhouettes;
*dwg_ent_body_get_acis_empty2 = *LibreDWGc::dwg_ent_body_get_acis_empty2;
*dwg_ent_body_set_acis_empty2 = *LibreDWGc::dwg_ent_body_set_acis_empty2;
*dwg_ent_table_set_insertion_point = *LibreDWGc::dwg_ent_table_set_insertion_point;
*dwg_ent_table_get_insertion_point = *LibreDWGc::dwg_ent_table_get_insertion_point;
*dwg_ent_table_set_scale = *LibreDWGc::dwg_ent_table_set_scale;
*dwg_ent_table_get_scale = *LibreDWGc::dwg_ent_table_get_scale;
*dwg_ent_table_set_data_flags = *LibreDWGc::dwg_ent_table_set_data_flags;
*dwg_ent_table_get_data_flags = *LibreDWGc::dwg_ent_table_get_data_flags;
*dwg_ent_table_set_rotation = *LibreDWGc::dwg_ent_table_set_rotation;
*dwg_ent_table_get_rotation = *LibreDWGc::dwg_ent_table_get_rotation;
*dwg_ent_table_set_extrusion = *LibreDWGc::dwg_ent_table_set_extrusion;
*dwg_ent_table_get_extrusion = *LibreDWGc::dwg_ent_table_get_extrusion;
*dwg_ent_table_has_attribs = *LibreDWGc::dwg_ent_table_has_attribs;
*dwg_ent_table_get_num_owned = *LibreDWGc::dwg_ent_table_get_num_owned;
*dwg_ent_table_set_flag_for_table_value = *LibreDWGc::dwg_ent_table_set_flag_for_table_value;
*dwg_ent_table_get_flag_for_table_value = *LibreDWGc::dwg_ent_table_get_flag_for_table_value;
*dwg_ent_table_set_horiz_direction = *LibreDWGc::dwg_ent_table_set_horiz_direction;
*dwg_ent_table_get_horiz_direction = *LibreDWGc::dwg_ent_table_get_horiz_direction;
*dwg_ent_table_get_num_cols = *LibreDWGc::dwg_ent_table_get_num_cols;
*dwg_ent_table_get_num_rows = *LibreDWGc::dwg_ent_table_get_num_rows;
*dwg_ent_table_get_col_widths = *LibreDWGc::dwg_ent_table_get_col_widths;
*dwg_ent_table_get_row_heights = *LibreDWGc::dwg_ent_table_get_row_heights;
*dwg_ent_table_has_table_overrides = *LibreDWGc::dwg_ent_table_has_table_overrides;
*dwg_ent_table_set_table_flag_override = *LibreDWGc::dwg_ent_table_set_table_flag_override;
*dwg_ent_table_get_table_flag_override = *LibreDWGc::dwg_ent_table_get_table_flag_override;
*dwg_ent_table_set_title_suppressed = *LibreDWGc::dwg_ent_table_set_title_suppressed;
*dwg_ent_table_get_title_suppressed = *LibreDWGc::dwg_ent_table_get_title_suppressed;
*dwg_ent_table_set_header_suppressed = *LibreDWGc::dwg_ent_table_set_header_suppressed;
*dwg_ent_table_get_header_suppressed = *LibreDWGc::dwg_ent_table_get_header_suppressed;
*dwg_ent_table_set_flow_direction = *LibreDWGc::dwg_ent_table_set_flow_direction;
*dwg_ent_table_get_flow_direction = *LibreDWGc::dwg_ent_table_get_flow_direction;
*dwg_ent_table_set_horiz_cell_margin = *LibreDWGc::dwg_ent_table_set_horiz_cell_margin;
*dwg_ent_table_get_horiz_cell_margin = *LibreDWGc::dwg_ent_table_get_horiz_cell_margin;
*dwg_ent_table_set_vert_cell_margin = *LibreDWGc::dwg_ent_table_set_vert_cell_margin;
*dwg_ent_table_get_vert_cell_margin = *LibreDWGc::dwg_ent_table_get_vert_cell_margin;
*dwg_ent_table_set_title_row_fill_none = *LibreDWGc::dwg_ent_table_set_title_row_fill_none;
*dwg_ent_table_get_title_row_fill_none = *LibreDWGc::dwg_ent_table_get_title_row_fill_none;
*dwg_ent_table_set_header_row_fill_none = *LibreDWGc::dwg_ent_table_set_header_row_fill_none;
*dwg_ent_table_get_header_row_fill_none = *LibreDWGc::dwg_ent_table_get_header_row_fill_none;
*dwg_ent_table_set_data_row_fill_none = *LibreDWGc::dwg_ent_table_set_data_row_fill_none;
*dwg_ent_table_get_data_row_fill_none = *LibreDWGc::dwg_ent_table_get_data_row_fill_none;
*dwg_ent_table_set_title_row_align = *LibreDWGc::dwg_ent_table_set_title_row_align;
*dwg_ent_table_get_title_row_align = *LibreDWGc::dwg_ent_table_get_title_row_align;
*dwg_ent_table_set_header_row_align = *LibreDWGc::dwg_ent_table_set_header_row_align;
*dwg_ent_table_get_header_row_align = *LibreDWGc::dwg_ent_table_get_header_row_align;
*dwg_ent_table_set_data_row_align = *LibreDWGc::dwg_ent_table_set_data_row_align;
*dwg_ent_table_get_data_row_align = *LibreDWGc::dwg_ent_table_get_data_row_align;
*dwg_ent_table_set_title_row_height = *LibreDWGc::dwg_ent_table_set_title_row_height;
*dwg_ent_table_get_title_row_height = *LibreDWGc::dwg_ent_table_get_title_row_height;
*dwg_ent_table_set_header_row_height = *LibreDWGc::dwg_ent_table_set_header_row_height;
*dwg_ent_table_get_header_row_height = *LibreDWGc::dwg_ent_table_get_header_row_height;
*dwg_ent_table_set_data_row_height = *LibreDWGc::dwg_ent_table_set_data_row_height;
*dwg_ent_table_get_data_row_height = *LibreDWGc::dwg_ent_table_get_data_row_height;
*dwg_ent_table_has_border_color_overrides = *LibreDWGc::dwg_ent_table_has_border_color_overrides;
*dwg_ent_table_set_border_color_overrides_flag = *LibreDWGc::dwg_ent_table_set_border_color_overrides_flag;
*dwg_ent_table_get_border_color_overrides_flag = *LibreDWGc::dwg_ent_table_get_border_color_overrides_flag;
*dwg_ent_table_has_border_lineweight_overrides = *LibreDWGc::dwg_ent_table_has_border_lineweight_overrides;
*dwg_ent_table_set_border_lineweight_overrides_flag = *LibreDWGc::dwg_ent_table_set_border_lineweight_overrides_flag;
*dwg_ent_table_get_border_lineweight_overrides_flag = *LibreDWGc::dwg_ent_table_get_border_lineweight_overrides_flag;
*dwg_ent_table_set_title_horiz_top_linewt = *LibreDWGc::dwg_ent_table_set_title_horiz_top_linewt;
*dwg_ent_table_get_title_horiz_top_linewt = *LibreDWGc::dwg_ent_table_get_title_horiz_top_linewt;
*dwg_ent_table_set_title_horiz_ins_linewt = *LibreDWGc::dwg_ent_table_set_title_horiz_ins_linewt;
*dwg_ent_table_get_title_horiz_ins_linewt = *LibreDWGc::dwg_ent_table_get_title_horiz_ins_linewt;
*dwg_ent_table_set_title_horiz_bottom_linewt = *LibreDWGc::dwg_ent_table_set_title_horiz_bottom_linewt;
*dwg_ent_table_get_title_horiz_bottom_linewt = *LibreDWGc::dwg_ent_table_get_title_horiz_bottom_linewt;
*dwg_ent_table_set_title_vert_left_linewt = *LibreDWGc::dwg_ent_table_set_title_vert_left_linewt;
*dwg_ent_table_get_title_vert_left_linewt = *LibreDWGc::dwg_ent_table_get_title_vert_left_linewt;
*dwg_ent_table_set_title_vert_ins_linewt = *LibreDWGc::dwg_ent_table_set_title_vert_ins_linewt;
*dwg_ent_table_get_title_vert_ins_linewt = *LibreDWGc::dwg_ent_table_get_title_vert_ins_linewt;
*dwg_ent_table_set_title_vert_right_linewt = *LibreDWGc::dwg_ent_table_set_title_vert_right_linewt;
*dwg_ent_table_get_title_vert_right_linewt = *LibreDWGc::dwg_ent_table_get_title_vert_right_linewt;
*dwg_ent_table_set_header_horiz_top_linewt = *LibreDWGc::dwg_ent_table_set_header_horiz_top_linewt;
*dwg_ent_table_get_header_horiz_top_linewt = *LibreDWGc::dwg_ent_table_get_header_horiz_top_linewt;
*dwg_ent_table_set_header_horiz_ins_linewt = *LibreDWGc::dwg_ent_table_set_header_horiz_ins_linewt;
*dwg_ent_table_get_header_horiz_ins_linewt = *LibreDWGc::dwg_ent_table_get_header_horiz_ins_linewt;
*dwg_ent_table_set_header_horiz_bottom_linewt = *LibreDWGc::dwg_ent_table_set_header_horiz_bottom_linewt;
*dwg_ent_table_get_header_horiz_bottom_linewt = *LibreDWGc::dwg_ent_table_get_header_horiz_bottom_linewt;
*dwg_ent_table_set_header_vert_left_linewt = *LibreDWGc::dwg_ent_table_set_header_vert_left_linewt;
*dwg_ent_table_get_header_vert_left_linewt = *LibreDWGc::dwg_ent_table_get_header_vert_left_linewt;
*dwg_ent_table_set_header_vert_ins_linewt = *LibreDWGc::dwg_ent_table_set_header_vert_ins_linewt;
*dwg_ent_table_get_header_vert_ins_linewt = *LibreDWGc::dwg_ent_table_get_header_vert_ins_linewt;
*dwg_ent_table_set_header_vert_right_linewt = *LibreDWGc::dwg_ent_table_set_header_vert_right_linewt;
*dwg_ent_table_get_header_vert_right_linewt = *LibreDWGc::dwg_ent_table_get_header_vert_right_linewt;
*dwg_ent_table_set_data_horiz_top_linewt = *LibreDWGc::dwg_ent_table_set_data_horiz_top_linewt;
*dwg_ent_table_get_data_horiz_top_linewt = *LibreDWGc::dwg_ent_table_get_data_horiz_top_linewt;
*dwg_ent_table_set_data_horiz_ins_linewt = *LibreDWGc::dwg_ent_table_set_data_horiz_ins_linewt;
*dwg_ent_table_get_data_horiz_ins_linewt = *LibreDWGc::dwg_ent_table_get_data_horiz_ins_linewt;
*dwg_ent_table_set_data_horiz_bottom_linewt = *LibreDWGc::dwg_ent_table_set_data_horiz_bottom_linewt;
*dwg_ent_table_get_data_horiz_bottom_linewt = *LibreDWGc::dwg_ent_table_get_data_horiz_bottom_linewt;
*dwg_ent_table_set_data_vert_left_linewt = *LibreDWGc::dwg_ent_table_set_data_vert_left_linewt;
*dwg_ent_table_get_data_vert_left_linewt = *LibreDWGc::dwg_ent_table_get_data_vert_left_linewt;
*dwg_ent_table_set_data_vert_ins_linewt = *LibreDWGc::dwg_ent_table_set_data_vert_ins_linewt;
*dwg_ent_table_get_data_vert_ins_linewt = *LibreDWGc::dwg_ent_table_get_data_vert_ins_linewt;
*dwg_ent_table_set_data_vert_right_linewt = *LibreDWGc::dwg_ent_table_set_data_vert_right_linewt;
*dwg_ent_table_get_data_vert_right_linewt = *LibreDWGc::dwg_ent_table_get_data_vert_right_linewt;
*dwg_ent_table_has_border_visibility_overrides = *LibreDWGc::dwg_ent_table_has_border_visibility_overrides;
*dwg_ent_table_set_border_visibility_overrides_flag = *LibreDWGc::dwg_ent_table_set_border_visibility_overrides_flag;
*dwg_ent_table_get_border_visibility_overrides_flag = *LibreDWGc::dwg_ent_table_get_border_visibility_overrides_flag;
*dwg_ent_table_set_title_horiz_top_visibility = *LibreDWGc::dwg_ent_table_set_title_horiz_top_visibility;
*dwg_ent_table_get_title_horiz_top_visibility = *LibreDWGc::dwg_ent_table_get_title_horiz_top_visibility;
*dwg_ent_table_set_title_horiz_ins_visibility = *LibreDWGc::dwg_ent_table_set_title_horiz_ins_visibility;
*dwg_ent_table_get_title_horiz_ins_visibility = *LibreDWGc::dwg_ent_table_get_title_horiz_ins_visibility;
*dwg_ent_table_set_title_horiz_bottom_visibility = *LibreDWGc::dwg_ent_table_set_title_horiz_bottom_visibility;
*dwg_ent_table_get_title_horiz_bottom_visibility = *LibreDWGc::dwg_ent_table_get_title_horiz_bottom_visibility;
*dwg_ent_table_set_title_vert_left_visibility = *LibreDWGc::dwg_ent_table_set_title_vert_left_visibility;
*dwg_ent_table_get_title_vert_left_visibility = *LibreDWGc::dwg_ent_table_get_title_vert_left_visibility;
*dwg_ent_table_set_title_vert_ins_visibility = *LibreDWGc::dwg_ent_table_set_title_vert_ins_visibility;
*dwg_ent_table_get_title_vert_ins_visibility = *LibreDWGc::dwg_ent_table_get_title_vert_ins_visibility;
*dwg_ent_table_set_title_vert_right_visibility = *LibreDWGc::dwg_ent_table_set_title_vert_right_visibility;
*dwg_ent_table_get_title_vert_right_visibility = *LibreDWGc::dwg_ent_table_get_title_vert_right_visibility;
*dwg_ent_table_set_header_horiz_top_visibility = *LibreDWGc::dwg_ent_table_set_header_horiz_top_visibility;
*dwg_ent_table_get_header_horiz_top_visibility = *LibreDWGc::dwg_ent_table_get_header_horiz_top_visibility;
*dwg_ent_table_set_header_vert_left_visibility = *LibreDWGc::dwg_ent_table_set_header_vert_left_visibility;
*dwg_ent_table_get_header_vert_left_visibility = *LibreDWGc::dwg_ent_table_get_header_vert_left_visibility;
*dwg_ent_table_set_header_horiz_ins_visibility = *LibreDWGc::dwg_ent_table_set_header_horiz_ins_visibility;
*dwg_ent_table_get_header_horiz_ins_visibility = *LibreDWGc::dwg_ent_table_get_header_horiz_ins_visibility;
*dwg_ent_table_set_header_horiz_bottom_visibility = *LibreDWGc::dwg_ent_table_set_header_horiz_bottom_visibility;
*dwg_ent_table_get_header_horiz_bottom_visibility = *LibreDWGc::dwg_ent_table_get_header_horiz_bottom_visibility;
*dwg_ent_table_set_header_vert_ins_visibility = *LibreDWGc::dwg_ent_table_set_header_vert_ins_visibility;
*dwg_ent_table_get_header_vert_ins_visibility = *LibreDWGc::dwg_ent_table_get_header_vert_ins_visibility;
*dwg_ent_table_set_header_vert_right_visibility = *LibreDWGc::dwg_ent_table_set_header_vert_right_visibility;
*dwg_ent_table_get_header_vert_right_visibility = *LibreDWGc::dwg_ent_table_get_header_vert_right_visibility;
*dwg_ent_table_set_data_horiz_top_visibility = *LibreDWGc::dwg_ent_table_set_data_horiz_top_visibility;
*dwg_ent_table_get_data_horiz_top_visibility = *LibreDWGc::dwg_ent_table_get_data_horiz_top_visibility;
*dwg_ent_table_set_data_horiz_ins_visibility = *LibreDWGc::dwg_ent_table_set_data_horiz_ins_visibility;
*dwg_ent_table_get_data_horiz_ins_visibility = *LibreDWGc::dwg_ent_table_get_data_horiz_ins_visibility;
*dwg_ent_table_set_data_horiz_bottom_visibility = *LibreDWGc::dwg_ent_table_set_data_horiz_bottom_visibility;
*dwg_ent_table_get_data_horiz_bottom_visibility = *LibreDWGc::dwg_ent_table_get_data_horiz_bottom_visibility;
*dwg_ent_table_set_data_vert_left_visibility = *LibreDWGc::dwg_ent_table_set_data_vert_left_visibility;
*dwg_ent_table_get_data_vert_left_visibility = *LibreDWGc::dwg_ent_table_get_data_vert_left_visibility;
*dwg_ent_table_set_data_vert_ins_visibility = *LibreDWGc::dwg_ent_table_set_data_vert_ins_visibility;
*dwg_ent_table_get_data_vert_ins_visibility = *LibreDWGc::dwg_ent_table_get_data_vert_ins_visibility;
*dwg_ent_table_set_data_vert_right_visibility = *LibreDWGc::dwg_ent_table_set_data_vert_right_visibility;
*dwg_ent_table_get_data_vert_right_visibility = *LibreDWGc::dwg_ent_table_get_data_vert_right_visibility;
*dwg_ent_vertex_pface_face_get_vertind = *LibreDWGc::dwg_ent_vertex_pface_face_get_vertind;
*dwg_ent_vertex_pface_face_set_vertind = *LibreDWGc::dwg_ent_vertex_pface_face_set_vertind;
*dwg_obj_block_header_get_name = *LibreDWGc::dwg_obj_block_header_get_name;
*dwg_get_block_header = *LibreDWGc::dwg_get_block_header;
*dwg_obj_block_control_get_num_entries = *LibreDWGc::dwg_obj_block_control_get_num_entries;
*dwg_obj_block_control_get_block_headers = *LibreDWGc::dwg_obj_block_control_get_block_headers;
*dwg_block_header_get_block_control = *LibreDWGc::dwg_block_header_get_block_control;
*dwg_obj_block_control_get_model_space = *LibreDWGc::dwg_obj_block_control_get_model_space;
*dwg_obj_block_control_get_paper_space = *LibreDWGc::dwg_obj_block_control_get_paper_space;
*dwg_obj_layer_get_name = *LibreDWGc::dwg_obj_layer_get_name;
*dwg_obj_table_get_name = *LibreDWGc::dwg_obj_table_get_name;
*dwg_ref_get_table_name = *LibreDWGc::dwg_ref_get_table_name;
*dwg_obj_tablectrl_get_num_entries = *LibreDWGc::dwg_obj_tablectrl_get_num_entries;
*dwg_obj_tablectrl_get_entry = *LibreDWGc::dwg_obj_tablectrl_get_entry;
*dwg_obj_tablectrl_get_entries = *LibreDWGc::dwg_obj_tablectrl_get_entries;
*dwg_obj_tablectrl_get_null_handle = *LibreDWGc::dwg_obj_tablectrl_get_null_handle;
*dwg_obj_tablectrl_get_xdicobjhandle = *LibreDWGc::dwg_obj_tablectrl_get_xdicobjhandle;
*dwg_obj_tablectrl_get_objid = *LibreDWGc::dwg_obj_tablectrl_get_objid;
*dwg_obj_xrecord_get_num_databytes = *LibreDWGc::dwg_obj_xrecord_get_num_databytes;
*dwg_obj_xrecord_get_cloning_flags = *LibreDWGc::dwg_obj_xrecord_get_cloning_flags;
*dwg_obj_xrecord_set_cloning_flags = *LibreDWGc::dwg_obj_xrecord_set_cloning_flags;
*dwg_obj_xrecord_get_num_eed = *LibreDWGc::dwg_obj_xrecord_get_num_eed;
*dwg_obj_xrecord_get_xdata = *LibreDWGc::dwg_obj_xrecord_get_xdata;
*dwg_obj_xrecord_set_xdata = *LibreDWGc::dwg_obj_xrecord_set_xdata;
*dwg_obj_xrecord_get_parenthandle = *LibreDWGc::dwg_obj_xrecord_get_parenthandle;
*dwg_obj_xrecord_get_reactors = *LibreDWGc::dwg_obj_xrecord_get_reactors;
*dwg_obj_xrecord_get_num_objid_handles = *LibreDWGc::dwg_obj_xrecord_get_num_objid_handles;
*dwg_obj_xrecord_get_objid_handles = *LibreDWGc::dwg_obj_xrecord_get_objid_handles;
*dwg_ent_to_object = *LibreDWGc::dwg_ent_to_object;
*dwg_ent_generic_to_object = *LibreDWGc::dwg_ent_generic_to_object;
*dwg_ent_generic_parent = *LibreDWGc::dwg_ent_generic_parent;
*dwg_ent_get_bitsize = *LibreDWGc::dwg_ent_get_bitsize;
*dwg_ent_get_num_eed = *LibreDWGc::dwg_ent_get_num_eed;
*dwg_ent_get_eed = *LibreDWGc::dwg_ent_get_eed;
*dwg_ent_get_eed_data = *LibreDWGc::dwg_ent_get_eed_data;
*dwg_ent_get_picture_exists = *LibreDWGc::dwg_ent_get_picture_exists;
*dwg_ent_get_picture_size = *LibreDWGc::dwg_ent_get_picture_size;
*dwg_ent_get_picture = *LibreDWGc::dwg_ent_get_picture;
*dwg_ent_get_entity_mode = *LibreDWGc::dwg_ent_get_entity_mode;
*dwg_ent_get_num_reactors = *LibreDWGc::dwg_ent_get_num_reactors;
*dwg_ent_get_xdic_missing_flag = *LibreDWGc::dwg_ent_get_xdic_missing_flag;
*dwg_ent_get_layer_name = *LibreDWGc::dwg_ent_get_layer_name;
*dwg_ent_get_isbylayerlt = *LibreDWGc::dwg_ent_get_isbylayerlt;
*dwg_ent_get_nolinks = *LibreDWGc::dwg_ent_get_nolinks;
*dwg_ent_get_color = *LibreDWGc::dwg_ent_get_color;
*dwg_ent_get_linetype_scale = *LibreDWGc::dwg_ent_get_linetype_scale;
*dwg_ent_get_linetype_flag = *LibreDWGc::dwg_ent_get_linetype_flag;
*dwg_ent_get_plotstyle_flag = *LibreDWGc::dwg_ent_get_plotstyle_flag;
*dwg_ent_get_material_flag = *LibreDWGc::dwg_ent_get_material_flag;
*dwg_ent_get_shadow_flag = *LibreDWGc::dwg_ent_get_shadow_flag;
*dwg_ent_has_full_visualstyle = *LibreDWGc::dwg_ent_has_full_visualstyle;
*dwg_ent_has_face_visualstyle = *LibreDWGc::dwg_ent_has_face_visualstyle;
*dwg_ent_has_edge_visualstyle = *LibreDWGc::dwg_ent_has_edge_visualstyle;
*dwg_ent_get_invisible = *LibreDWGc::dwg_ent_get_invisible;
*dwg_ent_get_lineweight = *LibreDWGc::dwg_ent_get_lineweight;
*dwg_ent_get_subentity = *LibreDWGc::dwg_ent_get_subentity;
*dwg_ent_get_reactors = *LibreDWGc::dwg_ent_get_reactors;
*dwg_ent_get_xdicobjhandle = *LibreDWGc::dwg_ent_get_xdicobjhandle;
*dwg_ent_get_prev_entity = *LibreDWGc::dwg_ent_get_prev_entity;
*dwg_ent_get_next_entity = *LibreDWGc::dwg_ent_get_next_entity;
*dwg_ent_get_color_handle = *LibreDWGc::dwg_ent_get_color_handle;
*dwg_ent_get_layer = *LibreDWGc::dwg_ent_get_layer;
*dwg_ent_get_ltype = *LibreDWGc::dwg_ent_get_ltype;
*dwg_ent_get_material = *LibreDWGc::dwg_ent_get_material;
*dwg_ent_get_plotstyle = *LibreDWGc::dwg_ent_get_plotstyle;
*dwg_ent_get_full_visualstyle = *LibreDWGc::dwg_ent_get_full_visualstyle;
*dwg_ent_get_face_visualstyle = *LibreDWGc::dwg_ent_get_face_visualstyle;
*dwg_ent_get_edge_visualstyle = *LibreDWGc::dwg_ent_get_edge_visualstyle;
*dwg_obj_obj_to_object = *LibreDWGc::dwg_obj_obj_to_object;
*dwg_obj_generic_to_object = *LibreDWGc::dwg_obj_generic_to_object;
*dwg_obj_generic_parent = *LibreDWGc::dwg_obj_generic_parent;
*dwg_get_object = *LibreDWGc::dwg_get_object;
*dwg_obj_get_bitsize = *LibreDWGc::dwg_obj_get_bitsize;
*dwg_obj_get_num_eed = *LibreDWGc::dwg_obj_get_num_eed;
*dwg_obj_get_eed = *LibreDWGc::dwg_obj_get_eed;
*dwg_obj_get_eed_data = *LibreDWGc::dwg_obj_get_eed_data;
*dwg_obj_get_picture_exists = *LibreDWGc::dwg_obj_get_picture_exists;
*dwg_obj_get_picture_size = *LibreDWGc::dwg_obj_get_picture_size;
*dwg_obj_get_picture = *LibreDWGc::dwg_obj_get_picture;
*dwg_obj_get_entity_mode = *LibreDWGc::dwg_obj_get_entity_mode;
*dwg_obj_get_num_reactors = *LibreDWGc::dwg_obj_get_num_reactors;
*dwg_obj_get_xdic_missing_flag = *LibreDWGc::dwg_obj_get_xdic_missing_flag;
*dwg_obj_object_get_index = *LibreDWGc::dwg_obj_object_get_index;
*dwg_obj_get_handle = *LibreDWGc::dwg_obj_get_handle;
*dwg_ref_get_absref = *LibreDWGc::dwg_ref_get_absref;
*dwg_obj_ref_get_object = *LibreDWGc::dwg_obj_ref_get_object;
*dwg_absref_get_object = *LibreDWGc::dwg_absref_get_object;
*dwg_object_to_object = *LibreDWGc::dwg_object_to_object;
*dwg_object_to_entity = *LibreDWGc::dwg_object_to_entity;
*dwg_get_type = *LibreDWGc::dwg_get_type;
*dwg_get_dxfname = *LibreDWGc::dwg_get_dxfname;
*dwg_get_num_classes = *LibreDWGc::dwg_get_num_classes;
*dwg_get_class = *LibreDWGc::dwg_get_class;

############# Class : LibreDWG::Dwg_Bitcode_TimeBLL ##############

package LibreDWG::Dwg_Bitcode_TimeBLL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_days_get = *LibreDWGc::Dwg_Bitcode_TimeBLL_days_get;
*swig_days_set = *LibreDWGc::Dwg_Bitcode_TimeBLL_days_set;
*swig_ms_get = *LibreDWGc::Dwg_Bitcode_TimeBLL_ms_get;
*swig_ms_set = *LibreDWGc::Dwg_Bitcode_TimeBLL_ms_set;
*swig_value_get = *LibreDWGc::Dwg_Bitcode_TimeBLL_value_get;
*swig_value_set = *LibreDWGc::Dwg_Bitcode_TimeBLL_value_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Bitcode_TimeBLL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Bitcode_TimeBLL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Bitcode_2RD ##############

package LibreDWG::Dwg_Bitcode_2RD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDWGc::Dwg_Bitcode_2RD_x_get;
*swig_x_set = *LibreDWGc::Dwg_Bitcode_2RD_x_set;
*swig_y_get = *LibreDWGc::Dwg_Bitcode_2RD_y_get;
*swig_y_set = *LibreDWGc::Dwg_Bitcode_2RD_y_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Bitcode_2RD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Bitcode_2RD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Bitcode_2BD ##############

package LibreDWG::Dwg_Bitcode_2BD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDWGc::Dwg_Bitcode_2BD_x_get;
*swig_x_set = *LibreDWGc::Dwg_Bitcode_2BD_x_set;
*swig_y_get = *LibreDWGc::Dwg_Bitcode_2BD_y_get;
*swig_y_set = *LibreDWGc::Dwg_Bitcode_2BD_y_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Bitcode_2BD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Bitcode_2BD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Bitcode_3RD ##############

package LibreDWG::Dwg_Bitcode_3RD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDWGc::Dwg_Bitcode_3RD_x_get;
*swig_x_set = *LibreDWGc::Dwg_Bitcode_3RD_x_set;
*swig_y_get = *LibreDWGc::Dwg_Bitcode_3RD_y_get;
*swig_y_set = *LibreDWGc::Dwg_Bitcode_3RD_y_set;
*swig_z_get = *LibreDWGc::Dwg_Bitcode_3RD_z_get;
*swig_z_set = *LibreDWGc::Dwg_Bitcode_3RD_z_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Bitcode_3RD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Bitcode_3RD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Bitcode_3BD ##############

package LibreDWG::Dwg_Bitcode_3BD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDWGc::Dwg_Bitcode_3BD_x_get;
*swig_x_set = *LibreDWGc::Dwg_Bitcode_3BD_x_set;
*swig_y_get = *LibreDWGc::Dwg_Bitcode_3BD_y_get;
*swig_y_set = *LibreDWGc::Dwg_Bitcode_3BD_y_set;
*swig_z_get = *LibreDWGc::Dwg_Bitcode_3BD_z_get;
*swig_z_set = *LibreDWGc::Dwg_Bitcode_3BD_z_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Bitcode_3BD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Bitcode_3BD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Handle ##############

package LibreDWG::Dwg_Handle;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_code_get = *LibreDWGc::Dwg_Handle_code_get;
*swig_code_set = *LibreDWGc::Dwg_Handle_code_set;
*swig_size_get = *LibreDWGc::Dwg_Handle_size_get;
*swig_size_set = *LibreDWGc::Dwg_Handle_size_set;
*swig_value_get = *LibreDWGc::Dwg_Handle_value_get;
*swig_value_set = *LibreDWGc::Dwg_Handle_value_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Handle(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Handle($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_Ref ##############

package LibreDWG::Dwg_Object_Ref;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_obj_get = *LibreDWGc::Dwg_Object_Ref_obj_get;
*swig_obj_set = *LibreDWGc::Dwg_Object_Ref_obj_set;
*swig_handleref_get = *LibreDWGc::Dwg_Object_Ref_handleref_get;
*swig_handleref_set = *LibreDWGc::Dwg_Object_Ref_handleref_set;
*swig_absolute_ref_get = *LibreDWGc::Dwg_Object_Ref_absolute_ref_get;
*swig_absolute_ref_set = *LibreDWGc::Dwg_Object_Ref_absolute_ref_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_Ref(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_Ref($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Color ##############

package LibreDWG::Dwg_Color;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_index_get = *LibreDWGc::Dwg_Color_index_get;
*swig_index_set = *LibreDWGc::Dwg_Color_index_set;
*swig_rgb_get = *LibreDWGc::Dwg_Color_rgb_get;
*swig_rgb_set = *LibreDWGc::Dwg_Color_rgb_set;
*swig_flag_get = *LibreDWGc::Dwg_Color_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Color_flag_set;
*swig_name_get = *LibreDWGc::Dwg_Color_name_get;
*swig_name_set = *LibreDWGc::Dwg_Color_name_set;
*swig_book_name_get = *LibreDWGc::Dwg_Color_book_name_get;
*swig_book_name_set = *LibreDWGc::Dwg_Color_book_name_set;
*swig_transparency_type_get = *LibreDWGc::Dwg_Color_transparency_type_get;
*swig_transparency_type_set = *LibreDWGc::Dwg_Color_transparency_type_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Color(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Color($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_binary_chunk ##############

package LibreDWG::_dwg_binary_chunk;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDWGc::_dwg_binary_chunk_size_get;
*swig_size_set = *LibreDWGc::_dwg_binary_chunk_size_set;
*swig_codepage_get = *LibreDWGc::_dwg_binary_chunk_codepage_get;
*swig_codepage_set = *LibreDWGc::_dwg_binary_chunk_codepage_set;
*swig_u_get = *LibreDWGc::_dwg_binary_chunk_u_get;
*swig_u_set = *LibreDWGc::_dwg_binary_chunk_u_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_binary_chunk(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_binary_chunk($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_binary_chunk_u ##############

package LibreDWG::_dwg_binary_chunk_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_data_get = *LibreDWGc::_dwg_binary_chunk_u_data_get;
*swig_data_set = *LibreDWGc::_dwg_binary_chunk_u_data_set;
*swig_wdata_get = *LibreDWGc::_dwg_binary_chunk_u_wdata_get;
*swig_wdata_set = *LibreDWGc::_dwg_binary_chunk_u_wdata_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_binary_chunk_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_binary_chunk_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Resbuf ##############

package LibreDWG::Dwg_Resbuf;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *LibreDWGc::Dwg_Resbuf_type_get;
*swig_type_set = *LibreDWGc::Dwg_Resbuf_type_set;
*swig_value_get = *LibreDWGc::Dwg_Resbuf_value_get;
*swig_value_set = *LibreDWGc::Dwg_Resbuf_value_set;
*swig_next_get = *LibreDWGc::Dwg_Resbuf_next_get;
*swig_next_set = *LibreDWGc::Dwg_Resbuf_next_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Resbuf(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Resbuf($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_resbuf_value ##############

package LibreDWG::_dwg_resbuf_value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_pt_get = *LibreDWGc::_dwg_resbuf_value_pt_get;
*swig_pt_set = *LibreDWGc::_dwg_resbuf_value_pt_set;
*swig_i8_get = *LibreDWGc::_dwg_resbuf_value_i8_get;
*swig_i8_set = *LibreDWGc::_dwg_resbuf_value_i8_set;
*swig_i16_get = *LibreDWGc::_dwg_resbuf_value_i16_get;
*swig_i16_set = *LibreDWGc::_dwg_resbuf_value_i16_set;
*swig_i32_get = *LibreDWGc::_dwg_resbuf_value_i32_get;
*swig_i32_set = *LibreDWGc::_dwg_resbuf_value_i32_set;
*swig_dbl_get = *LibreDWGc::_dwg_resbuf_value_dbl_get;
*swig_dbl_set = *LibreDWGc::_dwg_resbuf_value_dbl_set;
*swig_hdl_get = *LibreDWGc::_dwg_resbuf_value_hdl_get;
*swig_hdl_set = *LibreDWGc::_dwg_resbuf_value_hdl_set;
*swig_str_get = *LibreDWGc::_dwg_resbuf_value_str_get;
*swig_str_set = *LibreDWGc::_dwg_resbuf_value_str_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_resbuf_value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_resbuf_value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Header_Variables ##############

package LibreDWG::Dwg_Header_Variables;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDWGc::Dwg_Header_Variables_size_get;
*swig_size_set = *LibreDWGc::Dwg_Header_Variables_size_set;
*swig_bitsize_hi_get = *LibreDWGc::Dwg_Header_Variables_bitsize_hi_get;
*swig_bitsize_hi_set = *LibreDWGc::Dwg_Header_Variables_bitsize_hi_set;
*swig_bitsize_get = *LibreDWGc::Dwg_Header_Variables_bitsize_get;
*swig_bitsize_set = *LibreDWGc::Dwg_Header_Variables_bitsize_set;
*swig_ACADMAINTVER_get = *LibreDWGc::Dwg_Header_Variables_ACADMAINTVER_get;
*swig_ACADMAINTVER_set = *LibreDWGc::Dwg_Header_Variables_ACADMAINTVER_set;
*swig_REQUIREDVERSIONS_get = *LibreDWGc::Dwg_Header_Variables_REQUIREDVERSIONS_get;
*swig_REQUIREDVERSIONS_set = *LibreDWGc::Dwg_Header_Variables_REQUIREDVERSIONS_set;
*swig_DWGCODEPAGE_get = *LibreDWGc::Dwg_Header_Variables_DWGCODEPAGE_get;
*swig_DWGCODEPAGE_set = *LibreDWGc::Dwg_Header_Variables_DWGCODEPAGE_set;
*swig_LASTSAVEDBY_get = *LibreDWGc::Dwg_Header_Variables_LASTSAVEDBY_get;
*swig_LASTSAVEDBY_set = *LibreDWGc::Dwg_Header_Variables_LASTSAVEDBY_set;
*swig_unknown_0_get = *LibreDWGc::Dwg_Header_Variables_unknown_0_get;
*swig_unknown_0_set = *LibreDWGc::Dwg_Header_Variables_unknown_0_set;
*swig_unknown_1_get = *LibreDWGc::Dwg_Header_Variables_unknown_1_get;
*swig_unknown_1_set = *LibreDWGc::Dwg_Header_Variables_unknown_1_set;
*swig_unknown_2_get = *LibreDWGc::Dwg_Header_Variables_unknown_2_get;
*swig_unknown_2_set = *LibreDWGc::Dwg_Header_Variables_unknown_2_set;
*swig_unknown_3_get = *LibreDWGc::Dwg_Header_Variables_unknown_3_get;
*swig_unknown_3_set = *LibreDWGc::Dwg_Header_Variables_unknown_3_set;
*swig_unknown_text1_get = *LibreDWGc::Dwg_Header_Variables_unknown_text1_get;
*swig_unknown_text1_set = *LibreDWGc::Dwg_Header_Variables_unknown_text1_set;
*swig_unknown_text2_get = *LibreDWGc::Dwg_Header_Variables_unknown_text2_get;
*swig_unknown_text2_set = *LibreDWGc::Dwg_Header_Variables_unknown_text2_set;
*swig_unknown_text3_get = *LibreDWGc::Dwg_Header_Variables_unknown_text3_get;
*swig_unknown_text3_set = *LibreDWGc::Dwg_Header_Variables_unknown_text3_set;
*swig_unknown_text4_get = *LibreDWGc::Dwg_Header_Variables_unknown_text4_get;
*swig_unknown_text4_set = *LibreDWGc::Dwg_Header_Variables_unknown_text4_set;
*swig_unknown_8_get = *LibreDWGc::Dwg_Header_Variables_unknown_8_get;
*swig_unknown_8_set = *LibreDWGc::Dwg_Header_Variables_unknown_8_set;
*swig_unknown_9_get = *LibreDWGc::Dwg_Header_Variables_unknown_9_get;
*swig_unknown_9_set = *LibreDWGc::Dwg_Header_Variables_unknown_9_set;
*swig_unknown_10_get = *LibreDWGc::Dwg_Header_Variables_unknown_10_get;
*swig_unknown_10_set = *LibreDWGc::Dwg_Header_Variables_unknown_10_set;
*swig_vport_entity_header_get = *LibreDWGc::Dwg_Header_Variables_vport_entity_header_get;
*swig_vport_entity_header_set = *LibreDWGc::Dwg_Header_Variables_vport_entity_header_set;
*swig_DIMASO_get = *LibreDWGc::Dwg_Header_Variables_DIMASO_get;
*swig_DIMASO_set = *LibreDWGc::Dwg_Header_Variables_DIMASO_set;
*swig_DIMSHO_get = *LibreDWGc::Dwg_Header_Variables_DIMSHO_get;
*swig_DIMSHO_set = *LibreDWGc::Dwg_Header_Variables_DIMSHO_set;
*swig_DIMSAV_get = *LibreDWGc::Dwg_Header_Variables_DIMSAV_get;
*swig_DIMSAV_set = *LibreDWGc::Dwg_Header_Variables_DIMSAV_set;
*swig_PLINEGEN_get = *LibreDWGc::Dwg_Header_Variables_PLINEGEN_get;
*swig_PLINEGEN_set = *LibreDWGc::Dwg_Header_Variables_PLINEGEN_set;
*swig_ORTHOMODE_get = *LibreDWGc::Dwg_Header_Variables_ORTHOMODE_get;
*swig_ORTHOMODE_set = *LibreDWGc::Dwg_Header_Variables_ORTHOMODE_set;
*swig_REGENMODE_get = *LibreDWGc::Dwg_Header_Variables_REGENMODE_get;
*swig_REGENMODE_set = *LibreDWGc::Dwg_Header_Variables_REGENMODE_set;
*swig_FILLMODE_get = *LibreDWGc::Dwg_Header_Variables_FILLMODE_get;
*swig_FILLMODE_set = *LibreDWGc::Dwg_Header_Variables_FILLMODE_set;
*swig_QTEXTMODE_get = *LibreDWGc::Dwg_Header_Variables_QTEXTMODE_get;
*swig_QTEXTMODE_set = *LibreDWGc::Dwg_Header_Variables_QTEXTMODE_set;
*swig_PSLTSCALE_get = *LibreDWGc::Dwg_Header_Variables_PSLTSCALE_get;
*swig_PSLTSCALE_set = *LibreDWGc::Dwg_Header_Variables_PSLTSCALE_set;
*swig_LIMCHECK_get = *LibreDWGc::Dwg_Header_Variables_LIMCHECK_get;
*swig_LIMCHECK_set = *LibreDWGc::Dwg_Header_Variables_LIMCHECK_set;
*swig_BLIPMODE_get = *LibreDWGc::Dwg_Header_Variables_BLIPMODE_get;
*swig_BLIPMODE_set = *LibreDWGc::Dwg_Header_Variables_BLIPMODE_set;
*swig_unknown_11_get = *LibreDWGc::Dwg_Header_Variables_unknown_11_get;
*swig_unknown_11_set = *LibreDWGc::Dwg_Header_Variables_unknown_11_set;
*swig_USRTIMER_get = *LibreDWGc::Dwg_Header_Variables_USRTIMER_get;
*swig_USRTIMER_set = *LibreDWGc::Dwg_Header_Variables_USRTIMER_set;
*swig_SKPOLY_get = *LibreDWGc::Dwg_Header_Variables_SKPOLY_get;
*swig_SKPOLY_set = *LibreDWGc::Dwg_Header_Variables_SKPOLY_set;
*swig_ANGDIR_get = *LibreDWGc::Dwg_Header_Variables_ANGDIR_get;
*swig_ANGDIR_set = *LibreDWGc::Dwg_Header_Variables_ANGDIR_set;
*swig_SPLFRAME_get = *LibreDWGc::Dwg_Header_Variables_SPLFRAME_get;
*swig_SPLFRAME_set = *LibreDWGc::Dwg_Header_Variables_SPLFRAME_set;
*swig_ATTREQ_get = *LibreDWGc::Dwg_Header_Variables_ATTREQ_get;
*swig_ATTREQ_set = *LibreDWGc::Dwg_Header_Variables_ATTREQ_set;
*swig_ATTDIA_get = *LibreDWGc::Dwg_Header_Variables_ATTDIA_get;
*swig_ATTDIA_set = *LibreDWGc::Dwg_Header_Variables_ATTDIA_set;
*swig_MIRRTEXT_get = *LibreDWGc::Dwg_Header_Variables_MIRRTEXT_get;
*swig_MIRRTEXT_set = *LibreDWGc::Dwg_Header_Variables_MIRRTEXT_set;
*swig_WORLDVIEW_get = *LibreDWGc::Dwg_Header_Variables_WORLDVIEW_get;
*swig_WORLDVIEW_set = *LibreDWGc::Dwg_Header_Variables_WORLDVIEW_set;
*swig_WIREFRAME_get = *LibreDWGc::Dwg_Header_Variables_WIREFRAME_get;
*swig_WIREFRAME_set = *LibreDWGc::Dwg_Header_Variables_WIREFRAME_set;
*swig_TILEMODE_get = *LibreDWGc::Dwg_Header_Variables_TILEMODE_get;
*swig_TILEMODE_set = *LibreDWGc::Dwg_Header_Variables_TILEMODE_set;
*swig_PLIMCHECK_get = *LibreDWGc::Dwg_Header_Variables_PLIMCHECK_get;
*swig_PLIMCHECK_set = *LibreDWGc::Dwg_Header_Variables_PLIMCHECK_set;
*swig_VISRETAIN_get = *LibreDWGc::Dwg_Header_Variables_VISRETAIN_get;
*swig_VISRETAIN_set = *LibreDWGc::Dwg_Header_Variables_VISRETAIN_set;
*swig_DELOBJ_get = *LibreDWGc::Dwg_Header_Variables_DELOBJ_get;
*swig_DELOBJ_set = *LibreDWGc::Dwg_Header_Variables_DELOBJ_set;
*swig_DISPSILH_get = *LibreDWGc::Dwg_Header_Variables_DISPSILH_get;
*swig_DISPSILH_set = *LibreDWGc::Dwg_Header_Variables_DISPSILH_set;
*swig_PELLIPSE_get = *LibreDWGc::Dwg_Header_Variables_PELLIPSE_get;
*swig_PELLIPSE_set = *LibreDWGc::Dwg_Header_Variables_PELLIPSE_set;
*swig_SAVEIMAGES_get = *LibreDWGc::Dwg_Header_Variables_SAVEIMAGES_get;
*swig_SAVEIMAGES_set = *LibreDWGc::Dwg_Header_Variables_SAVEIMAGES_set;
*swig_PROXYGRAPHICS_get = *LibreDWGc::Dwg_Header_Variables_PROXYGRAPHICS_get;
*swig_PROXYGRAPHICS_set = *LibreDWGc::Dwg_Header_Variables_PROXYGRAPHICS_set;
*swig_DRAGMODE_get = *LibreDWGc::Dwg_Header_Variables_DRAGMODE_get;
*swig_DRAGMODE_set = *LibreDWGc::Dwg_Header_Variables_DRAGMODE_set;
*swig_TREEDEPTH_get = *LibreDWGc::Dwg_Header_Variables_TREEDEPTH_get;
*swig_TREEDEPTH_set = *LibreDWGc::Dwg_Header_Variables_TREEDEPTH_set;
*swig_LUNITS_get = *LibreDWGc::Dwg_Header_Variables_LUNITS_get;
*swig_LUNITS_set = *LibreDWGc::Dwg_Header_Variables_LUNITS_set;
*swig_LUPREC_get = *LibreDWGc::Dwg_Header_Variables_LUPREC_get;
*swig_LUPREC_set = *LibreDWGc::Dwg_Header_Variables_LUPREC_set;
*swig_AUNITS_get = *LibreDWGc::Dwg_Header_Variables_AUNITS_get;
*swig_AUNITS_set = *LibreDWGc::Dwg_Header_Variables_AUNITS_set;
*swig_AUPREC_get = *LibreDWGc::Dwg_Header_Variables_AUPREC_get;
*swig_AUPREC_set = *LibreDWGc::Dwg_Header_Variables_AUPREC_set;
*swig_OSMODE_get = *LibreDWGc::Dwg_Header_Variables_OSMODE_get;
*swig_OSMODE_set = *LibreDWGc::Dwg_Header_Variables_OSMODE_set;
*swig_ATTMODE_get = *LibreDWGc::Dwg_Header_Variables_ATTMODE_get;
*swig_ATTMODE_set = *LibreDWGc::Dwg_Header_Variables_ATTMODE_set;
*swig_COORDS_get = *LibreDWGc::Dwg_Header_Variables_COORDS_get;
*swig_COORDS_set = *LibreDWGc::Dwg_Header_Variables_COORDS_set;
*swig_PDMODE_get = *LibreDWGc::Dwg_Header_Variables_PDMODE_get;
*swig_PDMODE_set = *LibreDWGc::Dwg_Header_Variables_PDMODE_set;
*swig_PICKSTYLE_get = *LibreDWGc::Dwg_Header_Variables_PICKSTYLE_get;
*swig_PICKSTYLE_set = *LibreDWGc::Dwg_Header_Variables_PICKSTYLE_set;
*swig_unknown_12_get = *LibreDWGc::Dwg_Header_Variables_unknown_12_get;
*swig_unknown_12_set = *LibreDWGc::Dwg_Header_Variables_unknown_12_set;
*swig_unknown_13_get = *LibreDWGc::Dwg_Header_Variables_unknown_13_get;
*swig_unknown_13_set = *LibreDWGc::Dwg_Header_Variables_unknown_13_set;
*swig_unknown_14_get = *LibreDWGc::Dwg_Header_Variables_unknown_14_get;
*swig_unknown_14_set = *LibreDWGc::Dwg_Header_Variables_unknown_14_set;
*swig_USERI1_get = *LibreDWGc::Dwg_Header_Variables_USERI1_get;
*swig_USERI1_set = *LibreDWGc::Dwg_Header_Variables_USERI1_set;
*swig_USERI2_get = *LibreDWGc::Dwg_Header_Variables_USERI2_get;
*swig_USERI2_set = *LibreDWGc::Dwg_Header_Variables_USERI2_set;
*swig_USERI3_get = *LibreDWGc::Dwg_Header_Variables_USERI3_get;
*swig_USERI3_set = *LibreDWGc::Dwg_Header_Variables_USERI3_set;
*swig_USERI4_get = *LibreDWGc::Dwg_Header_Variables_USERI4_get;
*swig_USERI4_set = *LibreDWGc::Dwg_Header_Variables_USERI4_set;
*swig_USERI5_get = *LibreDWGc::Dwg_Header_Variables_USERI5_get;
*swig_USERI5_set = *LibreDWGc::Dwg_Header_Variables_USERI5_set;
*swig_SPLINESEGS_get = *LibreDWGc::Dwg_Header_Variables_SPLINESEGS_get;
*swig_SPLINESEGS_set = *LibreDWGc::Dwg_Header_Variables_SPLINESEGS_set;
*swig_SURFU_get = *LibreDWGc::Dwg_Header_Variables_SURFU_get;
*swig_SURFU_set = *LibreDWGc::Dwg_Header_Variables_SURFU_set;
*swig_SURFV_get = *LibreDWGc::Dwg_Header_Variables_SURFV_get;
*swig_SURFV_set = *LibreDWGc::Dwg_Header_Variables_SURFV_set;
*swig_SURFTYPE_get = *LibreDWGc::Dwg_Header_Variables_SURFTYPE_get;
*swig_SURFTYPE_set = *LibreDWGc::Dwg_Header_Variables_SURFTYPE_set;
*swig_SURFTAB1_get = *LibreDWGc::Dwg_Header_Variables_SURFTAB1_get;
*swig_SURFTAB1_set = *LibreDWGc::Dwg_Header_Variables_SURFTAB1_set;
*swig_SURFTAB2_get = *LibreDWGc::Dwg_Header_Variables_SURFTAB2_get;
*swig_SURFTAB2_set = *LibreDWGc::Dwg_Header_Variables_SURFTAB2_set;
*swig_SPLINETYPE_get = *LibreDWGc::Dwg_Header_Variables_SPLINETYPE_get;
*swig_SPLINETYPE_set = *LibreDWGc::Dwg_Header_Variables_SPLINETYPE_set;
*swig_SHADEDGE_get = *LibreDWGc::Dwg_Header_Variables_SHADEDGE_get;
*swig_SHADEDGE_set = *LibreDWGc::Dwg_Header_Variables_SHADEDGE_set;
*swig_SHADEDIF_get = *LibreDWGc::Dwg_Header_Variables_SHADEDIF_get;
*swig_SHADEDIF_set = *LibreDWGc::Dwg_Header_Variables_SHADEDIF_set;
*swig_UNITMODE_get = *LibreDWGc::Dwg_Header_Variables_UNITMODE_get;
*swig_UNITMODE_set = *LibreDWGc::Dwg_Header_Variables_UNITMODE_set;
*swig_MAXACTVP_get = *LibreDWGc::Dwg_Header_Variables_MAXACTVP_get;
*swig_MAXACTVP_set = *LibreDWGc::Dwg_Header_Variables_MAXACTVP_set;
*swig_ISOLINES_get = *LibreDWGc::Dwg_Header_Variables_ISOLINES_get;
*swig_ISOLINES_set = *LibreDWGc::Dwg_Header_Variables_ISOLINES_set;
*swig_CMLJUST_get = *LibreDWGc::Dwg_Header_Variables_CMLJUST_get;
*swig_CMLJUST_set = *LibreDWGc::Dwg_Header_Variables_CMLJUST_set;
*swig_TEXTQLTY_get = *LibreDWGc::Dwg_Header_Variables_TEXTQLTY_get;
*swig_TEXTQLTY_set = *LibreDWGc::Dwg_Header_Variables_TEXTQLTY_set;
*swig_unknown_14b_get = *LibreDWGc::Dwg_Header_Variables_unknown_14b_get;
*swig_unknown_14b_set = *LibreDWGc::Dwg_Header_Variables_unknown_14b_set;
*swig_LTSCALE_get = *LibreDWGc::Dwg_Header_Variables_LTSCALE_get;
*swig_LTSCALE_set = *LibreDWGc::Dwg_Header_Variables_LTSCALE_set;
*swig_TEXTSIZE_get = *LibreDWGc::Dwg_Header_Variables_TEXTSIZE_get;
*swig_TEXTSIZE_set = *LibreDWGc::Dwg_Header_Variables_TEXTSIZE_set;
*swig_TRACEWID_get = *LibreDWGc::Dwg_Header_Variables_TRACEWID_get;
*swig_TRACEWID_set = *LibreDWGc::Dwg_Header_Variables_TRACEWID_set;
*swig_SKETCHINC_get = *LibreDWGc::Dwg_Header_Variables_SKETCHINC_get;
*swig_SKETCHINC_set = *LibreDWGc::Dwg_Header_Variables_SKETCHINC_set;
*swig_FILLETRAD_get = *LibreDWGc::Dwg_Header_Variables_FILLETRAD_get;
*swig_FILLETRAD_set = *LibreDWGc::Dwg_Header_Variables_FILLETRAD_set;
*swig_THICKNESS_get = *LibreDWGc::Dwg_Header_Variables_THICKNESS_get;
*swig_THICKNESS_set = *LibreDWGc::Dwg_Header_Variables_THICKNESS_set;
*swig_ANGBASE_get = *LibreDWGc::Dwg_Header_Variables_ANGBASE_get;
*swig_ANGBASE_set = *LibreDWGc::Dwg_Header_Variables_ANGBASE_set;
*swig_PDSIZE_get = *LibreDWGc::Dwg_Header_Variables_PDSIZE_get;
*swig_PDSIZE_set = *LibreDWGc::Dwg_Header_Variables_PDSIZE_set;
*swig_PLINEWID_get = *LibreDWGc::Dwg_Header_Variables_PLINEWID_get;
*swig_PLINEWID_set = *LibreDWGc::Dwg_Header_Variables_PLINEWID_set;
*swig_USERR1_get = *LibreDWGc::Dwg_Header_Variables_USERR1_get;
*swig_USERR1_set = *LibreDWGc::Dwg_Header_Variables_USERR1_set;
*swig_USERR2_get = *LibreDWGc::Dwg_Header_Variables_USERR2_get;
*swig_USERR2_set = *LibreDWGc::Dwg_Header_Variables_USERR2_set;
*swig_USERR3_get = *LibreDWGc::Dwg_Header_Variables_USERR3_get;
*swig_USERR3_set = *LibreDWGc::Dwg_Header_Variables_USERR3_set;
*swig_USERR4_get = *LibreDWGc::Dwg_Header_Variables_USERR4_get;
*swig_USERR4_set = *LibreDWGc::Dwg_Header_Variables_USERR4_set;
*swig_USERR5_get = *LibreDWGc::Dwg_Header_Variables_USERR5_get;
*swig_USERR5_set = *LibreDWGc::Dwg_Header_Variables_USERR5_set;
*swig_CHAMFERA_get = *LibreDWGc::Dwg_Header_Variables_CHAMFERA_get;
*swig_CHAMFERA_set = *LibreDWGc::Dwg_Header_Variables_CHAMFERA_set;
*swig_CHAMFERB_get = *LibreDWGc::Dwg_Header_Variables_CHAMFERB_get;
*swig_CHAMFERB_set = *LibreDWGc::Dwg_Header_Variables_CHAMFERB_set;
*swig_CHAMFERC_get = *LibreDWGc::Dwg_Header_Variables_CHAMFERC_get;
*swig_CHAMFERC_set = *LibreDWGc::Dwg_Header_Variables_CHAMFERC_set;
*swig_CHAMFERD_get = *LibreDWGc::Dwg_Header_Variables_CHAMFERD_get;
*swig_CHAMFERD_set = *LibreDWGc::Dwg_Header_Variables_CHAMFERD_set;
*swig_FACETRES_get = *LibreDWGc::Dwg_Header_Variables_FACETRES_get;
*swig_FACETRES_set = *LibreDWGc::Dwg_Header_Variables_FACETRES_set;
*swig_CMLSCALE_get = *LibreDWGc::Dwg_Header_Variables_CMLSCALE_get;
*swig_CMLSCALE_set = *LibreDWGc::Dwg_Header_Variables_CMLSCALE_set;
*swig_CELTSCALE_get = *LibreDWGc::Dwg_Header_Variables_CELTSCALE_get;
*swig_CELTSCALE_set = *LibreDWGc::Dwg_Header_Variables_CELTSCALE_set;
*swig_MENU_get = *LibreDWGc::Dwg_Header_Variables_MENU_get;
*swig_MENU_set = *LibreDWGc::Dwg_Header_Variables_MENU_set;
*swig_TDCREATE_get = *LibreDWGc::Dwg_Header_Variables_TDCREATE_get;
*swig_TDCREATE_set = *LibreDWGc::Dwg_Header_Variables_TDCREATE_set;
*swig_TDUPDATE_get = *LibreDWGc::Dwg_Header_Variables_TDUPDATE_get;
*swig_TDUPDATE_set = *LibreDWGc::Dwg_Header_Variables_TDUPDATE_set;
*swig_unknown_15_get = *LibreDWGc::Dwg_Header_Variables_unknown_15_get;
*swig_unknown_15_set = *LibreDWGc::Dwg_Header_Variables_unknown_15_set;
*swig_unknown_16_get = *LibreDWGc::Dwg_Header_Variables_unknown_16_get;
*swig_unknown_16_set = *LibreDWGc::Dwg_Header_Variables_unknown_16_set;
*swig_unknown_17_get = *LibreDWGc::Dwg_Header_Variables_unknown_17_get;
*swig_unknown_17_set = *LibreDWGc::Dwg_Header_Variables_unknown_17_set;
*swig_TDINDWG_get = *LibreDWGc::Dwg_Header_Variables_TDINDWG_get;
*swig_TDINDWG_set = *LibreDWGc::Dwg_Header_Variables_TDINDWG_set;
*swig_TDUSRTIMER_get = *LibreDWGc::Dwg_Header_Variables_TDUSRTIMER_get;
*swig_TDUSRTIMER_set = *LibreDWGc::Dwg_Header_Variables_TDUSRTIMER_set;
*swig_CECOLOR_get = *LibreDWGc::Dwg_Header_Variables_CECOLOR_get;
*swig_CECOLOR_set = *LibreDWGc::Dwg_Header_Variables_CECOLOR_set;
*swig_CECOLOR_idx_get = *LibreDWGc::Dwg_Header_Variables_CECOLOR_idx_get;
*swig_CECOLOR_idx_set = *LibreDWGc::Dwg_Header_Variables_CECOLOR_idx_set;
*swig_HANDLING_get = *LibreDWGc::Dwg_Header_Variables_HANDLING_get;
*swig_HANDLING_set = *LibreDWGc::Dwg_Header_Variables_HANDLING_set;
*swig_HANDSEED_R11_get = *LibreDWGc::Dwg_Header_Variables_HANDSEED_R11_get;
*swig_HANDSEED_R11_set = *LibreDWGc::Dwg_Header_Variables_HANDSEED_R11_set;
*swig_HANDSEED_get = *LibreDWGc::Dwg_Header_Variables_HANDSEED_get;
*swig_HANDSEED_set = *LibreDWGc::Dwg_Header_Variables_HANDSEED_set;
*swig_CLAYER_get = *LibreDWGc::Dwg_Header_Variables_CLAYER_get;
*swig_CLAYER_set = *LibreDWGc::Dwg_Header_Variables_CLAYER_set;
*swig_TEXTSTYLE_get = *LibreDWGc::Dwg_Header_Variables_TEXTSTYLE_get;
*swig_TEXTSTYLE_set = *LibreDWGc::Dwg_Header_Variables_TEXTSTYLE_set;
*swig_CELTYPE_get = *LibreDWGc::Dwg_Header_Variables_CELTYPE_get;
*swig_CELTYPE_set = *LibreDWGc::Dwg_Header_Variables_CELTYPE_set;
*swig_CMATERIAL_get = *LibreDWGc::Dwg_Header_Variables_CMATERIAL_get;
*swig_CMATERIAL_set = *LibreDWGc::Dwg_Header_Variables_CMATERIAL_set;
*swig_DIMSTYLE_get = *LibreDWGc::Dwg_Header_Variables_DIMSTYLE_get;
*swig_DIMSTYLE_set = *LibreDWGc::Dwg_Header_Variables_DIMSTYLE_set;
*swig_CMLSTYLE_get = *LibreDWGc::Dwg_Header_Variables_CMLSTYLE_get;
*swig_CMLSTYLE_set = *LibreDWGc::Dwg_Header_Variables_CMLSTYLE_set;
*swig_PSVPSCALE_get = *LibreDWGc::Dwg_Header_Variables_PSVPSCALE_get;
*swig_PSVPSCALE_set = *LibreDWGc::Dwg_Header_Variables_PSVPSCALE_set;
*swig_PINSBASE_get = *LibreDWGc::Dwg_Header_Variables_PINSBASE_get;
*swig_PINSBASE_set = *LibreDWGc::Dwg_Header_Variables_PINSBASE_set;
*swig_PEXTMIN_get = *LibreDWGc::Dwg_Header_Variables_PEXTMIN_get;
*swig_PEXTMIN_set = *LibreDWGc::Dwg_Header_Variables_PEXTMIN_set;
*swig_PEXTMAX_get = *LibreDWGc::Dwg_Header_Variables_PEXTMAX_get;
*swig_PEXTMAX_set = *LibreDWGc::Dwg_Header_Variables_PEXTMAX_set;
*swig_PLIMMIN_get = *LibreDWGc::Dwg_Header_Variables_PLIMMIN_get;
*swig_PLIMMIN_set = *LibreDWGc::Dwg_Header_Variables_PLIMMIN_set;
*swig_PLIMMAX_get = *LibreDWGc::Dwg_Header_Variables_PLIMMAX_get;
*swig_PLIMMAX_set = *LibreDWGc::Dwg_Header_Variables_PLIMMAX_set;
*swig_PELEVATION_get = *LibreDWGc::Dwg_Header_Variables_PELEVATION_get;
*swig_PELEVATION_set = *LibreDWGc::Dwg_Header_Variables_PELEVATION_set;
*swig_PUCSORG_get = *LibreDWGc::Dwg_Header_Variables_PUCSORG_get;
*swig_PUCSORG_set = *LibreDWGc::Dwg_Header_Variables_PUCSORG_set;
*swig_PUCSXDIR_get = *LibreDWGc::Dwg_Header_Variables_PUCSXDIR_get;
*swig_PUCSXDIR_set = *LibreDWGc::Dwg_Header_Variables_PUCSXDIR_set;
*swig_PUCSYDIR_get = *LibreDWGc::Dwg_Header_Variables_PUCSYDIR_get;
*swig_PUCSYDIR_set = *LibreDWGc::Dwg_Header_Variables_PUCSYDIR_set;
*swig_PUCSNAME_get = *LibreDWGc::Dwg_Header_Variables_PUCSNAME_get;
*swig_PUCSNAME_set = *LibreDWGc::Dwg_Header_Variables_PUCSNAME_set;
*swig_PUCSBASE_get = *LibreDWGc::Dwg_Header_Variables_PUCSBASE_get;
*swig_PUCSBASE_set = *LibreDWGc::Dwg_Header_Variables_PUCSBASE_set;
*swig_PUCSORTHOREF_get = *LibreDWGc::Dwg_Header_Variables_PUCSORTHOREF_get;
*swig_PUCSORTHOREF_set = *LibreDWGc::Dwg_Header_Variables_PUCSORTHOREF_set;
*swig_PUCSORTHOVIEW_get = *LibreDWGc::Dwg_Header_Variables_PUCSORTHOVIEW_get;
*swig_PUCSORTHOVIEW_set = *LibreDWGc::Dwg_Header_Variables_PUCSORTHOVIEW_set;
*swig_PUCSORGTOP_get = *LibreDWGc::Dwg_Header_Variables_PUCSORGTOP_get;
*swig_PUCSORGTOP_set = *LibreDWGc::Dwg_Header_Variables_PUCSORGTOP_set;
*swig_PUCSORGBOTTOM_get = *LibreDWGc::Dwg_Header_Variables_PUCSORGBOTTOM_get;
*swig_PUCSORGBOTTOM_set = *LibreDWGc::Dwg_Header_Variables_PUCSORGBOTTOM_set;
*swig_PUCSORGLEFT_get = *LibreDWGc::Dwg_Header_Variables_PUCSORGLEFT_get;
*swig_PUCSORGLEFT_set = *LibreDWGc::Dwg_Header_Variables_PUCSORGLEFT_set;
*swig_PUCSORGRIGHT_get = *LibreDWGc::Dwg_Header_Variables_PUCSORGRIGHT_get;
*swig_PUCSORGRIGHT_set = *LibreDWGc::Dwg_Header_Variables_PUCSORGRIGHT_set;
*swig_PUCSORGFRONT_get = *LibreDWGc::Dwg_Header_Variables_PUCSORGFRONT_get;
*swig_PUCSORGFRONT_set = *LibreDWGc::Dwg_Header_Variables_PUCSORGFRONT_set;
*swig_PUCSORGBACK_get = *LibreDWGc::Dwg_Header_Variables_PUCSORGBACK_get;
*swig_PUCSORGBACK_set = *LibreDWGc::Dwg_Header_Variables_PUCSORGBACK_set;
*swig_INSBASE_get = *LibreDWGc::Dwg_Header_Variables_INSBASE_get;
*swig_INSBASE_set = *LibreDWGc::Dwg_Header_Variables_INSBASE_set;
*swig_EXTMIN_get = *LibreDWGc::Dwg_Header_Variables_EXTMIN_get;
*swig_EXTMIN_set = *LibreDWGc::Dwg_Header_Variables_EXTMIN_set;
*swig_EXTMAX_get = *LibreDWGc::Dwg_Header_Variables_EXTMAX_get;
*swig_EXTMAX_set = *LibreDWGc::Dwg_Header_Variables_EXTMAX_set;
*swig_LIMMIN_get = *LibreDWGc::Dwg_Header_Variables_LIMMIN_get;
*swig_LIMMIN_set = *LibreDWGc::Dwg_Header_Variables_LIMMIN_set;
*swig_LIMMAX_get = *LibreDWGc::Dwg_Header_Variables_LIMMAX_get;
*swig_LIMMAX_set = *LibreDWGc::Dwg_Header_Variables_LIMMAX_set;
*swig_VIEWCTR_get = *LibreDWGc::Dwg_Header_Variables_VIEWCTR_get;
*swig_VIEWCTR_set = *LibreDWGc::Dwg_Header_Variables_VIEWCTR_set;
*swig_ELEVATION_get = *LibreDWGc::Dwg_Header_Variables_ELEVATION_get;
*swig_ELEVATION_set = *LibreDWGc::Dwg_Header_Variables_ELEVATION_set;
*swig_VIEWSIZE_get = *LibreDWGc::Dwg_Header_Variables_VIEWSIZE_get;
*swig_VIEWSIZE_set = *LibreDWGc::Dwg_Header_Variables_VIEWSIZE_set;
*swig_SNAPMODE_get = *LibreDWGc::Dwg_Header_Variables_SNAPMODE_get;
*swig_SNAPMODE_set = *LibreDWGc::Dwg_Header_Variables_SNAPMODE_set;
*swig_SNAPUNIT_get = *LibreDWGc::Dwg_Header_Variables_SNAPUNIT_get;
*swig_SNAPUNIT_set = *LibreDWGc::Dwg_Header_Variables_SNAPUNIT_set;
*swig_SNAPBASE_get = *LibreDWGc::Dwg_Header_Variables_SNAPBASE_get;
*swig_SNAPBASE_set = *LibreDWGc::Dwg_Header_Variables_SNAPBASE_set;
*swig_SNAPANG_get = *LibreDWGc::Dwg_Header_Variables_SNAPANG_get;
*swig_SNAPANG_set = *LibreDWGc::Dwg_Header_Variables_SNAPANG_set;
*swig_SNAPSTYL_get = *LibreDWGc::Dwg_Header_Variables_SNAPSTYL_get;
*swig_SNAPSTYL_set = *LibreDWGc::Dwg_Header_Variables_SNAPSTYL_set;
*swig_SNAPISOPAIR_get = *LibreDWGc::Dwg_Header_Variables_SNAPISOPAIR_get;
*swig_SNAPISOPAIR_set = *LibreDWGc::Dwg_Header_Variables_SNAPISOPAIR_set;
*swig_GRIDMODE_get = *LibreDWGc::Dwg_Header_Variables_GRIDMODE_get;
*swig_GRIDMODE_set = *LibreDWGc::Dwg_Header_Variables_GRIDMODE_set;
*swig_GRIDUNIT_get = *LibreDWGc::Dwg_Header_Variables_GRIDUNIT_get;
*swig_GRIDUNIT_set = *LibreDWGc::Dwg_Header_Variables_GRIDUNIT_set;
*swig_UCSORG_get = *LibreDWGc::Dwg_Header_Variables_UCSORG_get;
*swig_UCSORG_set = *LibreDWGc::Dwg_Header_Variables_UCSORG_set;
*swig_UCSXDIR_get = *LibreDWGc::Dwg_Header_Variables_UCSXDIR_get;
*swig_UCSXDIR_set = *LibreDWGc::Dwg_Header_Variables_UCSXDIR_set;
*swig_UCSYDIR_get = *LibreDWGc::Dwg_Header_Variables_UCSYDIR_get;
*swig_UCSYDIR_set = *LibreDWGc::Dwg_Header_Variables_UCSYDIR_set;
*swig_UCSNAME_get = *LibreDWGc::Dwg_Header_Variables_UCSNAME_get;
*swig_UCSNAME_set = *LibreDWGc::Dwg_Header_Variables_UCSNAME_set;
*swig_UCSBASE_get = *LibreDWGc::Dwg_Header_Variables_UCSBASE_get;
*swig_UCSBASE_set = *LibreDWGc::Dwg_Header_Variables_UCSBASE_set;
*swig_UCSORTHOVIEW_get = *LibreDWGc::Dwg_Header_Variables_UCSORTHOVIEW_get;
*swig_UCSORTHOVIEW_set = *LibreDWGc::Dwg_Header_Variables_UCSORTHOVIEW_set;
*swig_UCSORTHOREF_get = *LibreDWGc::Dwg_Header_Variables_UCSORTHOREF_get;
*swig_UCSORTHOREF_set = *LibreDWGc::Dwg_Header_Variables_UCSORTHOREF_set;
*swig_UCSORGTOP_get = *LibreDWGc::Dwg_Header_Variables_UCSORGTOP_get;
*swig_UCSORGTOP_set = *LibreDWGc::Dwg_Header_Variables_UCSORGTOP_set;
*swig_UCSORGBOTTOM_get = *LibreDWGc::Dwg_Header_Variables_UCSORGBOTTOM_get;
*swig_UCSORGBOTTOM_set = *LibreDWGc::Dwg_Header_Variables_UCSORGBOTTOM_set;
*swig_UCSORGLEFT_get = *LibreDWGc::Dwg_Header_Variables_UCSORGLEFT_get;
*swig_UCSORGLEFT_set = *LibreDWGc::Dwg_Header_Variables_UCSORGLEFT_set;
*swig_UCSORGRIGHT_get = *LibreDWGc::Dwg_Header_Variables_UCSORGRIGHT_get;
*swig_UCSORGRIGHT_set = *LibreDWGc::Dwg_Header_Variables_UCSORGRIGHT_set;
*swig_UCSORGFRONT_get = *LibreDWGc::Dwg_Header_Variables_UCSORGFRONT_get;
*swig_UCSORGFRONT_set = *LibreDWGc::Dwg_Header_Variables_UCSORGFRONT_set;
*swig_UCSORGBACK_get = *LibreDWGc::Dwg_Header_Variables_UCSORGBACK_get;
*swig_UCSORGBACK_set = *LibreDWGc::Dwg_Header_Variables_UCSORGBACK_set;
*swig_DIMPOST_get = *LibreDWGc::Dwg_Header_Variables_DIMPOST_get;
*swig_DIMPOST_set = *LibreDWGc::Dwg_Header_Variables_DIMPOST_set;
*swig_DIMAPOST_get = *LibreDWGc::Dwg_Header_Variables_DIMAPOST_get;
*swig_DIMAPOST_set = *LibreDWGc::Dwg_Header_Variables_DIMAPOST_set;
*swig_DIMTOL_get = *LibreDWGc::Dwg_Header_Variables_DIMTOL_get;
*swig_DIMTOL_set = *LibreDWGc::Dwg_Header_Variables_DIMTOL_set;
*swig_DIMLIM_get = *LibreDWGc::Dwg_Header_Variables_DIMLIM_get;
*swig_DIMLIM_set = *LibreDWGc::Dwg_Header_Variables_DIMLIM_set;
*swig_DIMTIH_get = *LibreDWGc::Dwg_Header_Variables_DIMTIH_get;
*swig_DIMTIH_set = *LibreDWGc::Dwg_Header_Variables_DIMTIH_set;
*swig_DIMTOH_get = *LibreDWGc::Dwg_Header_Variables_DIMTOH_get;
*swig_DIMTOH_set = *LibreDWGc::Dwg_Header_Variables_DIMTOH_set;
*swig_DIMSE1_get = *LibreDWGc::Dwg_Header_Variables_DIMSE1_get;
*swig_DIMSE1_set = *LibreDWGc::Dwg_Header_Variables_DIMSE1_set;
*swig_DIMSE2_get = *LibreDWGc::Dwg_Header_Variables_DIMSE2_get;
*swig_DIMSE2_set = *LibreDWGc::Dwg_Header_Variables_DIMSE2_set;
*swig_DIMALT_get = *LibreDWGc::Dwg_Header_Variables_DIMALT_get;
*swig_DIMALT_set = *LibreDWGc::Dwg_Header_Variables_DIMALT_set;
*swig_DIMTOFL_get = *LibreDWGc::Dwg_Header_Variables_DIMTOFL_get;
*swig_DIMTOFL_set = *LibreDWGc::Dwg_Header_Variables_DIMTOFL_set;
*swig_DIMSAH_get = *LibreDWGc::Dwg_Header_Variables_DIMSAH_get;
*swig_DIMSAH_set = *LibreDWGc::Dwg_Header_Variables_DIMSAH_set;
*swig_DIMTIX_get = *LibreDWGc::Dwg_Header_Variables_DIMTIX_get;
*swig_DIMTIX_set = *LibreDWGc::Dwg_Header_Variables_DIMTIX_set;
*swig_DIMSOXD_get = *LibreDWGc::Dwg_Header_Variables_DIMSOXD_get;
*swig_DIMSOXD_set = *LibreDWGc::Dwg_Header_Variables_DIMSOXD_set;
*swig_DIMALTD_get = *LibreDWGc::Dwg_Header_Variables_DIMALTD_get;
*swig_DIMALTD_set = *LibreDWGc::Dwg_Header_Variables_DIMALTD_set;
*swig_DIMZIN_get = *LibreDWGc::Dwg_Header_Variables_DIMZIN_get;
*swig_DIMZIN_set = *LibreDWGc::Dwg_Header_Variables_DIMZIN_set;
*swig_DIMSD1_get = *LibreDWGc::Dwg_Header_Variables_DIMSD1_get;
*swig_DIMSD1_set = *LibreDWGc::Dwg_Header_Variables_DIMSD1_set;
*swig_DIMSD2_get = *LibreDWGc::Dwg_Header_Variables_DIMSD2_get;
*swig_DIMSD2_set = *LibreDWGc::Dwg_Header_Variables_DIMSD2_set;
*swig_DIMTOLJ_get = *LibreDWGc::Dwg_Header_Variables_DIMTOLJ_get;
*swig_DIMTOLJ_set = *LibreDWGc::Dwg_Header_Variables_DIMTOLJ_set;
*swig_DIMJUST_get = *LibreDWGc::Dwg_Header_Variables_DIMJUST_get;
*swig_DIMJUST_set = *LibreDWGc::Dwg_Header_Variables_DIMJUST_set;
*swig_DIMFIT_get = *LibreDWGc::Dwg_Header_Variables_DIMFIT_get;
*swig_DIMFIT_set = *LibreDWGc::Dwg_Header_Variables_DIMFIT_set;
*swig_DIMUPT_get = *LibreDWGc::Dwg_Header_Variables_DIMUPT_get;
*swig_DIMUPT_set = *LibreDWGc::Dwg_Header_Variables_DIMUPT_set;
*swig_DIMTZIN_get = *LibreDWGc::Dwg_Header_Variables_DIMTZIN_get;
*swig_DIMTZIN_set = *LibreDWGc::Dwg_Header_Variables_DIMTZIN_set;
*swig_DIMMALTZ_get = *LibreDWGc::Dwg_Header_Variables_DIMMALTZ_get;
*swig_DIMMALTZ_set = *LibreDWGc::Dwg_Header_Variables_DIMMALTZ_set;
*swig_DIMMALTTZ_get = *LibreDWGc::Dwg_Header_Variables_DIMMALTTZ_get;
*swig_DIMMALTTZ_set = *LibreDWGc::Dwg_Header_Variables_DIMMALTTZ_set;
*swig_DIMTAD_get = *LibreDWGc::Dwg_Header_Variables_DIMTAD_get;
*swig_DIMTAD_set = *LibreDWGc::Dwg_Header_Variables_DIMTAD_set;
*swig_DIMUNIT_get = *LibreDWGc::Dwg_Header_Variables_DIMUNIT_get;
*swig_DIMUNIT_set = *LibreDWGc::Dwg_Header_Variables_DIMUNIT_set;
*swig_DIMAUNIT_get = *LibreDWGc::Dwg_Header_Variables_DIMAUNIT_get;
*swig_DIMAUNIT_set = *LibreDWGc::Dwg_Header_Variables_DIMAUNIT_set;
*swig_DIMDEC_get = *LibreDWGc::Dwg_Header_Variables_DIMDEC_get;
*swig_DIMDEC_set = *LibreDWGc::Dwg_Header_Variables_DIMDEC_set;
*swig_DIMTDEC_get = *LibreDWGc::Dwg_Header_Variables_DIMTDEC_get;
*swig_DIMTDEC_set = *LibreDWGc::Dwg_Header_Variables_DIMTDEC_set;
*swig_DIMALTU_get = *LibreDWGc::Dwg_Header_Variables_DIMALTU_get;
*swig_DIMALTU_set = *LibreDWGc::Dwg_Header_Variables_DIMALTU_set;
*swig_DIMALTTD_get = *LibreDWGc::Dwg_Header_Variables_DIMALTTD_get;
*swig_DIMALTTD_set = *LibreDWGc::Dwg_Header_Variables_DIMALTTD_set;
*swig_DIMTXSTY_get = *LibreDWGc::Dwg_Header_Variables_DIMTXSTY_get;
*swig_DIMTXSTY_set = *LibreDWGc::Dwg_Header_Variables_DIMTXSTY_set;
*swig_DIMSCALE_get = *LibreDWGc::Dwg_Header_Variables_DIMSCALE_get;
*swig_DIMSCALE_set = *LibreDWGc::Dwg_Header_Variables_DIMSCALE_set;
*swig_DIMASZ_get = *LibreDWGc::Dwg_Header_Variables_DIMASZ_get;
*swig_DIMASZ_set = *LibreDWGc::Dwg_Header_Variables_DIMASZ_set;
*swig_DIMEXO_get = *LibreDWGc::Dwg_Header_Variables_DIMEXO_get;
*swig_DIMEXO_set = *LibreDWGc::Dwg_Header_Variables_DIMEXO_set;
*swig_DIMDLI_get = *LibreDWGc::Dwg_Header_Variables_DIMDLI_get;
*swig_DIMDLI_set = *LibreDWGc::Dwg_Header_Variables_DIMDLI_set;
*swig_DIMEXE_get = *LibreDWGc::Dwg_Header_Variables_DIMEXE_get;
*swig_DIMEXE_set = *LibreDWGc::Dwg_Header_Variables_DIMEXE_set;
*swig_DIMRND_get = *LibreDWGc::Dwg_Header_Variables_DIMRND_get;
*swig_DIMRND_set = *LibreDWGc::Dwg_Header_Variables_DIMRND_set;
*swig_DIMDLE_get = *LibreDWGc::Dwg_Header_Variables_DIMDLE_get;
*swig_DIMDLE_set = *LibreDWGc::Dwg_Header_Variables_DIMDLE_set;
*swig_DIMTP_get = *LibreDWGc::Dwg_Header_Variables_DIMTP_get;
*swig_DIMTP_set = *LibreDWGc::Dwg_Header_Variables_DIMTP_set;
*swig_DIMTM_get = *LibreDWGc::Dwg_Header_Variables_DIMTM_get;
*swig_DIMTM_set = *LibreDWGc::Dwg_Header_Variables_DIMTM_set;
*swig_DIMFXL_get = *LibreDWGc::Dwg_Header_Variables_DIMFXL_get;
*swig_DIMFXL_set = *LibreDWGc::Dwg_Header_Variables_DIMFXL_set;
*swig_DIMJOGANG_get = *LibreDWGc::Dwg_Header_Variables_DIMJOGANG_get;
*swig_DIMJOGANG_set = *LibreDWGc::Dwg_Header_Variables_DIMJOGANG_set;
*swig_DIMTFILL_get = *LibreDWGc::Dwg_Header_Variables_DIMTFILL_get;
*swig_DIMTFILL_set = *LibreDWGc::Dwg_Header_Variables_DIMTFILL_set;
*swig_DIMTFILLCLR_get = *LibreDWGc::Dwg_Header_Variables_DIMTFILLCLR_get;
*swig_DIMTFILLCLR_set = *LibreDWGc::Dwg_Header_Variables_DIMTFILLCLR_set;
*swig_DIMAZIN_get = *LibreDWGc::Dwg_Header_Variables_DIMAZIN_get;
*swig_DIMAZIN_set = *LibreDWGc::Dwg_Header_Variables_DIMAZIN_set;
*swig_DIMARCSYM_get = *LibreDWGc::Dwg_Header_Variables_DIMARCSYM_get;
*swig_DIMARCSYM_set = *LibreDWGc::Dwg_Header_Variables_DIMARCSYM_set;
*swig_DIMTXT_get = *LibreDWGc::Dwg_Header_Variables_DIMTXT_get;
*swig_DIMTXT_set = *LibreDWGc::Dwg_Header_Variables_DIMTXT_set;
*swig_DIMCEN_get = *LibreDWGc::Dwg_Header_Variables_DIMCEN_get;
*swig_DIMCEN_set = *LibreDWGc::Dwg_Header_Variables_DIMCEN_set;
*swig_DIMTSZ_get = *LibreDWGc::Dwg_Header_Variables_DIMTSZ_get;
*swig_DIMTSZ_set = *LibreDWGc::Dwg_Header_Variables_DIMTSZ_set;
*swig_DIMALTF_get = *LibreDWGc::Dwg_Header_Variables_DIMALTF_get;
*swig_DIMALTF_set = *LibreDWGc::Dwg_Header_Variables_DIMALTF_set;
*swig_DIMLFAC_get = *LibreDWGc::Dwg_Header_Variables_DIMLFAC_get;
*swig_DIMLFAC_set = *LibreDWGc::Dwg_Header_Variables_DIMLFAC_set;
*swig_DIMTVP_get = *LibreDWGc::Dwg_Header_Variables_DIMTVP_get;
*swig_DIMTVP_set = *LibreDWGc::Dwg_Header_Variables_DIMTVP_set;
*swig_DIMTFAC_get = *LibreDWGc::Dwg_Header_Variables_DIMTFAC_get;
*swig_DIMTFAC_set = *LibreDWGc::Dwg_Header_Variables_DIMTFAC_set;
*swig_DIMGAP_get = *LibreDWGc::Dwg_Header_Variables_DIMGAP_get;
*swig_DIMGAP_set = *LibreDWGc::Dwg_Header_Variables_DIMGAP_set;
*swig_DIMPOST_T_get = *LibreDWGc::Dwg_Header_Variables_DIMPOST_T_get;
*swig_DIMPOST_T_set = *LibreDWGc::Dwg_Header_Variables_DIMPOST_T_set;
*swig_DIMAPOST_T_get = *LibreDWGc::Dwg_Header_Variables_DIMAPOST_T_get;
*swig_DIMAPOST_T_set = *LibreDWGc::Dwg_Header_Variables_DIMAPOST_T_set;
*swig_DIMBLK_T_get = *LibreDWGc::Dwg_Header_Variables_DIMBLK_T_get;
*swig_DIMBLK_T_set = *LibreDWGc::Dwg_Header_Variables_DIMBLK_T_set;
*swig_DIMBLK1_T_get = *LibreDWGc::Dwg_Header_Variables_DIMBLK1_T_get;
*swig_DIMBLK1_T_set = *LibreDWGc::Dwg_Header_Variables_DIMBLK1_T_set;
*swig_DIMBLK2_T_get = *LibreDWGc::Dwg_Header_Variables_DIMBLK2_T_get;
*swig_DIMBLK2_T_set = *LibreDWGc::Dwg_Header_Variables_DIMBLK2_T_set;
*swig_DIMALTRND_get = *LibreDWGc::Dwg_Header_Variables_DIMALTRND_get;
*swig_DIMALTRND_set = *LibreDWGc::Dwg_Header_Variables_DIMALTRND_set;
*swig_DIMCLRD_C_get = *LibreDWGc::Dwg_Header_Variables_DIMCLRD_C_get;
*swig_DIMCLRD_C_set = *LibreDWGc::Dwg_Header_Variables_DIMCLRD_C_set;
*swig_DIMCLRE_C_get = *LibreDWGc::Dwg_Header_Variables_DIMCLRE_C_get;
*swig_DIMCLRE_C_set = *LibreDWGc::Dwg_Header_Variables_DIMCLRE_C_set;
*swig_DIMCLRT_C_get = *LibreDWGc::Dwg_Header_Variables_DIMCLRT_C_get;
*swig_DIMCLRT_C_set = *LibreDWGc::Dwg_Header_Variables_DIMCLRT_C_set;
*swig_DIMCLRD_get = *LibreDWGc::Dwg_Header_Variables_DIMCLRD_get;
*swig_DIMCLRD_set = *LibreDWGc::Dwg_Header_Variables_DIMCLRD_set;
*swig_DIMCLRE_get = *LibreDWGc::Dwg_Header_Variables_DIMCLRE_get;
*swig_DIMCLRE_set = *LibreDWGc::Dwg_Header_Variables_DIMCLRE_set;
*swig_DIMCLRT_get = *LibreDWGc::Dwg_Header_Variables_DIMCLRT_get;
*swig_DIMCLRT_set = *LibreDWGc::Dwg_Header_Variables_DIMCLRT_set;
*swig_DIMADEC_get = *LibreDWGc::Dwg_Header_Variables_DIMADEC_get;
*swig_DIMADEC_set = *LibreDWGc::Dwg_Header_Variables_DIMADEC_set;
*swig_DIMFRAC_get = *LibreDWGc::Dwg_Header_Variables_DIMFRAC_get;
*swig_DIMFRAC_set = *LibreDWGc::Dwg_Header_Variables_DIMFRAC_set;
*swig_DIMLUNIT_get = *LibreDWGc::Dwg_Header_Variables_DIMLUNIT_get;
*swig_DIMLUNIT_set = *LibreDWGc::Dwg_Header_Variables_DIMLUNIT_set;
*swig_DIMDSEP_get = *LibreDWGc::Dwg_Header_Variables_DIMDSEP_get;
*swig_DIMDSEP_set = *LibreDWGc::Dwg_Header_Variables_DIMDSEP_set;
*swig_DIMTMOVE_get = *LibreDWGc::Dwg_Header_Variables_DIMTMOVE_get;
*swig_DIMTMOVE_set = *LibreDWGc::Dwg_Header_Variables_DIMTMOVE_set;
*swig_DIMALTZ_get = *LibreDWGc::Dwg_Header_Variables_DIMALTZ_get;
*swig_DIMALTZ_set = *LibreDWGc::Dwg_Header_Variables_DIMALTZ_set;
*swig_DIMALTTZ_get = *LibreDWGc::Dwg_Header_Variables_DIMALTTZ_get;
*swig_DIMALTTZ_set = *LibreDWGc::Dwg_Header_Variables_DIMALTTZ_set;
*swig_DIMATFIT_get = *LibreDWGc::Dwg_Header_Variables_DIMATFIT_get;
*swig_DIMATFIT_set = *LibreDWGc::Dwg_Header_Variables_DIMATFIT_set;
*swig_DIMFXLON_get = *LibreDWGc::Dwg_Header_Variables_DIMFXLON_get;
*swig_DIMFXLON_set = *LibreDWGc::Dwg_Header_Variables_DIMFXLON_set;
*swig_DIMTXTDIRECTION_get = *LibreDWGc::Dwg_Header_Variables_DIMTXTDIRECTION_get;
*swig_DIMTXTDIRECTION_set = *LibreDWGc::Dwg_Header_Variables_DIMTXTDIRECTION_set;
*swig_DIMALTMZF_get = *LibreDWGc::Dwg_Header_Variables_DIMALTMZF_get;
*swig_DIMALTMZF_set = *LibreDWGc::Dwg_Header_Variables_DIMALTMZF_set;
*swig_DIMALTMZS_get = *LibreDWGc::Dwg_Header_Variables_DIMALTMZS_get;
*swig_DIMALTMZS_set = *LibreDWGc::Dwg_Header_Variables_DIMALTMZS_set;
*swig_DIMMZF_get = *LibreDWGc::Dwg_Header_Variables_DIMMZF_get;
*swig_DIMMZF_set = *LibreDWGc::Dwg_Header_Variables_DIMMZF_set;
*swig_DIMMZS_get = *LibreDWGc::Dwg_Header_Variables_DIMMZS_get;
*swig_DIMMZS_set = *LibreDWGc::Dwg_Header_Variables_DIMMZS_set;
*swig_DIMLDRBLK_get = *LibreDWGc::Dwg_Header_Variables_DIMLDRBLK_get;
*swig_DIMLDRBLK_set = *LibreDWGc::Dwg_Header_Variables_DIMLDRBLK_set;
*swig_DIMBLK_get = *LibreDWGc::Dwg_Header_Variables_DIMBLK_get;
*swig_DIMBLK_set = *LibreDWGc::Dwg_Header_Variables_DIMBLK_set;
*swig_DIMBLK1_get = *LibreDWGc::Dwg_Header_Variables_DIMBLK1_get;
*swig_DIMBLK1_set = *LibreDWGc::Dwg_Header_Variables_DIMBLK1_set;
*swig_DIMBLK2_get = *LibreDWGc::Dwg_Header_Variables_DIMBLK2_get;
*swig_DIMBLK2_set = *LibreDWGc::Dwg_Header_Variables_DIMBLK2_set;
*swig_DIMLTYPE_get = *LibreDWGc::Dwg_Header_Variables_DIMLTYPE_get;
*swig_DIMLTYPE_set = *LibreDWGc::Dwg_Header_Variables_DIMLTYPE_set;
*swig_DIMLTEX1_get = *LibreDWGc::Dwg_Header_Variables_DIMLTEX1_get;
*swig_DIMLTEX1_set = *LibreDWGc::Dwg_Header_Variables_DIMLTEX1_set;
*swig_DIMLTEX2_get = *LibreDWGc::Dwg_Header_Variables_DIMLTEX2_get;
*swig_DIMLTEX2_set = *LibreDWGc::Dwg_Header_Variables_DIMLTEX2_set;
*swig_DIMLWD_get = *LibreDWGc::Dwg_Header_Variables_DIMLWD_get;
*swig_DIMLWD_set = *LibreDWGc::Dwg_Header_Variables_DIMLWD_set;
*swig_DIMLWE_get = *LibreDWGc::Dwg_Header_Variables_DIMLWE_get;
*swig_DIMLWE_set = *LibreDWGc::Dwg_Header_Variables_DIMLWE_set;
*swig_BLOCK_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_BLOCK_CONTROL_OBJECT_get;
*swig_BLOCK_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_BLOCK_CONTROL_OBJECT_set;
*swig_LAYER_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_LAYER_CONTROL_OBJECT_get;
*swig_LAYER_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_LAYER_CONTROL_OBJECT_set;
*swig_STYLE_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_STYLE_CONTROL_OBJECT_get;
*swig_STYLE_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_STYLE_CONTROL_OBJECT_set;
*swig_LINETYPE_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_LINETYPE_CONTROL_OBJECT_get;
*swig_LINETYPE_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_LINETYPE_CONTROL_OBJECT_set;
*swig_VIEW_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_VIEW_CONTROL_OBJECT_get;
*swig_VIEW_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_VIEW_CONTROL_OBJECT_set;
*swig_UCS_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_UCS_CONTROL_OBJECT_get;
*swig_UCS_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_UCS_CONTROL_OBJECT_set;
*swig_VPORT_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_VPORT_CONTROL_OBJECT_get;
*swig_VPORT_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_VPORT_CONTROL_OBJECT_set;
*swig_APPID_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_APPID_CONTROL_OBJECT_get;
*swig_APPID_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_APPID_CONTROL_OBJECT_set;
*swig_DIMSTYLE_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_DIMSTYLE_CONTROL_OBJECT_get;
*swig_DIMSTYLE_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_DIMSTYLE_CONTROL_OBJECT_set;
*swig_VPORT_ENTITY_CONTROL_OBJECT_get = *LibreDWGc::Dwg_Header_Variables_VPORT_ENTITY_CONTROL_OBJECT_get;
*swig_VPORT_ENTITY_CONTROL_OBJECT_set = *LibreDWGc::Dwg_Header_Variables_VPORT_ENTITY_CONTROL_OBJECT_set;
*swig_DICTIONARY_ACAD_GROUP_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_ACAD_GROUP_get;
*swig_DICTIONARY_ACAD_GROUP_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_ACAD_GROUP_set;
*swig_DICTIONARY_ACAD_MLINESTYLE_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_ACAD_MLINESTYLE_get;
*swig_DICTIONARY_ACAD_MLINESTYLE_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_ACAD_MLINESTYLE_set;
*swig_DICTIONARY_NAMED_OBJECTS_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_NAMED_OBJECTS_get;
*swig_DICTIONARY_NAMED_OBJECTS_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_NAMED_OBJECTS_set;
*swig_TSTACKALIGN_get = *LibreDWGc::Dwg_Header_Variables_TSTACKALIGN_get;
*swig_TSTACKALIGN_set = *LibreDWGc::Dwg_Header_Variables_TSTACKALIGN_set;
*swig_TSTACKSIZE_get = *LibreDWGc::Dwg_Header_Variables_TSTACKSIZE_get;
*swig_TSTACKSIZE_set = *LibreDWGc::Dwg_Header_Variables_TSTACKSIZE_set;
*swig_HYPERLINKBASE_get = *LibreDWGc::Dwg_Header_Variables_HYPERLINKBASE_get;
*swig_HYPERLINKBASE_set = *LibreDWGc::Dwg_Header_Variables_HYPERLINKBASE_set;
*swig_STYLESHEET_get = *LibreDWGc::Dwg_Header_Variables_STYLESHEET_get;
*swig_STYLESHEET_set = *LibreDWGc::Dwg_Header_Variables_STYLESHEET_set;
*swig_DICTIONARY_LAYOUTS_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_LAYOUTS_get;
*swig_DICTIONARY_LAYOUTS_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_LAYOUTS_set;
*swig_DICTIONARY_PLOTSETTINGS_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_PLOTSETTINGS_get;
*swig_DICTIONARY_PLOTSETTINGS_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_PLOTSETTINGS_set;
*swig_DICTIONARY_PLOTSTYLES_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_PLOTSTYLES_get;
*swig_DICTIONARY_PLOTSTYLES_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_PLOTSTYLES_set;
*swig_DICTIONARY_MATERIALS_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_MATERIALS_get;
*swig_DICTIONARY_MATERIALS_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_MATERIALS_set;
*swig_DICTIONARY_COLORS_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_COLORS_get;
*swig_DICTIONARY_COLORS_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_COLORS_set;
*swig_DICTIONARY_VISUALSTYLE_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_VISUALSTYLE_get;
*swig_DICTIONARY_VISUALSTYLE_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_VISUALSTYLE_set;
*swig_DICTIONARY_LIGHTLIST_get = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_LIGHTLIST_get;
*swig_DICTIONARY_LIGHTLIST_set = *LibreDWGc::Dwg_Header_Variables_DICTIONARY_LIGHTLIST_set;
*swig_unknown_20_get = *LibreDWGc::Dwg_Header_Variables_unknown_20_get;
*swig_unknown_20_set = *LibreDWGc::Dwg_Header_Variables_unknown_20_set;
*swig_FLAGS_get = *LibreDWGc::Dwg_Header_Variables_FLAGS_get;
*swig_FLAGS_set = *LibreDWGc::Dwg_Header_Variables_FLAGS_set;
*swig_CELWEIGHT_get = *LibreDWGc::Dwg_Header_Variables_CELWEIGHT_get;
*swig_CELWEIGHT_set = *LibreDWGc::Dwg_Header_Variables_CELWEIGHT_set;
*swig_ENDCAPS_get = *LibreDWGc::Dwg_Header_Variables_ENDCAPS_get;
*swig_ENDCAPS_set = *LibreDWGc::Dwg_Header_Variables_ENDCAPS_set;
*swig_JOINSTYLE_get = *LibreDWGc::Dwg_Header_Variables_JOINSTYLE_get;
*swig_JOINSTYLE_set = *LibreDWGc::Dwg_Header_Variables_JOINSTYLE_set;
*swig_LWDISPLAY_get = *LibreDWGc::Dwg_Header_Variables_LWDISPLAY_get;
*swig_LWDISPLAY_set = *LibreDWGc::Dwg_Header_Variables_LWDISPLAY_set;
*swig_XEDIT_get = *LibreDWGc::Dwg_Header_Variables_XEDIT_get;
*swig_XEDIT_set = *LibreDWGc::Dwg_Header_Variables_XEDIT_set;
*swig_EXTNAMES_get = *LibreDWGc::Dwg_Header_Variables_EXTNAMES_get;
*swig_EXTNAMES_set = *LibreDWGc::Dwg_Header_Variables_EXTNAMES_set;
*swig_PSTYLEMODE_get = *LibreDWGc::Dwg_Header_Variables_PSTYLEMODE_get;
*swig_PSTYLEMODE_set = *LibreDWGc::Dwg_Header_Variables_PSTYLEMODE_set;
*swig_OLESTARTUP_get = *LibreDWGc::Dwg_Header_Variables_OLESTARTUP_get;
*swig_OLESTARTUP_set = *LibreDWGc::Dwg_Header_Variables_OLESTARTUP_set;
*swig_INSUNITS_get = *LibreDWGc::Dwg_Header_Variables_INSUNITS_get;
*swig_INSUNITS_set = *LibreDWGc::Dwg_Header_Variables_INSUNITS_set;
*swig_CEPSNTYPE_get = *LibreDWGc::Dwg_Header_Variables_CEPSNTYPE_get;
*swig_CEPSNTYPE_set = *LibreDWGc::Dwg_Header_Variables_CEPSNTYPE_set;
*swig_CPSNID_get = *LibreDWGc::Dwg_Header_Variables_CPSNID_get;
*swig_CPSNID_set = *LibreDWGc::Dwg_Header_Variables_CPSNID_set;
*swig_FINGERPRINTGUID_get = *LibreDWGc::Dwg_Header_Variables_FINGERPRINTGUID_get;
*swig_FINGERPRINTGUID_set = *LibreDWGc::Dwg_Header_Variables_FINGERPRINTGUID_set;
*swig_VERSIONGUID_get = *LibreDWGc::Dwg_Header_Variables_VERSIONGUID_get;
*swig_VERSIONGUID_set = *LibreDWGc::Dwg_Header_Variables_VERSIONGUID_set;
*swig_SORTENTS_get = *LibreDWGc::Dwg_Header_Variables_SORTENTS_get;
*swig_SORTENTS_set = *LibreDWGc::Dwg_Header_Variables_SORTENTS_set;
*swig_INDEXCTL_get = *LibreDWGc::Dwg_Header_Variables_INDEXCTL_get;
*swig_INDEXCTL_set = *LibreDWGc::Dwg_Header_Variables_INDEXCTL_set;
*swig_HIDETEXT_get = *LibreDWGc::Dwg_Header_Variables_HIDETEXT_get;
*swig_HIDETEXT_set = *LibreDWGc::Dwg_Header_Variables_HIDETEXT_set;
*swig_XCLIPFRAME_get = *LibreDWGc::Dwg_Header_Variables_XCLIPFRAME_get;
*swig_XCLIPFRAME_set = *LibreDWGc::Dwg_Header_Variables_XCLIPFRAME_set;
*swig_DIMASSOC_get = *LibreDWGc::Dwg_Header_Variables_DIMASSOC_get;
*swig_DIMASSOC_set = *LibreDWGc::Dwg_Header_Variables_DIMASSOC_set;
*swig_HALOGAP_get = *LibreDWGc::Dwg_Header_Variables_HALOGAP_get;
*swig_HALOGAP_set = *LibreDWGc::Dwg_Header_Variables_HALOGAP_set;
*swig_OBSCOLOR_get = *LibreDWGc::Dwg_Header_Variables_OBSCOLOR_get;
*swig_OBSCOLOR_set = *LibreDWGc::Dwg_Header_Variables_OBSCOLOR_set;
*swig_INTERSECTIONCOLOR_get = *LibreDWGc::Dwg_Header_Variables_INTERSECTIONCOLOR_get;
*swig_INTERSECTIONCOLOR_set = *LibreDWGc::Dwg_Header_Variables_INTERSECTIONCOLOR_set;
*swig_OBSLTYPE_get = *LibreDWGc::Dwg_Header_Variables_OBSLTYPE_get;
*swig_OBSLTYPE_set = *LibreDWGc::Dwg_Header_Variables_OBSLTYPE_set;
*swig_INTERSECTIONDISPLAY_get = *LibreDWGc::Dwg_Header_Variables_INTERSECTIONDISPLAY_get;
*swig_INTERSECTIONDISPLAY_set = *LibreDWGc::Dwg_Header_Variables_INTERSECTIONDISPLAY_set;
*swig_PROJECTNAME_get = *LibreDWGc::Dwg_Header_Variables_PROJECTNAME_get;
*swig_PROJECTNAME_set = *LibreDWGc::Dwg_Header_Variables_PROJECTNAME_set;
*swig_BLOCK_RECORD_PSPACE_get = *LibreDWGc::Dwg_Header_Variables_BLOCK_RECORD_PSPACE_get;
*swig_BLOCK_RECORD_PSPACE_set = *LibreDWGc::Dwg_Header_Variables_BLOCK_RECORD_PSPACE_set;
*swig_BLOCK_RECORD_MSPACE_get = *LibreDWGc::Dwg_Header_Variables_BLOCK_RECORD_MSPACE_get;
*swig_BLOCK_RECORD_MSPACE_set = *LibreDWGc::Dwg_Header_Variables_BLOCK_RECORD_MSPACE_set;
*swig_LTYPE_BYLAYER_get = *LibreDWGc::Dwg_Header_Variables_LTYPE_BYLAYER_get;
*swig_LTYPE_BYLAYER_set = *LibreDWGc::Dwg_Header_Variables_LTYPE_BYLAYER_set;
*swig_LTYPE_BYBLOCK_get = *LibreDWGc::Dwg_Header_Variables_LTYPE_BYBLOCK_get;
*swig_LTYPE_BYBLOCK_set = *LibreDWGc::Dwg_Header_Variables_LTYPE_BYBLOCK_set;
*swig_LTYPE_CONTINUOUS_get = *LibreDWGc::Dwg_Header_Variables_LTYPE_CONTINUOUS_get;
*swig_LTYPE_CONTINUOUS_set = *LibreDWGc::Dwg_Header_Variables_LTYPE_CONTINUOUS_set;
*swig_CAMERADISPLAY_get = *LibreDWGc::Dwg_Header_Variables_CAMERADISPLAY_get;
*swig_CAMERADISPLAY_set = *LibreDWGc::Dwg_Header_Variables_CAMERADISPLAY_set;
*swig_unknown_21_get = *LibreDWGc::Dwg_Header_Variables_unknown_21_get;
*swig_unknown_21_set = *LibreDWGc::Dwg_Header_Variables_unknown_21_set;
*swig_unknown_22_get = *LibreDWGc::Dwg_Header_Variables_unknown_22_get;
*swig_unknown_22_set = *LibreDWGc::Dwg_Header_Variables_unknown_22_set;
*swig_unknown_23_get = *LibreDWGc::Dwg_Header_Variables_unknown_23_get;
*swig_unknown_23_set = *LibreDWGc::Dwg_Header_Variables_unknown_23_set;
*swig_STEPSPERSEC_get = *LibreDWGc::Dwg_Header_Variables_STEPSPERSEC_get;
*swig_STEPSPERSEC_set = *LibreDWGc::Dwg_Header_Variables_STEPSPERSEC_set;
*swig_STEPSIZE_get = *LibreDWGc::Dwg_Header_Variables_STEPSIZE_get;
*swig_STEPSIZE_set = *LibreDWGc::Dwg_Header_Variables_STEPSIZE_set;
*swig__3DDWFPREC_get = *LibreDWGc::Dwg_Header_Variables__3DDWFPREC_get;
*swig__3DDWFPREC_set = *LibreDWGc::Dwg_Header_Variables__3DDWFPREC_set;
*swig_LENSLENGTH_get = *LibreDWGc::Dwg_Header_Variables_LENSLENGTH_get;
*swig_LENSLENGTH_set = *LibreDWGc::Dwg_Header_Variables_LENSLENGTH_set;
*swig_CAMERAHEIGHT_get = *LibreDWGc::Dwg_Header_Variables_CAMERAHEIGHT_get;
*swig_CAMERAHEIGHT_set = *LibreDWGc::Dwg_Header_Variables_CAMERAHEIGHT_set;
*swig_SOLIDHIST_get = *LibreDWGc::Dwg_Header_Variables_SOLIDHIST_get;
*swig_SOLIDHIST_set = *LibreDWGc::Dwg_Header_Variables_SOLIDHIST_set;
*swig_SHOWHIST_get = *LibreDWGc::Dwg_Header_Variables_SHOWHIST_get;
*swig_SHOWHIST_set = *LibreDWGc::Dwg_Header_Variables_SHOWHIST_set;
*swig_PSOLWIDTH_get = *LibreDWGc::Dwg_Header_Variables_PSOLWIDTH_get;
*swig_PSOLWIDTH_set = *LibreDWGc::Dwg_Header_Variables_PSOLWIDTH_set;
*swig_PSOLHEIGHT_get = *LibreDWGc::Dwg_Header_Variables_PSOLHEIGHT_get;
*swig_PSOLHEIGHT_set = *LibreDWGc::Dwg_Header_Variables_PSOLHEIGHT_set;
*swig_LOFTANG1_get = *LibreDWGc::Dwg_Header_Variables_LOFTANG1_get;
*swig_LOFTANG1_set = *LibreDWGc::Dwg_Header_Variables_LOFTANG1_set;
*swig_LOFTANG2_get = *LibreDWGc::Dwg_Header_Variables_LOFTANG2_get;
*swig_LOFTANG2_set = *LibreDWGc::Dwg_Header_Variables_LOFTANG2_set;
*swig_LOFTMAG1_get = *LibreDWGc::Dwg_Header_Variables_LOFTMAG1_get;
*swig_LOFTMAG1_set = *LibreDWGc::Dwg_Header_Variables_LOFTMAG1_set;
*swig_LOFTMAG2_get = *LibreDWGc::Dwg_Header_Variables_LOFTMAG2_get;
*swig_LOFTMAG2_set = *LibreDWGc::Dwg_Header_Variables_LOFTMAG2_set;
*swig_LOFTPARAM_get = *LibreDWGc::Dwg_Header_Variables_LOFTPARAM_get;
*swig_LOFTPARAM_set = *LibreDWGc::Dwg_Header_Variables_LOFTPARAM_set;
*swig_LOFTNORMALS_get = *LibreDWGc::Dwg_Header_Variables_LOFTNORMALS_get;
*swig_LOFTNORMALS_set = *LibreDWGc::Dwg_Header_Variables_LOFTNORMALS_set;
*swig_LATITUDE_get = *LibreDWGc::Dwg_Header_Variables_LATITUDE_get;
*swig_LATITUDE_set = *LibreDWGc::Dwg_Header_Variables_LATITUDE_set;
*swig_LONGITUDE_get = *LibreDWGc::Dwg_Header_Variables_LONGITUDE_get;
*swig_LONGITUDE_set = *LibreDWGc::Dwg_Header_Variables_LONGITUDE_set;
*swig_NORTHDIRECTION_get = *LibreDWGc::Dwg_Header_Variables_NORTHDIRECTION_get;
*swig_NORTHDIRECTION_set = *LibreDWGc::Dwg_Header_Variables_NORTHDIRECTION_set;
*swig_TIMEZONE_get = *LibreDWGc::Dwg_Header_Variables_TIMEZONE_get;
*swig_TIMEZONE_set = *LibreDWGc::Dwg_Header_Variables_TIMEZONE_set;
*swig_LIGHTGLYPHDISPLAY_get = *LibreDWGc::Dwg_Header_Variables_LIGHTGLYPHDISPLAY_get;
*swig_LIGHTGLYPHDISPLAY_set = *LibreDWGc::Dwg_Header_Variables_LIGHTGLYPHDISPLAY_set;
*swig_TILEMODELIGHTSYNCH_get = *LibreDWGc::Dwg_Header_Variables_TILEMODELIGHTSYNCH_get;
*swig_TILEMODELIGHTSYNCH_set = *LibreDWGc::Dwg_Header_Variables_TILEMODELIGHTSYNCH_set;
*swig_DWFFRAME_get = *LibreDWGc::Dwg_Header_Variables_DWFFRAME_get;
*swig_DWFFRAME_set = *LibreDWGc::Dwg_Header_Variables_DWFFRAME_set;
*swig_DGNFRAME_get = *LibreDWGc::Dwg_Header_Variables_DGNFRAME_get;
*swig_DGNFRAME_set = *LibreDWGc::Dwg_Header_Variables_DGNFRAME_set;
*swig_REALWORLDSCALE_get = *LibreDWGc::Dwg_Header_Variables_REALWORLDSCALE_get;
*swig_REALWORLDSCALE_set = *LibreDWGc::Dwg_Header_Variables_REALWORLDSCALE_set;
*swig_INTERFERECOLOR_get = *LibreDWGc::Dwg_Header_Variables_INTERFERECOLOR_get;
*swig_INTERFERECOLOR_set = *LibreDWGc::Dwg_Header_Variables_INTERFERECOLOR_set;
*swig_INTERFEREOBJVS_get = *LibreDWGc::Dwg_Header_Variables_INTERFEREOBJVS_get;
*swig_INTERFEREOBJVS_set = *LibreDWGc::Dwg_Header_Variables_INTERFEREOBJVS_set;
*swig_INTERFEREVPVS_get = *LibreDWGc::Dwg_Header_Variables_INTERFEREVPVS_get;
*swig_INTERFEREVPVS_set = *LibreDWGc::Dwg_Header_Variables_INTERFEREVPVS_set;
*swig_DRAGVS_get = *LibreDWGc::Dwg_Header_Variables_DRAGVS_get;
*swig_DRAGVS_set = *LibreDWGc::Dwg_Header_Variables_DRAGVS_set;
*swig_CSHADOW_get = *LibreDWGc::Dwg_Header_Variables_CSHADOW_get;
*swig_CSHADOW_set = *LibreDWGc::Dwg_Header_Variables_CSHADOW_set;
*swig_SHADOWPLANELOCATION_get = *LibreDWGc::Dwg_Header_Variables_SHADOWPLANELOCATION_get;
*swig_SHADOWPLANELOCATION_set = *LibreDWGc::Dwg_Header_Variables_SHADOWPLANELOCATION_set;
*swig_unknown_54_get = *LibreDWGc::Dwg_Header_Variables_unknown_54_get;
*swig_unknown_54_set = *LibreDWGc::Dwg_Header_Variables_unknown_54_set;
*swig_unknown_55_get = *LibreDWGc::Dwg_Header_Variables_unknown_55_get;
*swig_unknown_55_set = *LibreDWGc::Dwg_Header_Variables_unknown_55_set;
*swig_unknown_56_get = *LibreDWGc::Dwg_Header_Variables_unknown_56_get;
*swig_unknown_56_set = *LibreDWGc::Dwg_Header_Variables_unknown_56_set;
*swig_unknown_57_get = *LibreDWGc::Dwg_Header_Variables_unknown_57_get;
*swig_unknown_57_set = *LibreDWGc::Dwg_Header_Variables_unknown_57_set;
*swig_crc_get = *LibreDWGc::Dwg_Header_Variables_crc_get;
*swig_crc_set = *LibreDWGc::Dwg_Header_Variables_crc_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Header_Variables(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Header_Variables($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_TEXT ##############

package LibreDWG::Dwg_Entity_TEXT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_TEXT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_TEXT_parent_set;
*swig_dataflags_get = *LibreDWGc::Dwg_Entity_TEXT_dataflags_get;
*swig_dataflags_set = *LibreDWGc::Dwg_Entity_TEXT_dataflags_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_TEXT_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_TEXT_elevation_set;
*swig_insertion_pt_get = *LibreDWGc::Dwg_Entity_TEXT_insertion_pt_get;
*swig_insertion_pt_set = *LibreDWGc::Dwg_Entity_TEXT_insertion_pt_set;
*swig_alignment_pt_get = *LibreDWGc::Dwg_Entity_TEXT_alignment_pt_get;
*swig_alignment_pt_set = *LibreDWGc::Dwg_Entity_TEXT_alignment_pt_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_TEXT_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_TEXT_extrusion_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_TEXT_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_TEXT_thickness_set;
*swig_oblique_ang_get = *LibreDWGc::Dwg_Entity_TEXT_oblique_ang_get;
*swig_oblique_ang_set = *LibreDWGc::Dwg_Entity_TEXT_oblique_ang_set;
*swig_rotation_get = *LibreDWGc::Dwg_Entity_TEXT_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_Entity_TEXT_rotation_set;
*swig_height_get = *LibreDWGc::Dwg_Entity_TEXT_height_get;
*swig_height_set = *LibreDWGc::Dwg_Entity_TEXT_height_set;
*swig_width_factor_get = *LibreDWGc::Dwg_Entity_TEXT_width_factor_get;
*swig_width_factor_set = *LibreDWGc::Dwg_Entity_TEXT_width_factor_set;
*swig_text_value_get = *LibreDWGc::Dwg_Entity_TEXT_text_value_get;
*swig_text_value_set = *LibreDWGc::Dwg_Entity_TEXT_text_value_set;
*swig_generation_get = *LibreDWGc::Dwg_Entity_TEXT_generation_get;
*swig_generation_set = *LibreDWGc::Dwg_Entity_TEXT_generation_set;
*swig_horiz_alignment_get = *LibreDWGc::Dwg_Entity_TEXT_horiz_alignment_get;
*swig_horiz_alignment_set = *LibreDWGc::Dwg_Entity_TEXT_horiz_alignment_set;
*swig_vert_alignment_get = *LibreDWGc::Dwg_Entity_TEXT_vert_alignment_get;
*swig_vert_alignment_set = *LibreDWGc::Dwg_Entity_TEXT_vert_alignment_set;
*swig_style_get = *LibreDWGc::Dwg_Entity_TEXT_style_get;
*swig_style_set = *LibreDWGc::Dwg_Entity_TEXT_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_TEXT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_TEXT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_ATTRIB ##############

package LibreDWG::Dwg_Entity_ATTRIB;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_ATTRIB_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_ATTRIB_parent_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_ATTRIB_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_ATTRIB_elevation_set;
*swig_insertion_pt_get = *LibreDWGc::Dwg_Entity_ATTRIB_insertion_pt_get;
*swig_insertion_pt_set = *LibreDWGc::Dwg_Entity_ATTRIB_insertion_pt_set;
*swig_alignment_pt_get = *LibreDWGc::Dwg_Entity_ATTRIB_alignment_pt_get;
*swig_alignment_pt_set = *LibreDWGc::Dwg_Entity_ATTRIB_alignment_pt_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_ATTRIB_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_ATTRIB_extrusion_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_ATTRIB_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_ATTRIB_thickness_set;
*swig_oblique_ang_get = *LibreDWGc::Dwg_Entity_ATTRIB_oblique_ang_get;
*swig_oblique_ang_set = *LibreDWGc::Dwg_Entity_ATTRIB_oblique_ang_set;
*swig_rotation_get = *LibreDWGc::Dwg_Entity_ATTRIB_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_Entity_ATTRIB_rotation_set;
*swig_height_get = *LibreDWGc::Dwg_Entity_ATTRIB_height_get;
*swig_height_set = *LibreDWGc::Dwg_Entity_ATTRIB_height_set;
*swig_width_factor_get = *LibreDWGc::Dwg_Entity_ATTRIB_width_factor_get;
*swig_width_factor_set = *LibreDWGc::Dwg_Entity_ATTRIB_width_factor_set;
*swig_text_value_get = *LibreDWGc::Dwg_Entity_ATTRIB_text_value_get;
*swig_text_value_set = *LibreDWGc::Dwg_Entity_ATTRIB_text_value_set;
*swig_generation_get = *LibreDWGc::Dwg_Entity_ATTRIB_generation_get;
*swig_generation_set = *LibreDWGc::Dwg_Entity_ATTRIB_generation_set;
*swig_horiz_alignment_get = *LibreDWGc::Dwg_Entity_ATTRIB_horiz_alignment_get;
*swig_horiz_alignment_set = *LibreDWGc::Dwg_Entity_ATTRIB_horiz_alignment_set;
*swig_vert_alignment_get = *LibreDWGc::Dwg_Entity_ATTRIB_vert_alignment_get;
*swig_vert_alignment_set = *LibreDWGc::Dwg_Entity_ATTRIB_vert_alignment_set;
*swig_dataflags_get = *LibreDWGc::Dwg_Entity_ATTRIB_dataflags_get;
*swig_dataflags_set = *LibreDWGc::Dwg_Entity_ATTRIB_dataflags_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_ATTRIB_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_ATTRIB_class_version_set;
*swig_type_get = *LibreDWGc::Dwg_Entity_ATTRIB_type_get;
*swig_type_set = *LibreDWGc::Dwg_Entity_ATTRIB_type_set;
*swig_tag_get = *LibreDWGc::Dwg_Entity_ATTRIB_tag_get;
*swig_tag_set = *LibreDWGc::Dwg_Entity_ATTRIB_tag_set;
*swig_field_length_get = *LibreDWGc::Dwg_Entity_ATTRIB_field_length_get;
*swig_field_length_set = *LibreDWGc::Dwg_Entity_ATTRIB_field_length_set;
*swig_flags_get = *LibreDWGc::Dwg_Entity_ATTRIB_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_Entity_ATTRIB_flags_set;
*swig_lock_position_flag_get = *LibreDWGc::Dwg_Entity_ATTRIB_lock_position_flag_get;
*swig_lock_position_flag_set = *LibreDWGc::Dwg_Entity_ATTRIB_lock_position_flag_set;
*swig_style_get = *LibreDWGc::Dwg_Entity_ATTRIB_style_get;
*swig_style_set = *LibreDWGc::Dwg_Entity_ATTRIB_style_set;
*swig_mtext_handles_get = *LibreDWGc::Dwg_Entity_ATTRIB_mtext_handles_get;
*swig_mtext_handles_set = *LibreDWGc::Dwg_Entity_ATTRIB_mtext_handles_set;
*swig_annotative_data_size_get = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_data_size_get;
*swig_annotative_data_size_set = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_data_size_set;
*swig_annotative_data_bytes_get = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_data_bytes_get;
*swig_annotative_data_bytes_set = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_data_bytes_set;
*swig_annotative_app_get = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_app_get;
*swig_annotative_app_set = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_app_set;
*swig_annotative_short_get = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_short_get;
*swig_annotative_short_set = *LibreDWGc::Dwg_Entity_ATTRIB_annotative_short_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_ATTRIB(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_ATTRIB($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_ATTDEF ##############

package LibreDWG::Dwg_Entity_ATTDEF;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_ATTDEF_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_ATTDEF_parent_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_ATTDEF_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_ATTDEF_elevation_set;
*swig_insertion_pt_get = *LibreDWGc::Dwg_Entity_ATTDEF_insertion_pt_get;
*swig_insertion_pt_set = *LibreDWGc::Dwg_Entity_ATTDEF_insertion_pt_set;
*swig_alignment_pt_get = *LibreDWGc::Dwg_Entity_ATTDEF_alignment_pt_get;
*swig_alignment_pt_set = *LibreDWGc::Dwg_Entity_ATTDEF_alignment_pt_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_ATTDEF_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_ATTDEF_extrusion_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_ATTDEF_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_ATTDEF_thickness_set;
*swig_oblique_ang_get = *LibreDWGc::Dwg_Entity_ATTDEF_oblique_ang_get;
*swig_oblique_ang_set = *LibreDWGc::Dwg_Entity_ATTDEF_oblique_ang_set;
*swig_rotation_get = *LibreDWGc::Dwg_Entity_ATTDEF_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_Entity_ATTDEF_rotation_set;
*swig_height_get = *LibreDWGc::Dwg_Entity_ATTDEF_height_get;
*swig_height_set = *LibreDWGc::Dwg_Entity_ATTDEF_height_set;
*swig_width_factor_get = *LibreDWGc::Dwg_Entity_ATTDEF_width_factor_get;
*swig_width_factor_set = *LibreDWGc::Dwg_Entity_ATTDEF_width_factor_set;
*swig_default_value_get = *LibreDWGc::Dwg_Entity_ATTDEF_default_value_get;
*swig_default_value_set = *LibreDWGc::Dwg_Entity_ATTDEF_default_value_set;
*swig_generation_get = *LibreDWGc::Dwg_Entity_ATTDEF_generation_get;
*swig_generation_set = *LibreDWGc::Dwg_Entity_ATTDEF_generation_set;
*swig_horiz_alignment_get = *LibreDWGc::Dwg_Entity_ATTDEF_horiz_alignment_get;
*swig_horiz_alignment_set = *LibreDWGc::Dwg_Entity_ATTDEF_horiz_alignment_set;
*swig_vert_alignment_get = *LibreDWGc::Dwg_Entity_ATTDEF_vert_alignment_get;
*swig_vert_alignment_set = *LibreDWGc::Dwg_Entity_ATTDEF_vert_alignment_set;
*swig_dataflags_get = *LibreDWGc::Dwg_Entity_ATTDEF_dataflags_get;
*swig_dataflags_set = *LibreDWGc::Dwg_Entity_ATTDEF_dataflags_set;
*swig_tag_get = *LibreDWGc::Dwg_Entity_ATTDEF_tag_get;
*swig_tag_set = *LibreDWGc::Dwg_Entity_ATTDEF_tag_set;
*swig_field_length_get = *LibreDWGc::Dwg_Entity_ATTDEF_field_length_get;
*swig_field_length_set = *LibreDWGc::Dwg_Entity_ATTDEF_field_length_set;
*swig_flags_get = *LibreDWGc::Dwg_Entity_ATTDEF_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_Entity_ATTDEF_flags_set;
*swig_lock_position_flag_get = *LibreDWGc::Dwg_Entity_ATTDEF_lock_position_flag_get;
*swig_lock_position_flag_set = *LibreDWGc::Dwg_Entity_ATTDEF_lock_position_flag_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_ATTDEF_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_ATTDEF_class_version_set;
*swig_prompt_get = *LibreDWGc::Dwg_Entity_ATTDEF_prompt_get;
*swig_prompt_set = *LibreDWGc::Dwg_Entity_ATTDEF_prompt_set;
*swig_style_get = *LibreDWGc::Dwg_Entity_ATTDEF_style_get;
*swig_style_set = *LibreDWGc::Dwg_Entity_ATTDEF_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_ATTDEF(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_ATTDEF($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_BLOCK ##############

package LibreDWG::Dwg_Entity_BLOCK;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_BLOCK_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_BLOCK_parent_set;
*swig_name_get = *LibreDWGc::Dwg_Entity_BLOCK_name_get;
*swig_name_set = *LibreDWGc::Dwg_Entity_BLOCK_name_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_BLOCK(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_BLOCK($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_ENDBLK ##############

package LibreDWG::Dwg_Entity_ENDBLK;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_ENDBLK_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_ENDBLK_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_ENDBLK(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_ENDBLK($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_SEQEND ##############

package LibreDWG::Dwg_Entity_SEQEND;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_SEQEND_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_SEQEND_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_SEQEND(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_SEQEND($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_INSERT ##############

package LibreDWG::Dwg_Entity_INSERT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_INSERT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_INSERT_parent_set;
*swig_ins_pt_get = *LibreDWGc::Dwg_Entity_INSERT_ins_pt_get;
*swig_ins_pt_set = *LibreDWGc::Dwg_Entity_INSERT_ins_pt_set;
*swig_scale_flag_get = *LibreDWGc::Dwg_Entity_INSERT_scale_flag_get;
*swig_scale_flag_set = *LibreDWGc::Dwg_Entity_INSERT_scale_flag_set;
*swig_scale_get = *LibreDWGc::Dwg_Entity_INSERT_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_Entity_INSERT_scale_set;
*swig_rotation_get = *LibreDWGc::Dwg_Entity_INSERT_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_Entity_INSERT_rotation_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_INSERT_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_INSERT_extrusion_set;
*swig_has_attribs_get = *LibreDWGc::Dwg_Entity_INSERT_has_attribs_get;
*swig_has_attribs_set = *LibreDWGc::Dwg_Entity_INSERT_has_attribs_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Entity_INSERT_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Entity_INSERT_num_owned_set;
*swig_block_header_get = *LibreDWGc::Dwg_Entity_INSERT_block_header_get;
*swig_block_header_set = *LibreDWGc::Dwg_Entity_INSERT_block_header_set;
*swig_first_attrib_get = *LibreDWGc::Dwg_Entity_INSERT_first_attrib_get;
*swig_first_attrib_set = *LibreDWGc::Dwg_Entity_INSERT_first_attrib_set;
*swig_last_attrib_get = *LibreDWGc::Dwg_Entity_INSERT_last_attrib_get;
*swig_last_attrib_set = *LibreDWGc::Dwg_Entity_INSERT_last_attrib_set;
*swig_attrib_handles_get = *LibreDWGc::Dwg_Entity_INSERT_attrib_handles_get;
*swig_attrib_handles_set = *LibreDWGc::Dwg_Entity_INSERT_attrib_handles_set;
*swig_seqend_get = *LibreDWGc::Dwg_Entity_INSERT_seqend_get;
*swig_seqend_set = *LibreDWGc::Dwg_Entity_INSERT_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_INSERT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_INSERT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_MINSERT ##############

package LibreDWG::Dwg_Entity_MINSERT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_MINSERT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_MINSERT_parent_set;
*swig_ins_pt_get = *LibreDWGc::Dwg_Entity_MINSERT_ins_pt_get;
*swig_ins_pt_set = *LibreDWGc::Dwg_Entity_MINSERT_ins_pt_set;
*swig_scale_flag_get = *LibreDWGc::Dwg_Entity_MINSERT_scale_flag_get;
*swig_scale_flag_set = *LibreDWGc::Dwg_Entity_MINSERT_scale_flag_set;
*swig_scale_get = *LibreDWGc::Dwg_Entity_MINSERT_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_Entity_MINSERT_scale_set;
*swig_rotation_get = *LibreDWGc::Dwg_Entity_MINSERT_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_Entity_MINSERT_rotation_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_MINSERT_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_MINSERT_extrusion_set;
*swig_has_attribs_get = *LibreDWGc::Dwg_Entity_MINSERT_has_attribs_get;
*swig_has_attribs_set = *LibreDWGc::Dwg_Entity_MINSERT_has_attribs_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Entity_MINSERT_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Entity_MINSERT_num_owned_set;
*swig_numcols_get = *LibreDWGc::Dwg_Entity_MINSERT_numcols_get;
*swig_numcols_set = *LibreDWGc::Dwg_Entity_MINSERT_numcols_set;
*swig_numrows_get = *LibreDWGc::Dwg_Entity_MINSERT_numrows_get;
*swig_numrows_set = *LibreDWGc::Dwg_Entity_MINSERT_numrows_set;
*swig_col_spacing_get = *LibreDWGc::Dwg_Entity_MINSERT_col_spacing_get;
*swig_col_spacing_set = *LibreDWGc::Dwg_Entity_MINSERT_col_spacing_set;
*swig_row_spacing_get = *LibreDWGc::Dwg_Entity_MINSERT_row_spacing_get;
*swig_row_spacing_set = *LibreDWGc::Dwg_Entity_MINSERT_row_spacing_set;
*swig_block_header_get = *LibreDWGc::Dwg_Entity_MINSERT_block_header_get;
*swig_block_header_set = *LibreDWGc::Dwg_Entity_MINSERT_block_header_set;
*swig_first_attrib_get = *LibreDWGc::Dwg_Entity_MINSERT_first_attrib_get;
*swig_first_attrib_set = *LibreDWGc::Dwg_Entity_MINSERT_first_attrib_set;
*swig_last_attrib_get = *LibreDWGc::Dwg_Entity_MINSERT_last_attrib_get;
*swig_last_attrib_set = *LibreDWGc::Dwg_Entity_MINSERT_last_attrib_set;
*swig_attrib_handles_get = *LibreDWGc::Dwg_Entity_MINSERT_attrib_handles_get;
*swig_attrib_handles_set = *LibreDWGc::Dwg_Entity_MINSERT_attrib_handles_set;
*swig_seqend_get = *LibreDWGc::Dwg_Entity_MINSERT_seqend_get;
*swig_seqend_set = *LibreDWGc::Dwg_Entity_MINSERT_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_MINSERT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_MINSERT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_VERTEX_2D ##############

package LibreDWG::Dwg_Entity_VERTEX_2D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_flag_set;
*swig_point_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_point_get;
*swig_point_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_point_set;
*swig_start_width_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_start_width_get;
*swig_start_width_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_start_width_set;
*swig_end_width_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_end_width_get;
*swig_end_width_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_end_width_set;
*swig_id_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_id_get;
*swig_id_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_id_set;
*swig_bulge_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_bulge_get;
*swig_bulge_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_bulge_set;
*swig_tangent_dir_get = *LibreDWGc::Dwg_Entity_VERTEX_2D_tangent_dir_get;
*swig_tangent_dir_set = *LibreDWGc::Dwg_Entity_VERTEX_2D_tangent_dir_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_VERTEX_2D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_VERTEX_2D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_VERTEX_3D ##############

package LibreDWG::Dwg_Entity_VERTEX_3D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_VERTEX_3D_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_VERTEX_3D_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_VERTEX_3D_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_VERTEX_3D_flag_set;
*swig_point_get = *LibreDWGc::Dwg_Entity_VERTEX_3D_point_get;
*swig_point_set = *LibreDWGc::Dwg_Entity_VERTEX_3D_point_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_VERTEX_3D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_VERTEX_3D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_VERTEX_PFACE_FACE ##############

package LibreDWG::Dwg_Entity_VERTEX_PFACE_FACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_VERTEX_PFACE_FACE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_VERTEX_PFACE_FACE_parent_set;
*swig_vertind_get = *LibreDWGc::Dwg_Entity_VERTEX_PFACE_FACE_vertind_get;
*swig_vertind_set = *LibreDWGc::Dwg_Entity_VERTEX_PFACE_FACE_vertind_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_VERTEX_PFACE_FACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_VERTEX_PFACE_FACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_POLYLINE_2D ##############

package LibreDWG::Dwg_Entity_POLYLINE_2D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_flag_set;
*swig_curve_type_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_curve_type_get;
*swig_curve_type_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_curve_type_set;
*swig_start_width_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_start_width_get;
*swig_start_width_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_start_width_set;
*swig_end_width_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_end_width_get;
*swig_end_width_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_end_width_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_thickness_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_elevation_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_extrusion_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_num_owned_set;
*swig_first_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_first_vertex_get;
*swig_first_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_first_vertex_set;
*swig_last_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_last_vertex_get;
*swig_last_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_last_vertex_set;
*swig_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_vertex_get;
*swig_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_vertex_set;
*swig_seqend_get = *LibreDWGc::Dwg_Entity_POLYLINE_2D_seqend_get;
*swig_seqend_set = *LibreDWGc::Dwg_Entity_POLYLINE_2D_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_POLYLINE_2D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_POLYLINE_2D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_POLYLINE_3D ##############

package LibreDWG::Dwg_Entity_POLYLINE_3D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_flag_set;
*swig_flag2_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_flag2_get;
*swig_flag2_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_flag2_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_num_owned_set;
*swig_first_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_first_vertex_get;
*swig_first_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_first_vertex_set;
*swig_last_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_last_vertex_get;
*swig_last_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_last_vertex_set;
*swig_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_vertex_get;
*swig_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_vertex_set;
*swig_seqend_get = *LibreDWGc::Dwg_Entity_POLYLINE_3D_seqend_get;
*swig_seqend_set = *LibreDWGc::Dwg_Entity_POLYLINE_3D_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_POLYLINE_3D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_POLYLINE_3D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_ARC ##############

package LibreDWG::Dwg_Entity_ARC;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_ARC_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_ARC_parent_set;
*swig_center_get = *LibreDWGc::Dwg_Entity_ARC_center_get;
*swig_center_set = *LibreDWGc::Dwg_Entity_ARC_center_set;
*swig_radius_get = *LibreDWGc::Dwg_Entity_ARC_radius_get;
*swig_radius_set = *LibreDWGc::Dwg_Entity_ARC_radius_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_ARC_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_ARC_thickness_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_ARC_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_ARC_extrusion_set;
*swig_start_angle_get = *LibreDWGc::Dwg_Entity_ARC_start_angle_get;
*swig_start_angle_set = *LibreDWGc::Dwg_Entity_ARC_start_angle_set;
*swig_end_angle_get = *LibreDWGc::Dwg_Entity_ARC_end_angle_get;
*swig_end_angle_set = *LibreDWGc::Dwg_Entity_ARC_end_angle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_ARC(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_ARC($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_CIRCLE ##############

package LibreDWG::Dwg_Entity_CIRCLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_CIRCLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_CIRCLE_parent_set;
*swig_center_get = *LibreDWGc::Dwg_Entity_CIRCLE_center_get;
*swig_center_set = *LibreDWGc::Dwg_Entity_CIRCLE_center_set;
*swig_radius_get = *LibreDWGc::Dwg_Entity_CIRCLE_radius_get;
*swig_radius_set = *LibreDWGc::Dwg_Entity_CIRCLE_radius_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_CIRCLE_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_CIRCLE_thickness_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_CIRCLE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_CIRCLE_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_CIRCLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_CIRCLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_LINE ##############

package LibreDWG::Dwg_Entity_LINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_LINE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_LINE_parent_set;
*swig_Zs_are_zero_get = *LibreDWGc::Dwg_Entity_LINE_Zs_are_zero_get;
*swig_Zs_are_zero_set = *LibreDWGc::Dwg_Entity_LINE_Zs_are_zero_set;
*swig_start_get = *LibreDWGc::Dwg_Entity_LINE_start_get;
*swig_start_set = *LibreDWGc::Dwg_Entity_LINE_start_set;
*swig_end_get = *LibreDWGc::Dwg_Entity_LINE_end_get;
*swig_end_set = *LibreDWGc::Dwg_Entity_LINE_end_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_LINE_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_LINE_thickness_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_LINE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_LINE_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_LINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_LINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_entity_DIMENSION_common ##############

package LibreDWG::_dwg_entity_DIMENSION_common;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::_dwg_entity_DIMENSION_common_parent_get;
*swig_parent_set = *LibreDWGc::_dwg_entity_DIMENSION_common_parent_set;
*swig_class_version_get = *LibreDWGc::_dwg_entity_DIMENSION_common_class_version_get;
*swig_class_version_set = *LibreDWGc::_dwg_entity_DIMENSION_common_class_version_set;
*swig_extrusion_get = *LibreDWGc::_dwg_entity_DIMENSION_common_extrusion_get;
*swig_extrusion_set = *LibreDWGc::_dwg_entity_DIMENSION_common_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::_dwg_entity_DIMENSION_common_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::_dwg_entity_DIMENSION_common_text_midpt_set;
*swig_elevation_get = *LibreDWGc::_dwg_entity_DIMENSION_common_elevation_get;
*swig_elevation_set = *LibreDWGc::_dwg_entity_DIMENSION_common_elevation_set;
*swig_flags_1_get = *LibreDWGc::_dwg_entity_DIMENSION_common_flags_1_get;
*swig_flags_1_set = *LibreDWGc::_dwg_entity_DIMENSION_common_flags_1_set;
*swig_user_text_get = *LibreDWGc::_dwg_entity_DIMENSION_common_user_text_get;
*swig_user_text_set = *LibreDWGc::_dwg_entity_DIMENSION_common_user_text_set;
*swig_text_rot_get = *LibreDWGc::_dwg_entity_DIMENSION_common_text_rot_get;
*swig_text_rot_set = *LibreDWGc::_dwg_entity_DIMENSION_common_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::_dwg_entity_DIMENSION_common_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::_dwg_entity_DIMENSION_common_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::_dwg_entity_DIMENSION_common_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::_dwg_entity_DIMENSION_common_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::_dwg_entity_DIMENSION_common_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::_dwg_entity_DIMENSION_common_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::_dwg_entity_DIMENSION_common_attachment_get;
*swig_attachment_set = *LibreDWGc::_dwg_entity_DIMENSION_common_attachment_set;
*swig_lspace_style_get = *LibreDWGc::_dwg_entity_DIMENSION_common_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::_dwg_entity_DIMENSION_common_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::_dwg_entity_DIMENSION_common_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::_dwg_entity_DIMENSION_common_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::_dwg_entity_DIMENSION_common_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::_dwg_entity_DIMENSION_common_act_measurement_set;
*swig_unknown_get = *LibreDWGc::_dwg_entity_DIMENSION_common_unknown_get;
*swig_unknown_set = *LibreDWGc::_dwg_entity_DIMENSION_common_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::_dwg_entity_DIMENSION_common_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::_dwg_entity_DIMENSION_common_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::_dwg_entity_DIMENSION_common_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::_dwg_entity_DIMENSION_common_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::_dwg_entity_DIMENSION_common_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::_dwg_entity_DIMENSION_common_clone_ins_pt_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_entity_DIMENSION_common(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_entity_DIMENSION_common($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_DIMENSION_ORDINATE ##############

package LibreDWG::Dwg_Entity_DIMENSION_ORDINATE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_class_version_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_text_midpt_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_elevation_set;
*swig_flags_1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flags_1_get;
*swig_flags_1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flags_1_set;
*swig_user_text_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_user_text_get;
*swig_user_text_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_user_text_set;
*swig_text_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_text_rot_get;
*swig_text_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_attachment_set;
*swig_lspace_style_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_act_measurement_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_clone_ins_pt_set;
*swig_ucsorigin_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_ucsorigin_pt_get;
*swig_ucsorigin_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_ucsorigin_pt_set;
*swig_feature_location_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_feature_location_pt_get;
*swig_feature_location_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_feature_location_pt_set;
*swig_leader_endpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_leader_endpt_get;
*swig_leader_endpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_leader_endpt_set;
*swig_flags_2_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flags_2_get;
*swig_flags_2_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_flags_2_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_dimstyle_set;
*swig_block_get = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_block_get;
*swig_block_set = *LibreDWGc::Dwg_Entity_DIMENSION_ORDINATE_block_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_DIMENSION_ORDINATE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_DIMENSION_ORDINATE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_DIMENSION_LINEAR ##############

package LibreDWG::Dwg_Entity_DIMENSION_LINEAR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_class_version_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_text_midpt_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_elevation_set;
*swig_flags_1_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_flags_1_get;
*swig_flags_1_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_flags_1_set;
*swig_user_text_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_user_text_get;
*swig_user_text_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_user_text_set;
*swig_text_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_text_rot_get;
*swig_text_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_attachment_set;
*swig_lspace_style_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_act_measurement_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_clone_ins_pt_set;
*swig__13_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR__13_pt_get;
*swig__13_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR__13_pt_set;
*swig__14_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR__14_pt_get;
*swig__14_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR__14_pt_set;
*swig_def_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_def_pt_get;
*swig_def_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_def_pt_set;
*swig_ext_line_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_ext_line_rot_get;
*swig_ext_line_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_ext_line_rot_set;
*swig_dim_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_dim_rot_get;
*swig_dim_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_dim_rot_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_dimstyle_set;
*swig_block_get = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_block_get;
*swig_block_set = *LibreDWGc::Dwg_Entity_DIMENSION_LINEAR_block_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_DIMENSION_LINEAR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_DIMENSION_LINEAR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_DIMENSION_ALIGNED ##############

package LibreDWG::Dwg_Entity_DIMENSION_ALIGNED;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_class_version_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_text_midpt_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_elevation_set;
*swig_flags_1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_flags_1_get;
*swig_flags_1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_flags_1_set;
*swig_user_text_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_user_text_get;
*swig_user_text_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_user_text_set;
*swig_text_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_text_rot_get;
*swig_text_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_attachment_set;
*swig_lspace_style_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_act_measurement_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_clone_ins_pt_set;
*swig__13_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED__13_pt_get;
*swig__13_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED__13_pt_set;
*swig__14_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED__14_pt_get;
*swig__14_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED__14_pt_set;
*swig_def_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_def_pt_get;
*swig_def_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_def_pt_set;
*swig_ext_line_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_ext_line_rot_get;
*swig_ext_line_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_ext_line_rot_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_dimstyle_set;
*swig_block_get = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_block_get;
*swig_block_set = *LibreDWGc::Dwg_Entity_DIMENSION_ALIGNED_block_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_DIMENSION_ALIGNED(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_DIMENSION_ALIGNED($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_DIMENSION_ANG3PT ##############

package LibreDWG::Dwg_Entity_DIMENSION_ANG3PT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_class_version_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_text_midpt_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_elevation_set;
*swig_flags_1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_flags_1_get;
*swig_flags_1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_flags_1_set;
*swig_user_text_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_user_text_get;
*swig_user_text_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_user_text_set;
*swig_text_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_text_rot_get;
*swig_text_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_attachment_set;
*swig_lspace_style_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_act_measurement_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_clone_ins_pt_set;
*swig_def_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_def_pt_get;
*swig_def_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_def_pt_set;
*swig__13_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT__13_pt_get;
*swig__13_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT__13_pt_set;
*swig__14_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT__14_pt_get;
*swig__14_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT__14_pt_set;
*swig_first_arc_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_first_arc_pt_get;
*swig_first_arc_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_first_arc_pt_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_dimstyle_set;
*swig_block_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_block_get;
*swig_block_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG3PT_block_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_DIMENSION_ANG3PT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_DIMENSION_ANG3PT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_DIMENSION_ANG2LN ##############

package LibreDWG::Dwg_Entity_DIMENSION_ANG2LN;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_class_version_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_text_midpt_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_elevation_set;
*swig_flags_1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_flags_1_get;
*swig_flags_1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_flags_1_set;
*swig_user_text_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_user_text_get;
*swig_user_text_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_user_text_set;
*swig_text_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_text_rot_get;
*swig_text_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_attachment_set;
*swig_lspace_style_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_act_measurement_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_clone_ins_pt_set;
*swig__16_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN__16_pt_get;
*swig__16_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN__16_pt_set;
*swig__13_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN__13_pt_get;
*swig__13_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN__13_pt_set;
*swig__14_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN__14_pt_get;
*swig__14_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN__14_pt_set;
*swig_first_arc_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_first_arc_pt_get;
*swig_first_arc_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_first_arc_pt_set;
*swig_def_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_def_pt_get;
*swig_def_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_def_pt_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_dimstyle_set;
*swig_block_get = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_block_get;
*swig_block_set = *LibreDWGc::Dwg_Entity_DIMENSION_ANG2LN_block_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_DIMENSION_ANG2LN(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_DIMENSION_ANG2LN($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_DIMENSION_RADIUS ##############

package LibreDWG::Dwg_Entity_DIMENSION_RADIUS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_class_version_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_text_midpt_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_elevation_set;
*swig_flags_1_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_flags_1_get;
*swig_flags_1_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_flags_1_set;
*swig_user_text_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_user_text_get;
*swig_user_text_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_user_text_set;
*swig_text_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_text_rot_get;
*swig_text_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_attachment_set;
*swig_lspace_style_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_act_measurement_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_clone_ins_pt_set;
*swig_def_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_def_pt_get;
*swig_def_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_def_pt_set;
*swig_first_arc_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_first_arc_pt_get;
*swig_first_arc_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_first_arc_pt_set;
*swig_leader_len_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_leader_len_get;
*swig_leader_len_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_leader_len_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_dimstyle_set;
*swig_block_get = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_block_get;
*swig_block_set = *LibreDWGc::Dwg_Entity_DIMENSION_RADIUS_block_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_DIMENSION_RADIUS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_DIMENSION_RADIUS($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_DIMENSION_DIAMETER ##############

package LibreDWG::Dwg_Entity_DIMENSION_DIAMETER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_class_version_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_extrusion_set;
*swig_text_midpt_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_text_midpt_get;
*swig_text_midpt_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_text_midpt_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_elevation_set;
*swig_flags_1_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_flags_1_get;
*swig_flags_1_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_flags_1_set;
*swig_user_text_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_user_text_get;
*swig_user_text_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_user_text_set;
*swig_text_rot_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_text_rot_get;
*swig_text_rot_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_text_rot_set;
*swig_horiz_dir_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_horiz_dir_get;
*swig_horiz_dir_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_horiz_dir_set;
*swig_ins_scale_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_ins_scale_get;
*swig_ins_scale_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_ins_scale_set;
*swig_ins_rotation_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_ins_rotation_get;
*swig_ins_rotation_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_ins_rotation_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_attachment_set;
*swig_lspace_style_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_lspace_style_get;
*swig_lspace_style_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_lspace_style_set;
*swig_lspace_factor_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_lspace_factor_get;
*swig_lspace_factor_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_lspace_factor_set;
*swig_act_measurement_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_act_measurement_get;
*swig_act_measurement_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_act_measurement_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_unknown_set;
*swig_flip_arrow1_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow2_set;
*swig_clone_ins_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_clone_ins_pt_get;
*swig_clone_ins_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_clone_ins_pt_set;
*swig_first_arc_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_first_arc_pt_get;
*swig_first_arc_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_first_arc_pt_set;
*swig_def_pt_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_def_pt_get;
*swig_def_pt_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_def_pt_set;
*swig_leader_len_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_leader_len_get;
*swig_leader_len_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_leader_len_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_dimstyle_set;
*swig_block_get = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_block_get;
*swig_block_set = *LibreDWGc::Dwg_Entity_DIMENSION_DIAMETER_block_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_DIMENSION_DIAMETER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_DIMENSION_DIAMETER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_POINT ##############

package LibreDWG::Dwg_Entity_POINT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_POINT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_POINT_parent_set;
*swig_x_get = *LibreDWGc::Dwg_Entity_POINT_x_get;
*swig_x_set = *LibreDWGc::Dwg_Entity_POINT_x_set;
*swig_y_get = *LibreDWGc::Dwg_Entity_POINT_y_get;
*swig_y_set = *LibreDWGc::Dwg_Entity_POINT_y_set;
*swig_z_get = *LibreDWGc::Dwg_Entity_POINT_z_get;
*swig_z_set = *LibreDWGc::Dwg_Entity_POINT_z_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_POINT_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_POINT_thickness_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_POINT_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_POINT_extrusion_set;
*swig_x_ang_get = *LibreDWGc::Dwg_Entity_POINT_x_ang_get;
*swig_x_ang_set = *LibreDWGc::Dwg_Entity_POINT_x_ang_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_POINT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_POINT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity__3DFACE ##############

package LibreDWG::Dwg_Entity__3DFACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity__3DFACE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity__3DFACE_parent_set;
*swig_has_no_flags_get = *LibreDWGc::Dwg_Entity__3DFACE_has_no_flags_get;
*swig_has_no_flags_set = *LibreDWGc::Dwg_Entity__3DFACE_has_no_flags_set;
*swig_z_is_zero_get = *LibreDWGc::Dwg_Entity__3DFACE_z_is_zero_get;
*swig_z_is_zero_set = *LibreDWGc::Dwg_Entity__3DFACE_z_is_zero_set;
*swig_corner1_get = *LibreDWGc::Dwg_Entity__3DFACE_corner1_get;
*swig_corner1_set = *LibreDWGc::Dwg_Entity__3DFACE_corner1_set;
*swig_corner2_get = *LibreDWGc::Dwg_Entity__3DFACE_corner2_get;
*swig_corner2_set = *LibreDWGc::Dwg_Entity__3DFACE_corner2_set;
*swig_corner3_get = *LibreDWGc::Dwg_Entity__3DFACE_corner3_get;
*swig_corner3_set = *LibreDWGc::Dwg_Entity__3DFACE_corner3_set;
*swig_corner4_get = *LibreDWGc::Dwg_Entity__3DFACE_corner4_get;
*swig_corner4_set = *LibreDWGc::Dwg_Entity__3DFACE_corner4_set;
*swig_invis_flags_get = *LibreDWGc::Dwg_Entity__3DFACE_invis_flags_get;
*swig_invis_flags_set = *LibreDWGc::Dwg_Entity__3DFACE_invis_flags_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity__3DFACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity__3DFACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_POLYLINE_PFACE ##############

package LibreDWG::Dwg_Entity_POLYLINE_PFACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_parent_set;
*swig_numverts_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_numverts_get;
*swig_numverts_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_numverts_set;
*swig_numfaces_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_numfaces_get;
*swig_numfaces_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_numfaces_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_num_owned_set;
*swig_first_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_first_vertex_get;
*swig_first_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_first_vertex_set;
*swig_last_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_last_vertex_get;
*swig_last_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_last_vertex_set;
*swig_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_vertex_get;
*swig_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_vertex_set;
*swig_seqend_get = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_seqend_get;
*swig_seqend_set = *LibreDWGc::Dwg_Entity_POLYLINE_PFACE_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_POLYLINE_PFACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_POLYLINE_PFACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_POLYLINE_MESH ##############

package LibreDWG::Dwg_Entity_POLYLINE_MESH;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_flag_set;
*swig_curve_type_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_curve_type_get;
*swig_curve_type_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_curve_type_set;
*swig_num_m_verts_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_num_m_verts_get;
*swig_num_m_verts_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_num_m_verts_set;
*swig_num_n_verts_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_num_n_verts_get;
*swig_num_n_verts_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_num_n_verts_set;
*swig_m_density_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_m_density_get;
*swig_m_density_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_m_density_set;
*swig_n_density_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_n_density_get;
*swig_n_density_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_n_density_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_num_owned_set;
*swig_first_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_first_vertex_get;
*swig_first_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_first_vertex_set;
*swig_last_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_last_vertex_get;
*swig_last_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_last_vertex_set;
*swig_vertex_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_vertex_get;
*swig_vertex_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_vertex_set;
*swig_seqend_get = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_seqend_get;
*swig_seqend_set = *LibreDWGc::Dwg_Entity_POLYLINE_MESH_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_POLYLINE_MESH(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_POLYLINE_MESH($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_SOLID ##############

package LibreDWG::Dwg_Entity_SOLID;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_SOLID_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_SOLID_parent_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_SOLID_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_SOLID_thickness_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_SOLID_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_SOLID_elevation_set;
*swig_corner1_get = *LibreDWGc::Dwg_Entity_SOLID_corner1_get;
*swig_corner1_set = *LibreDWGc::Dwg_Entity_SOLID_corner1_set;
*swig_corner2_get = *LibreDWGc::Dwg_Entity_SOLID_corner2_get;
*swig_corner2_set = *LibreDWGc::Dwg_Entity_SOLID_corner2_set;
*swig_corner3_get = *LibreDWGc::Dwg_Entity_SOLID_corner3_get;
*swig_corner3_set = *LibreDWGc::Dwg_Entity_SOLID_corner3_set;
*swig_corner4_get = *LibreDWGc::Dwg_Entity_SOLID_corner4_get;
*swig_corner4_set = *LibreDWGc::Dwg_Entity_SOLID_corner4_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_SOLID_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_SOLID_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_SOLID(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_SOLID($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_TRACE ##############

package LibreDWG::Dwg_Entity_TRACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_TRACE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_TRACE_parent_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_TRACE_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_TRACE_thickness_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_TRACE_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_TRACE_elevation_set;
*swig_corner1_get = *LibreDWGc::Dwg_Entity_TRACE_corner1_get;
*swig_corner1_set = *LibreDWGc::Dwg_Entity_TRACE_corner1_set;
*swig_corner2_get = *LibreDWGc::Dwg_Entity_TRACE_corner2_get;
*swig_corner2_set = *LibreDWGc::Dwg_Entity_TRACE_corner2_set;
*swig_corner3_get = *LibreDWGc::Dwg_Entity_TRACE_corner3_get;
*swig_corner3_set = *LibreDWGc::Dwg_Entity_TRACE_corner3_set;
*swig_corner4_get = *LibreDWGc::Dwg_Entity_TRACE_corner4_get;
*swig_corner4_set = *LibreDWGc::Dwg_Entity_TRACE_corner4_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_TRACE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_TRACE_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_TRACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_TRACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_SHAPE ##############

package LibreDWG::Dwg_Entity_SHAPE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_SHAPE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_SHAPE_parent_set;
*swig_ins_pt_get = *LibreDWGc::Dwg_Entity_SHAPE_ins_pt_get;
*swig_ins_pt_set = *LibreDWGc::Dwg_Entity_SHAPE_ins_pt_set;
*swig_scale_get = *LibreDWGc::Dwg_Entity_SHAPE_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_Entity_SHAPE_scale_set;
*swig_rotation_get = *LibreDWGc::Dwg_Entity_SHAPE_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_Entity_SHAPE_rotation_set;
*swig_width_factor_get = *LibreDWGc::Dwg_Entity_SHAPE_width_factor_get;
*swig_width_factor_set = *LibreDWGc::Dwg_Entity_SHAPE_width_factor_set;
*swig_oblique_get = *LibreDWGc::Dwg_Entity_SHAPE_oblique_get;
*swig_oblique_set = *LibreDWGc::Dwg_Entity_SHAPE_oblique_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_SHAPE_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_SHAPE_thickness_set;
*swig_shape_no_get = *LibreDWGc::Dwg_Entity_SHAPE_shape_no_get;
*swig_shape_no_set = *LibreDWGc::Dwg_Entity_SHAPE_shape_no_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_SHAPE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_SHAPE_extrusion_set;
*swig_style_get = *LibreDWGc::Dwg_Entity_SHAPE_style_get;
*swig_style_set = *LibreDWGc::Dwg_Entity_SHAPE_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_SHAPE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_SHAPE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_VIEWPORT ##############

package LibreDWG::Dwg_Entity_VIEWPORT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_VIEWPORT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_VIEWPORT_parent_set;
*swig_center_get = *LibreDWGc::Dwg_Entity_VIEWPORT_center_get;
*swig_center_set = *LibreDWGc::Dwg_Entity_VIEWPORT_center_set;
*swig_width_get = *LibreDWGc::Dwg_Entity_VIEWPORT_width_get;
*swig_width_set = *LibreDWGc::Dwg_Entity_VIEWPORT_width_set;
*swig_height_get = *LibreDWGc::Dwg_Entity_VIEWPORT_height_get;
*swig_height_set = *LibreDWGc::Dwg_Entity_VIEWPORT_height_set;
*swig_on_off_get = *LibreDWGc::Dwg_Entity_VIEWPORT_on_off_get;
*swig_on_off_set = *LibreDWGc::Dwg_Entity_VIEWPORT_on_off_set;
*swig_id_get = *LibreDWGc::Dwg_Entity_VIEWPORT_id_get;
*swig_id_set = *LibreDWGc::Dwg_Entity_VIEWPORT_id_set;
*swig_view_target_get = *LibreDWGc::Dwg_Entity_VIEWPORT_view_target_get;
*swig_view_target_set = *LibreDWGc::Dwg_Entity_VIEWPORT_view_target_set;
*swig_view_direction_get = *LibreDWGc::Dwg_Entity_VIEWPORT_view_direction_get;
*swig_view_direction_set = *LibreDWGc::Dwg_Entity_VIEWPORT_view_direction_set;
*swig_view_twist_get = *LibreDWGc::Dwg_Entity_VIEWPORT_view_twist_get;
*swig_view_twist_set = *LibreDWGc::Dwg_Entity_VIEWPORT_view_twist_set;
*swig_view_height_get = *LibreDWGc::Dwg_Entity_VIEWPORT_view_height_get;
*swig_view_height_set = *LibreDWGc::Dwg_Entity_VIEWPORT_view_height_set;
*swig_lens_length_get = *LibreDWGc::Dwg_Entity_VIEWPORT_lens_length_get;
*swig_lens_length_set = *LibreDWGc::Dwg_Entity_VIEWPORT_lens_length_set;
*swig_front_clip_z_get = *LibreDWGc::Dwg_Entity_VIEWPORT_front_clip_z_get;
*swig_front_clip_z_set = *LibreDWGc::Dwg_Entity_VIEWPORT_front_clip_z_set;
*swig_back_clip_z_get = *LibreDWGc::Dwg_Entity_VIEWPORT_back_clip_z_get;
*swig_back_clip_z_set = *LibreDWGc::Dwg_Entity_VIEWPORT_back_clip_z_set;
*swig_snap_angle_get = *LibreDWGc::Dwg_Entity_VIEWPORT_snap_angle_get;
*swig_snap_angle_set = *LibreDWGc::Dwg_Entity_VIEWPORT_snap_angle_set;
*swig_view_center_get = *LibreDWGc::Dwg_Entity_VIEWPORT_view_center_get;
*swig_view_center_set = *LibreDWGc::Dwg_Entity_VIEWPORT_view_center_set;
*swig_snap_base_get = *LibreDWGc::Dwg_Entity_VIEWPORT_snap_base_get;
*swig_snap_base_set = *LibreDWGc::Dwg_Entity_VIEWPORT_snap_base_set;
*swig_snap_spacing_get = *LibreDWGc::Dwg_Entity_VIEWPORT_snap_spacing_get;
*swig_snap_spacing_set = *LibreDWGc::Dwg_Entity_VIEWPORT_snap_spacing_set;
*swig_grid_spacing_get = *LibreDWGc::Dwg_Entity_VIEWPORT_grid_spacing_get;
*swig_grid_spacing_set = *LibreDWGc::Dwg_Entity_VIEWPORT_grid_spacing_set;
*swig_circle_zoom_get = *LibreDWGc::Dwg_Entity_VIEWPORT_circle_zoom_get;
*swig_circle_zoom_set = *LibreDWGc::Dwg_Entity_VIEWPORT_circle_zoom_set;
*swig_grid_major_get = *LibreDWGc::Dwg_Entity_VIEWPORT_grid_major_get;
*swig_grid_major_set = *LibreDWGc::Dwg_Entity_VIEWPORT_grid_major_set;
*swig_num_frozen_layers_get = *LibreDWGc::Dwg_Entity_VIEWPORT_num_frozen_layers_get;
*swig_num_frozen_layers_set = *LibreDWGc::Dwg_Entity_VIEWPORT_num_frozen_layers_set;
*swig_status_flag_get = *LibreDWGc::Dwg_Entity_VIEWPORT_status_flag_get;
*swig_status_flag_set = *LibreDWGc::Dwg_Entity_VIEWPORT_status_flag_set;
*swig_style_sheet_get = *LibreDWGc::Dwg_Entity_VIEWPORT_style_sheet_get;
*swig_style_sheet_set = *LibreDWGc::Dwg_Entity_VIEWPORT_style_sheet_set;
*swig_render_mode_get = *LibreDWGc::Dwg_Entity_VIEWPORT_render_mode_get;
*swig_render_mode_set = *LibreDWGc::Dwg_Entity_VIEWPORT_render_mode_set;
*swig_ucs_at_origin_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_at_origin_get;
*swig_ucs_at_origin_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_at_origin_set;
*swig_ucs_per_viewport_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_per_viewport_get;
*swig_ucs_per_viewport_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_per_viewport_set;
*swig_ucs_origin_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_origin_get;
*swig_ucs_origin_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_origin_set;
*swig_ucs_x_axis_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_x_axis_get;
*swig_ucs_x_axis_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_x_axis_set;
*swig_ucs_y_axis_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_y_axis_get;
*swig_ucs_y_axis_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_y_axis_set;
*swig_ucs_elevation_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_elevation_get;
*swig_ucs_elevation_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_elevation_set;
*swig_ucs_ortho_view_type_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_ortho_view_type_get;
*swig_ucs_ortho_view_type_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ucs_ortho_view_type_set;
*swig_shadeplot_mode_get = *LibreDWGc::Dwg_Entity_VIEWPORT_shadeplot_mode_get;
*swig_shadeplot_mode_set = *LibreDWGc::Dwg_Entity_VIEWPORT_shadeplot_mode_set;
*swig_use_default_lights_get = *LibreDWGc::Dwg_Entity_VIEWPORT_use_default_lights_get;
*swig_use_default_lights_set = *LibreDWGc::Dwg_Entity_VIEWPORT_use_default_lights_set;
*swig_default_lighting_type_get = *LibreDWGc::Dwg_Entity_VIEWPORT_default_lighting_type_get;
*swig_default_lighting_type_set = *LibreDWGc::Dwg_Entity_VIEWPORT_default_lighting_type_set;
*swig_brightness_get = *LibreDWGc::Dwg_Entity_VIEWPORT_brightness_get;
*swig_brightness_set = *LibreDWGc::Dwg_Entity_VIEWPORT_brightness_set;
*swig_contrast_get = *LibreDWGc::Dwg_Entity_VIEWPORT_contrast_get;
*swig_contrast_set = *LibreDWGc::Dwg_Entity_VIEWPORT_contrast_set;
*swig_ambient_color_get = *LibreDWGc::Dwg_Entity_VIEWPORT_ambient_color_get;
*swig_ambient_color_set = *LibreDWGc::Dwg_Entity_VIEWPORT_ambient_color_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_VIEWPORT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_VIEWPORT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_ELLIPSE ##############

package LibreDWG::Dwg_Entity_ELLIPSE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_ELLIPSE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_ELLIPSE_parent_set;
*swig_center_get = *LibreDWGc::Dwg_Entity_ELLIPSE_center_get;
*swig_center_set = *LibreDWGc::Dwg_Entity_ELLIPSE_center_set;
*swig_sm_axis_get = *LibreDWGc::Dwg_Entity_ELLIPSE_sm_axis_get;
*swig_sm_axis_set = *LibreDWGc::Dwg_Entity_ELLIPSE_sm_axis_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_ELLIPSE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_ELLIPSE_extrusion_set;
*swig_axis_ratio_get = *LibreDWGc::Dwg_Entity_ELLIPSE_axis_ratio_get;
*swig_axis_ratio_set = *LibreDWGc::Dwg_Entity_ELLIPSE_axis_ratio_set;
*swig_start_angle_get = *LibreDWGc::Dwg_Entity_ELLIPSE_start_angle_get;
*swig_start_angle_set = *LibreDWGc::Dwg_Entity_ELLIPSE_start_angle_set;
*swig_end_angle_get = *LibreDWGc::Dwg_Entity_ELLIPSE_end_angle_get;
*swig_end_angle_set = *LibreDWGc::Dwg_Entity_ELLIPSE_end_angle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_ELLIPSE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_ELLIPSE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_SPLINE_point ##############

package LibreDWG::Dwg_SPLINE_point;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_SPLINE_point_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_SPLINE_point_parent_set;
*swig_x_get = *LibreDWGc::Dwg_SPLINE_point_x_get;
*swig_x_set = *LibreDWGc::Dwg_SPLINE_point_x_set;
*swig_y_get = *LibreDWGc::Dwg_SPLINE_point_y_get;
*swig_y_set = *LibreDWGc::Dwg_SPLINE_point_y_set;
*swig_z_get = *LibreDWGc::Dwg_SPLINE_point_z_get;
*swig_z_set = *LibreDWGc::Dwg_SPLINE_point_z_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_SPLINE_point(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_SPLINE_point($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_SPLINE_control_point ##############

package LibreDWG::Dwg_SPLINE_control_point;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_SPLINE_control_point_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_SPLINE_control_point_parent_set;
*swig_x_get = *LibreDWGc::Dwg_SPLINE_control_point_x_get;
*swig_x_set = *LibreDWGc::Dwg_SPLINE_control_point_x_set;
*swig_y_get = *LibreDWGc::Dwg_SPLINE_control_point_y_get;
*swig_y_set = *LibreDWGc::Dwg_SPLINE_control_point_y_set;
*swig_z_get = *LibreDWGc::Dwg_SPLINE_control_point_z_get;
*swig_z_set = *LibreDWGc::Dwg_SPLINE_control_point_z_set;
*swig_w_get = *LibreDWGc::Dwg_SPLINE_control_point_w_get;
*swig_w_set = *LibreDWGc::Dwg_SPLINE_control_point_w_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_SPLINE_control_point(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_SPLINE_control_point($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_SPLINE ##############

package LibreDWG::Dwg_Entity_SPLINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_SPLINE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_SPLINE_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_SPLINE_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_SPLINE_flag_set;
*swig_scenario_get = *LibreDWGc::Dwg_Entity_SPLINE_scenario_get;
*swig_scenario_set = *LibreDWGc::Dwg_Entity_SPLINE_scenario_set;
*swig_degree_get = *LibreDWGc::Dwg_Entity_SPLINE_degree_get;
*swig_degree_set = *LibreDWGc::Dwg_Entity_SPLINE_degree_set;
*swig_splineflags1_get = *LibreDWGc::Dwg_Entity_SPLINE_splineflags1_get;
*swig_splineflags1_set = *LibreDWGc::Dwg_Entity_SPLINE_splineflags1_set;
*swig_knotparam_get = *LibreDWGc::Dwg_Entity_SPLINE_knotparam_get;
*swig_knotparam_set = *LibreDWGc::Dwg_Entity_SPLINE_knotparam_set;
*swig_fit_tol_get = *LibreDWGc::Dwg_Entity_SPLINE_fit_tol_get;
*swig_fit_tol_set = *LibreDWGc::Dwg_Entity_SPLINE_fit_tol_set;
*swig_beg_tan_vec_get = *LibreDWGc::Dwg_Entity_SPLINE_beg_tan_vec_get;
*swig_beg_tan_vec_set = *LibreDWGc::Dwg_Entity_SPLINE_beg_tan_vec_set;
*swig_end_tan_vec_get = *LibreDWGc::Dwg_Entity_SPLINE_end_tan_vec_get;
*swig_end_tan_vec_set = *LibreDWGc::Dwg_Entity_SPLINE_end_tan_vec_set;
*swig_rational_get = *LibreDWGc::Dwg_Entity_SPLINE_rational_get;
*swig_rational_set = *LibreDWGc::Dwg_Entity_SPLINE_rational_set;
*swig_closed_b_get = *LibreDWGc::Dwg_Entity_SPLINE_closed_b_get;
*swig_closed_b_set = *LibreDWGc::Dwg_Entity_SPLINE_closed_b_set;
*swig_periodic_get = *LibreDWGc::Dwg_Entity_SPLINE_periodic_get;
*swig_periodic_set = *LibreDWGc::Dwg_Entity_SPLINE_periodic_set;
*swig_weighted_get = *LibreDWGc::Dwg_Entity_SPLINE_weighted_get;
*swig_weighted_set = *LibreDWGc::Dwg_Entity_SPLINE_weighted_set;
*swig_knot_tol_get = *LibreDWGc::Dwg_Entity_SPLINE_knot_tol_get;
*swig_knot_tol_set = *LibreDWGc::Dwg_Entity_SPLINE_knot_tol_set;
*swig_ctrl_tol_get = *LibreDWGc::Dwg_Entity_SPLINE_ctrl_tol_get;
*swig_ctrl_tol_set = *LibreDWGc::Dwg_Entity_SPLINE_ctrl_tol_set;
*swig_num_fit_pts_get = *LibreDWGc::Dwg_Entity_SPLINE_num_fit_pts_get;
*swig_num_fit_pts_set = *LibreDWGc::Dwg_Entity_SPLINE_num_fit_pts_set;
*swig_fit_pts_get = *LibreDWGc::Dwg_Entity_SPLINE_fit_pts_get;
*swig_fit_pts_set = *LibreDWGc::Dwg_Entity_SPLINE_fit_pts_set;
*swig_num_knots_get = *LibreDWGc::Dwg_Entity_SPLINE_num_knots_get;
*swig_num_knots_set = *LibreDWGc::Dwg_Entity_SPLINE_num_knots_set;
*swig_knots_get = *LibreDWGc::Dwg_Entity_SPLINE_knots_get;
*swig_knots_set = *LibreDWGc::Dwg_Entity_SPLINE_knots_set;
*swig_num_ctrl_pts_get = *LibreDWGc::Dwg_Entity_SPLINE_num_ctrl_pts_get;
*swig_num_ctrl_pts_set = *LibreDWGc::Dwg_Entity_SPLINE_num_ctrl_pts_set;
*swig_ctrl_pts_get = *LibreDWGc::Dwg_Entity_SPLINE_ctrl_pts_get;
*swig_ctrl_pts_set = *LibreDWGc::Dwg_Entity_SPLINE_ctrl_pts_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_SPLINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_SPLINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_3DSOLID_wire ##############

package LibreDWG::Dwg_3DSOLID_wire;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_3DSOLID_wire_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_3DSOLID_wire_parent_set;
*swig_type_get = *LibreDWGc::Dwg_3DSOLID_wire_type_get;
*swig_type_set = *LibreDWGc::Dwg_3DSOLID_wire_type_set;
*swig_selection_marker_get = *LibreDWGc::Dwg_3DSOLID_wire_selection_marker_get;
*swig_selection_marker_set = *LibreDWGc::Dwg_3DSOLID_wire_selection_marker_set;
*swig_color_get = *LibreDWGc::Dwg_3DSOLID_wire_color_get;
*swig_color_set = *LibreDWGc::Dwg_3DSOLID_wire_color_set;
*swig_acis_index_get = *LibreDWGc::Dwg_3DSOLID_wire_acis_index_get;
*swig_acis_index_set = *LibreDWGc::Dwg_3DSOLID_wire_acis_index_set;
*swig_num_points_get = *LibreDWGc::Dwg_3DSOLID_wire_num_points_get;
*swig_num_points_set = *LibreDWGc::Dwg_3DSOLID_wire_num_points_set;
*swig_points_get = *LibreDWGc::Dwg_3DSOLID_wire_points_get;
*swig_points_set = *LibreDWGc::Dwg_3DSOLID_wire_points_set;
*swig_transform_present_get = *LibreDWGc::Dwg_3DSOLID_wire_transform_present_get;
*swig_transform_present_set = *LibreDWGc::Dwg_3DSOLID_wire_transform_present_set;
*swig_axis_x_get = *LibreDWGc::Dwg_3DSOLID_wire_axis_x_get;
*swig_axis_x_set = *LibreDWGc::Dwg_3DSOLID_wire_axis_x_set;
*swig_axis_y_get = *LibreDWGc::Dwg_3DSOLID_wire_axis_y_get;
*swig_axis_y_set = *LibreDWGc::Dwg_3DSOLID_wire_axis_y_set;
*swig_axis_z_get = *LibreDWGc::Dwg_3DSOLID_wire_axis_z_get;
*swig_axis_z_set = *LibreDWGc::Dwg_3DSOLID_wire_axis_z_set;
*swig_translation_get = *LibreDWGc::Dwg_3DSOLID_wire_translation_get;
*swig_translation_set = *LibreDWGc::Dwg_3DSOLID_wire_translation_set;
*swig_scale_get = *LibreDWGc::Dwg_3DSOLID_wire_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_3DSOLID_wire_scale_set;
*swig_has_rotation_get = *LibreDWGc::Dwg_3DSOLID_wire_has_rotation_get;
*swig_has_rotation_set = *LibreDWGc::Dwg_3DSOLID_wire_has_rotation_set;
*swig_has_reflection_get = *LibreDWGc::Dwg_3DSOLID_wire_has_reflection_get;
*swig_has_reflection_set = *LibreDWGc::Dwg_3DSOLID_wire_has_reflection_set;
*swig_has_shear_get = *LibreDWGc::Dwg_3DSOLID_wire_has_shear_get;
*swig_has_shear_set = *LibreDWGc::Dwg_3DSOLID_wire_has_shear_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_3DSOLID_wire(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_3DSOLID_wire($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_3DSOLID_silhouette ##############

package LibreDWG::Dwg_3DSOLID_silhouette;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_3DSOLID_silhouette_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_3DSOLID_silhouette_parent_set;
*swig_vp_id_get = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_id_get;
*swig_vp_id_set = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_id_set;
*swig_vp_target_get = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_target_get;
*swig_vp_target_set = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_target_set;
*swig_vp_dir_from_target_get = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_dir_from_target_get;
*swig_vp_dir_from_target_set = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_dir_from_target_set;
*swig_vp_up_dir_get = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_up_dir_get;
*swig_vp_up_dir_set = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_up_dir_set;
*swig_vp_perspective_get = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_perspective_get;
*swig_vp_perspective_set = *LibreDWGc::Dwg_3DSOLID_silhouette_vp_perspective_set;
*swig_num_wires_get = *LibreDWGc::Dwg_3DSOLID_silhouette_num_wires_get;
*swig_num_wires_set = *LibreDWGc::Dwg_3DSOLID_silhouette_num_wires_set;
*swig_wires_get = *LibreDWGc::Dwg_3DSOLID_silhouette_wires_get;
*swig_wires_set = *LibreDWGc::Dwg_3DSOLID_silhouette_wires_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_3DSOLID_silhouette(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_3DSOLID_silhouette($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity__3DSOLID ##############

package LibreDWG::Dwg_Entity__3DSOLID;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity__3DSOLID_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity__3DSOLID_parent_set;
*swig_acis_empty_get = *LibreDWGc::Dwg_Entity__3DSOLID_acis_empty_get;
*swig_acis_empty_set = *LibreDWGc::Dwg_Entity__3DSOLID_acis_empty_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity__3DSOLID_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity__3DSOLID_unknown_set;
*swig_version_get = *LibreDWGc::Dwg_Entity__3DSOLID_version_get;
*swig_version_set = *LibreDWGc::Dwg_Entity__3DSOLID_version_set;
*swig_num_blocks_get = *LibreDWGc::Dwg_Entity__3DSOLID_num_blocks_get;
*swig_num_blocks_set = *LibreDWGc::Dwg_Entity__3DSOLID_num_blocks_set;
*swig_block_size_get = *LibreDWGc::Dwg_Entity__3DSOLID_block_size_get;
*swig_block_size_set = *LibreDWGc::Dwg_Entity__3DSOLID_block_size_set;
*swig_encr_sat_data_get = *LibreDWGc::Dwg_Entity__3DSOLID_encr_sat_data_get;
*swig_encr_sat_data_set = *LibreDWGc::Dwg_Entity__3DSOLID_encr_sat_data_set;
*swig_acis_data_get = *LibreDWGc::Dwg_Entity__3DSOLID_acis_data_get;
*swig_acis_data_set = *LibreDWGc::Dwg_Entity__3DSOLID_acis_data_set;
*swig_wireframe_data_present_get = *LibreDWGc::Dwg_Entity__3DSOLID_wireframe_data_present_get;
*swig_wireframe_data_present_set = *LibreDWGc::Dwg_Entity__3DSOLID_wireframe_data_present_set;
*swig_point_present_get = *LibreDWGc::Dwg_Entity__3DSOLID_point_present_get;
*swig_point_present_set = *LibreDWGc::Dwg_Entity__3DSOLID_point_present_set;
*swig_point_get = *LibreDWGc::Dwg_Entity__3DSOLID_point_get;
*swig_point_set = *LibreDWGc::Dwg_Entity__3DSOLID_point_set;
*swig_num_isolines_get = *LibreDWGc::Dwg_Entity__3DSOLID_num_isolines_get;
*swig_num_isolines_set = *LibreDWGc::Dwg_Entity__3DSOLID_num_isolines_set;
*swig_isoline_present_get = *LibreDWGc::Dwg_Entity__3DSOLID_isoline_present_get;
*swig_isoline_present_set = *LibreDWGc::Dwg_Entity__3DSOLID_isoline_present_set;
*swig_num_wires_get = *LibreDWGc::Dwg_Entity__3DSOLID_num_wires_get;
*swig_num_wires_set = *LibreDWGc::Dwg_Entity__3DSOLID_num_wires_set;
*swig_wires_get = *LibreDWGc::Dwg_Entity__3DSOLID_wires_get;
*swig_wires_set = *LibreDWGc::Dwg_Entity__3DSOLID_wires_set;
*swig_num_silhouettes_get = *LibreDWGc::Dwg_Entity__3DSOLID_num_silhouettes_get;
*swig_num_silhouettes_set = *LibreDWGc::Dwg_Entity__3DSOLID_num_silhouettes_set;
*swig_silhouettes_get = *LibreDWGc::Dwg_Entity__3DSOLID_silhouettes_get;
*swig_silhouettes_set = *LibreDWGc::Dwg_Entity__3DSOLID_silhouettes_set;
*swig_acis_empty2_get = *LibreDWGc::Dwg_Entity__3DSOLID_acis_empty2_get;
*swig_acis_empty2_set = *LibreDWGc::Dwg_Entity__3DSOLID_acis_empty2_set;
*swig_extra_acis_data_get = *LibreDWGc::Dwg_Entity__3DSOLID_extra_acis_data_get;
*swig_extra_acis_data_set = *LibreDWGc::Dwg_Entity__3DSOLID_extra_acis_data_set;
*swig_unknown_2007_get = *LibreDWGc::Dwg_Entity__3DSOLID_unknown_2007_get;
*swig_unknown_2007_set = *LibreDWGc::Dwg_Entity__3DSOLID_unknown_2007_set;
*swig_history_id_get = *LibreDWGc::Dwg_Entity__3DSOLID_history_id_get;
*swig_history_id_set = *LibreDWGc::Dwg_Entity__3DSOLID_history_id_set;
*swig_acis_empty_bit_get = *LibreDWGc::Dwg_Entity__3DSOLID_acis_empty_bit_get;
*swig_acis_empty_bit_set = *LibreDWGc::Dwg_Entity__3DSOLID_acis_empty_bit_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity__3DSOLID(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity__3DSOLID($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_RAY ##############

package LibreDWG::Dwg_Entity_RAY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_RAY_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_RAY_parent_set;
*swig_point_get = *LibreDWGc::Dwg_Entity_RAY_point_get;
*swig_point_set = *LibreDWGc::Dwg_Entity_RAY_point_set;
*swig_vector_get = *LibreDWGc::Dwg_Entity_RAY_vector_get;
*swig_vector_set = *LibreDWGc::Dwg_Entity_RAY_vector_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_RAY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_RAY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DICTIONARY ##############

package LibreDWG::Dwg_Object_DICTIONARY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DICTIONARY_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DICTIONARY_parent_set;
*swig_numitems_get = *LibreDWGc::Dwg_Object_DICTIONARY_numitems_get;
*swig_numitems_set = *LibreDWGc::Dwg_Object_DICTIONARY_numitems_set;
*swig_text_get = *LibreDWGc::Dwg_Object_DICTIONARY_text_get;
*swig_text_set = *LibreDWGc::Dwg_Object_DICTIONARY_text_set;
*swig_cloning_get = *LibreDWGc::Dwg_Object_DICTIONARY_cloning_get;
*swig_cloning_set = *LibreDWGc::Dwg_Object_DICTIONARY_cloning_set;
*swig_unknown_r14_get = *LibreDWGc::Dwg_Object_DICTIONARY_unknown_r14_get;
*swig_unknown_r14_set = *LibreDWGc::Dwg_Object_DICTIONARY_unknown_r14_set;
*swig_hard_owner_get = *LibreDWGc::Dwg_Object_DICTIONARY_hard_owner_get;
*swig_hard_owner_set = *LibreDWGc::Dwg_Object_DICTIONARY_hard_owner_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_DICTIONARY_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_DICTIONARY_parenthandle_set;
*swig_itemhandles_get = *LibreDWGc::Dwg_Object_DICTIONARY_itemhandles_get;
*swig_itemhandles_set = *LibreDWGc::Dwg_Object_DICTIONARY_itemhandles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DICTIONARY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DICTIONARY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_OLEFRAME ##############

package LibreDWG::Dwg_Entity_OLEFRAME;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_OLEFRAME_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_OLEFRAME_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_OLEFRAME_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_OLEFRAME_flag_set;
*swig_mode_get = *LibreDWGc::Dwg_Entity_OLEFRAME_mode_get;
*swig_mode_set = *LibreDWGc::Dwg_Entity_OLEFRAME_mode_set;
*swig_data_length_get = *LibreDWGc::Dwg_Entity_OLEFRAME_data_length_get;
*swig_data_length_set = *LibreDWGc::Dwg_Entity_OLEFRAME_data_length_set;
*swig_data_get = *LibreDWGc::Dwg_Entity_OLEFRAME_data_get;
*swig_data_set = *LibreDWGc::Dwg_Entity_OLEFRAME_data_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_OLEFRAME(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_OLEFRAME($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_MTEXT ##############

package LibreDWG::Dwg_Entity_MTEXT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_MTEXT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_MTEXT_parent_set;
*swig_insertion_pt_get = *LibreDWGc::Dwg_Entity_MTEXT_insertion_pt_get;
*swig_insertion_pt_set = *LibreDWGc::Dwg_Entity_MTEXT_insertion_pt_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_MTEXT_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_MTEXT_extrusion_set;
*swig_x_axis_dir_get = *LibreDWGc::Dwg_Entity_MTEXT_x_axis_dir_get;
*swig_x_axis_dir_set = *LibreDWGc::Dwg_Entity_MTEXT_x_axis_dir_set;
*swig_rect_height_get = *LibreDWGc::Dwg_Entity_MTEXT_rect_height_get;
*swig_rect_height_set = *LibreDWGc::Dwg_Entity_MTEXT_rect_height_set;
*swig_rect_width_get = *LibreDWGc::Dwg_Entity_MTEXT_rect_width_get;
*swig_rect_width_set = *LibreDWGc::Dwg_Entity_MTEXT_rect_width_set;
*swig_text_height_get = *LibreDWGc::Dwg_Entity_MTEXT_text_height_get;
*swig_text_height_set = *LibreDWGc::Dwg_Entity_MTEXT_text_height_set;
*swig_attachment_get = *LibreDWGc::Dwg_Entity_MTEXT_attachment_get;
*swig_attachment_set = *LibreDWGc::Dwg_Entity_MTEXT_attachment_set;
*swig_drawing_dir_get = *LibreDWGc::Dwg_Entity_MTEXT_drawing_dir_get;
*swig_drawing_dir_set = *LibreDWGc::Dwg_Entity_MTEXT_drawing_dir_set;
*swig_extents_height_get = *LibreDWGc::Dwg_Entity_MTEXT_extents_height_get;
*swig_extents_height_set = *LibreDWGc::Dwg_Entity_MTEXT_extents_height_set;
*swig_extents_width_get = *LibreDWGc::Dwg_Entity_MTEXT_extents_width_get;
*swig_extents_width_set = *LibreDWGc::Dwg_Entity_MTEXT_extents_width_set;
*swig_text_get = *LibreDWGc::Dwg_Entity_MTEXT_text_get;
*swig_text_set = *LibreDWGc::Dwg_Entity_MTEXT_text_set;
*swig_style_get = *LibreDWGc::Dwg_Entity_MTEXT_style_get;
*swig_style_set = *LibreDWGc::Dwg_Entity_MTEXT_style_set;
*swig_linespace_style_get = *LibreDWGc::Dwg_Entity_MTEXT_linespace_style_get;
*swig_linespace_style_set = *LibreDWGc::Dwg_Entity_MTEXT_linespace_style_set;
*swig_linespace_factor_get = *LibreDWGc::Dwg_Entity_MTEXT_linespace_factor_get;
*swig_linespace_factor_set = *LibreDWGc::Dwg_Entity_MTEXT_linespace_factor_set;
*swig_unknown_bit_get = *LibreDWGc::Dwg_Entity_MTEXT_unknown_bit_get;
*swig_unknown_bit_set = *LibreDWGc::Dwg_Entity_MTEXT_unknown_bit_set;
*swig_bg_fill_flag_get = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_flag_get;
*swig_bg_fill_flag_set = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_flag_set;
*swig_bg_fill_scale_get = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_scale_get;
*swig_bg_fill_scale_set = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_scale_set;
*swig_bg_fill_color_get = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_color_get;
*swig_bg_fill_color_set = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_color_set;
*swig_bg_fill_trans_get = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_trans_get;
*swig_bg_fill_trans_set = *LibreDWGc::Dwg_Entity_MTEXT_bg_fill_trans_set;
*swig_annotative_get = *LibreDWGc::Dwg_Entity_MTEXT_annotative_get;
*swig_annotative_set = *LibreDWGc::Dwg_Entity_MTEXT_annotative_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_MTEXT_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_MTEXT_class_version_set;
*swig_default_flag_get = *LibreDWGc::Dwg_Entity_MTEXT_default_flag_get;
*swig_default_flag_set = *LibreDWGc::Dwg_Entity_MTEXT_default_flag_set;
*swig_appid_get = *LibreDWGc::Dwg_Entity_MTEXT_appid_get;
*swig_appid_set = *LibreDWGc::Dwg_Entity_MTEXT_appid_set;
*swig_column_type_get = *LibreDWGc::Dwg_Entity_MTEXT_column_type_get;
*swig_column_type_set = *LibreDWGc::Dwg_Entity_MTEXT_column_type_set;
*swig_num_column_heights_get = *LibreDWGc::Dwg_Entity_MTEXT_num_column_heights_get;
*swig_num_column_heights_set = *LibreDWGc::Dwg_Entity_MTEXT_num_column_heights_set;
*swig_column_width_get = *LibreDWGc::Dwg_Entity_MTEXT_column_width_get;
*swig_column_width_set = *LibreDWGc::Dwg_Entity_MTEXT_column_width_set;
*swig_gutter_get = *LibreDWGc::Dwg_Entity_MTEXT_gutter_get;
*swig_gutter_set = *LibreDWGc::Dwg_Entity_MTEXT_gutter_set;
*swig_auto_height_get = *LibreDWGc::Dwg_Entity_MTEXT_auto_height_get;
*swig_auto_height_set = *LibreDWGc::Dwg_Entity_MTEXT_auto_height_set;
*swig_flow_reversed_get = *LibreDWGc::Dwg_Entity_MTEXT_flow_reversed_get;
*swig_flow_reversed_set = *LibreDWGc::Dwg_Entity_MTEXT_flow_reversed_set;
*swig_column_heights_get = *LibreDWGc::Dwg_Entity_MTEXT_column_heights_get;
*swig_column_heights_set = *LibreDWGc::Dwg_Entity_MTEXT_column_heights_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_MTEXT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_MTEXT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_LEADER ##############

package LibreDWG::Dwg_Entity_LEADER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_LEADER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_LEADER_parent_set;
*swig_unknown_bit_1_get = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_1_get;
*swig_unknown_bit_1_set = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_1_set;
*swig_annot_type_get = *LibreDWGc::Dwg_Entity_LEADER_annot_type_get;
*swig_annot_type_set = *LibreDWGc::Dwg_Entity_LEADER_annot_type_set;
*swig_path_type_get = *LibreDWGc::Dwg_Entity_LEADER_path_type_get;
*swig_path_type_set = *LibreDWGc::Dwg_Entity_LEADER_path_type_set;
*swig_numpts_get = *LibreDWGc::Dwg_Entity_LEADER_numpts_get;
*swig_numpts_set = *LibreDWGc::Dwg_Entity_LEADER_numpts_set;
*swig_points_get = *LibreDWGc::Dwg_Entity_LEADER_points_get;
*swig_points_set = *LibreDWGc::Dwg_Entity_LEADER_points_set;
*swig_origin_get = *LibreDWGc::Dwg_Entity_LEADER_origin_get;
*swig_origin_set = *LibreDWGc::Dwg_Entity_LEADER_origin_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_LEADER_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_LEADER_extrusion_set;
*swig_x_direction_get = *LibreDWGc::Dwg_Entity_LEADER_x_direction_get;
*swig_x_direction_set = *LibreDWGc::Dwg_Entity_LEADER_x_direction_set;
*swig_offset_to_block_ins_pt_get = *LibreDWGc::Dwg_Entity_LEADER_offset_to_block_ins_pt_get;
*swig_offset_to_block_ins_pt_set = *LibreDWGc::Dwg_Entity_LEADER_offset_to_block_ins_pt_set;
*swig_endptproj_get = *LibreDWGc::Dwg_Entity_LEADER_endptproj_get;
*swig_endptproj_set = *LibreDWGc::Dwg_Entity_LEADER_endptproj_set;
*swig_dimgap_get = *LibreDWGc::Dwg_Entity_LEADER_dimgap_get;
*swig_dimgap_set = *LibreDWGc::Dwg_Entity_LEADER_dimgap_set;
*swig_box_height_get = *LibreDWGc::Dwg_Entity_LEADER_box_height_get;
*swig_box_height_set = *LibreDWGc::Dwg_Entity_LEADER_box_height_set;
*swig_box_width_get = *LibreDWGc::Dwg_Entity_LEADER_box_width_get;
*swig_box_width_set = *LibreDWGc::Dwg_Entity_LEADER_box_width_set;
*swig_hooklineonxdir_get = *LibreDWGc::Dwg_Entity_LEADER_hooklineonxdir_get;
*swig_hooklineonxdir_set = *LibreDWGc::Dwg_Entity_LEADER_hooklineonxdir_set;
*swig_arrowhead_on_get = *LibreDWGc::Dwg_Entity_LEADER_arrowhead_on_get;
*swig_arrowhead_on_set = *LibreDWGc::Dwg_Entity_LEADER_arrowhead_on_set;
*swig_arrowhead_type_get = *LibreDWGc::Dwg_Entity_LEADER_arrowhead_type_get;
*swig_arrowhead_type_set = *LibreDWGc::Dwg_Entity_LEADER_arrowhead_type_set;
*swig_dimasz_get = *LibreDWGc::Dwg_Entity_LEADER_dimasz_get;
*swig_dimasz_set = *LibreDWGc::Dwg_Entity_LEADER_dimasz_set;
*swig_unknown_bit_2_get = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_2_get;
*swig_unknown_bit_2_set = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_2_set;
*swig_unknown_bit_3_get = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_3_get;
*swig_unknown_bit_3_set = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_3_set;
*swig_unknown_short_1_get = *LibreDWGc::Dwg_Entity_LEADER_unknown_short_1_get;
*swig_unknown_short_1_set = *LibreDWGc::Dwg_Entity_LEADER_unknown_short_1_set;
*swig_byblock_color_get = *LibreDWGc::Dwg_Entity_LEADER_byblock_color_get;
*swig_byblock_color_set = *LibreDWGc::Dwg_Entity_LEADER_byblock_color_set;
*swig_unknown_bit_4_get = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_4_get;
*swig_unknown_bit_4_set = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_4_set;
*swig_unknown_bit_5_get = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_5_get;
*swig_unknown_bit_5_set = *LibreDWGc::Dwg_Entity_LEADER_unknown_bit_5_set;
*swig_associated_annotation_get = *LibreDWGc::Dwg_Entity_LEADER_associated_annotation_get;
*swig_associated_annotation_set = *LibreDWGc::Dwg_Entity_LEADER_associated_annotation_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_LEADER_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_LEADER_dimstyle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_LEADER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_LEADER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_TOLERANCE ##############

package LibreDWG::Dwg_Entity_TOLERANCE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_TOLERANCE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_TOLERANCE_parent_set;
*swig_unknown_short_get = *LibreDWGc::Dwg_Entity_TOLERANCE_unknown_short_get;
*swig_unknown_short_set = *LibreDWGc::Dwg_Entity_TOLERANCE_unknown_short_set;
*swig_height_get = *LibreDWGc::Dwg_Entity_TOLERANCE_height_get;
*swig_height_set = *LibreDWGc::Dwg_Entity_TOLERANCE_height_set;
*swig_dimgap_get = *LibreDWGc::Dwg_Entity_TOLERANCE_dimgap_get;
*swig_dimgap_set = *LibreDWGc::Dwg_Entity_TOLERANCE_dimgap_set;
*swig_ins_pt_get = *LibreDWGc::Dwg_Entity_TOLERANCE_ins_pt_get;
*swig_ins_pt_set = *LibreDWGc::Dwg_Entity_TOLERANCE_ins_pt_set;
*swig_x_direction_get = *LibreDWGc::Dwg_Entity_TOLERANCE_x_direction_get;
*swig_x_direction_set = *LibreDWGc::Dwg_Entity_TOLERANCE_x_direction_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_TOLERANCE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_TOLERANCE_extrusion_set;
*swig_text_string_get = *LibreDWGc::Dwg_Entity_TOLERANCE_text_string_get;
*swig_text_string_set = *LibreDWGc::Dwg_Entity_TOLERANCE_text_string_set;
*swig_dimstyle_get = *LibreDWGc::Dwg_Entity_TOLERANCE_dimstyle_get;
*swig_dimstyle_set = *LibreDWGc::Dwg_Entity_TOLERANCE_dimstyle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_TOLERANCE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_TOLERANCE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_MLINE_line ##############

package LibreDWG::Dwg_MLINE_line;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_MLINE_line_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_MLINE_line_parent_set;
*swig_num_segparms_get = *LibreDWGc::Dwg_MLINE_line_num_segparms_get;
*swig_num_segparms_set = *LibreDWGc::Dwg_MLINE_line_num_segparms_set;
*swig_segparms_get = *LibreDWGc::Dwg_MLINE_line_segparms_get;
*swig_segparms_set = *LibreDWGc::Dwg_MLINE_line_segparms_set;
*swig_num_areafillparms_get = *LibreDWGc::Dwg_MLINE_line_num_areafillparms_get;
*swig_num_areafillparms_set = *LibreDWGc::Dwg_MLINE_line_num_areafillparms_set;
*swig_areafillparms_get = *LibreDWGc::Dwg_MLINE_line_areafillparms_get;
*swig_areafillparms_set = *LibreDWGc::Dwg_MLINE_line_areafillparms_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_MLINE_line(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_MLINE_line($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_MLINE_vertex ##############

package LibreDWG::Dwg_MLINE_vertex;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_MLINE_vertex_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_MLINE_vertex_parent_set;
*swig_vertex_get = *LibreDWGc::Dwg_MLINE_vertex_vertex_get;
*swig_vertex_set = *LibreDWGc::Dwg_MLINE_vertex_vertex_set;
*swig_vertex_direction_get = *LibreDWGc::Dwg_MLINE_vertex_vertex_direction_get;
*swig_vertex_direction_set = *LibreDWGc::Dwg_MLINE_vertex_vertex_direction_set;
*swig_miter_direction_get = *LibreDWGc::Dwg_MLINE_vertex_miter_direction_get;
*swig_miter_direction_set = *LibreDWGc::Dwg_MLINE_vertex_miter_direction_set;
*swig_num_lines_get = *LibreDWGc::Dwg_MLINE_vertex_num_lines_get;
*swig_num_lines_set = *LibreDWGc::Dwg_MLINE_vertex_num_lines_set;
*swig_lines_get = *LibreDWGc::Dwg_MLINE_vertex_lines_get;
*swig_lines_set = *LibreDWGc::Dwg_MLINE_vertex_lines_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_MLINE_vertex(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_MLINE_vertex($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_MLINE ##############

package LibreDWG::Dwg_Entity_MLINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_MLINE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_MLINE_parent_set;
*swig_scale_get = *LibreDWGc::Dwg_Entity_MLINE_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_Entity_MLINE_scale_set;
*swig_justification_get = *LibreDWGc::Dwg_Entity_MLINE_justification_get;
*swig_justification_set = *LibreDWGc::Dwg_Entity_MLINE_justification_set;
*swig_base_point_get = *LibreDWGc::Dwg_Entity_MLINE_base_point_get;
*swig_base_point_set = *LibreDWGc::Dwg_Entity_MLINE_base_point_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_MLINE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_MLINE_extrusion_set;
*swig_flags_get = *LibreDWGc::Dwg_Entity_MLINE_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_Entity_MLINE_flags_set;
*swig_num_lines_get = *LibreDWGc::Dwg_Entity_MLINE_num_lines_get;
*swig_num_lines_set = *LibreDWGc::Dwg_Entity_MLINE_num_lines_set;
*swig_num_verts_get = *LibreDWGc::Dwg_Entity_MLINE_num_verts_get;
*swig_num_verts_set = *LibreDWGc::Dwg_Entity_MLINE_num_verts_set;
*swig_verts_get = *LibreDWGc::Dwg_Entity_MLINE_verts_get;
*swig_verts_set = *LibreDWGc::Dwg_Entity_MLINE_verts_set;
*swig_mlinestyle_get = *LibreDWGc::Dwg_Entity_MLINE_mlinestyle_get;
*swig_mlinestyle_set = *LibreDWGc::Dwg_Entity_MLINE_mlinestyle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_MLINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_MLINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_BLOCK_CONTROL ##############

package LibreDWG::Dwg_Object_BLOCK_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_xdicobjhandle_set;
*swig_block_headers_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_block_headers_get;
*swig_block_headers_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_block_headers_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_reactors_set;
*swig_model_space_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_model_space_get;
*swig_model_space_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_model_space_set;
*swig_paper_space_get = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_paper_space_get;
*swig_paper_space_set = *LibreDWGc::Dwg_Object_BLOCK_CONTROL_paper_space_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_BLOCK_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_BLOCK_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_BLOCK_HEADER ##############

package LibreDWG::Dwg_Object_BLOCK_HEADER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefdep_set;
*swig___iterator_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER___iterator_get;
*swig___iterator_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER___iterator_set;
*swig_flag2_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_flag2_get;
*swig_flag2_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_flag2_set;
*swig_flag3_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_flag3_get;
*swig_flag3_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_flag3_set;
*swig_anonymous_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_anonymous_get;
*swig_anonymous_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_anonymous_set;
*swig_hasattrs_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_hasattrs_get;
*swig_hasattrs_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_hasattrs_set;
*swig_blkisxref_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_blkisxref_get;
*swig_blkisxref_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_blkisxref_set;
*swig_xrefoverlaid_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefoverlaid_get;
*swig_xrefoverlaid_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xrefoverlaid_set;
*swig_loaded_bit_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_loaded_bit_get;
*swig_loaded_bit_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_loaded_bit_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_num_owned_set;
*swig_base_pt_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_base_pt_get;
*swig_base_pt_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_base_pt_set;
*swig_xref_pname_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xref_pname_get;
*swig_xref_pname_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_xref_pname_set;
*swig_num_inserts_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_num_inserts_get;
*swig_num_inserts_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_num_inserts_set;
*swig_description_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_description_get;
*swig_description_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_description_set;
*swig_preview_data_size_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_preview_data_size_get;
*swig_preview_data_size_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_preview_data_size_set;
*swig_preview_data_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_preview_data_get;
*swig_preview_data_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_preview_data_set;
*swig_insert_units_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_insert_units_get;
*swig_insert_units_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_insert_units_set;
*swig_explodable_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_explodable_get;
*swig_explodable_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_explodable_set;
*swig_block_scaling_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_block_scaling_get;
*swig_block_scaling_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_block_scaling_set;
*swig_block_control_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_block_control_get;
*swig_block_control_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_block_control_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_null_handle_set;
*swig_block_entity_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_block_entity_get;
*swig_block_entity_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_block_entity_set;
*swig_first_entity_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_first_entity_get;
*swig_first_entity_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_first_entity_set;
*swig_last_entity_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_last_entity_get;
*swig_last_entity_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_last_entity_set;
*swig_entities_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_entities_get;
*swig_entities_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_entities_set;
*swig_endblk_entity_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_endblk_entity_get;
*swig_endblk_entity_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_endblk_entity_set;
*swig_insert_handles_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_insert_handles_get;
*swig_insert_handles_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_insert_handles_set;
*swig_layout_handle_get = *LibreDWGc::Dwg_Object_BLOCK_HEADER_layout_handle_get;
*swig_layout_handle_set = *LibreDWGc::Dwg_Object_BLOCK_HEADER_layout_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_BLOCK_HEADER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_BLOCK_HEADER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LAYER_CONTROL ##############

package LibreDWG::Dwg_Object_LAYER_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LAYER_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LAYER_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_LAYER_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_LAYER_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_LAYER_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_LAYER_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_LAYER_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_LAYER_CONTROL_xdicobjhandle_set;
*swig_layers_get = *LibreDWGc::Dwg_Object_LAYER_CONTROL_layers_get;
*swig_layers_set = *LibreDWGc::Dwg_Object_LAYER_CONTROL_layers_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_LAYER_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_LAYER_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_LAYER_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_LAYER_CONTROL_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LAYER_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LAYER_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LAYER ##############

package LibreDWG::Dwg_Object_LAYER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LAYER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LAYER_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_LAYER_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_LAYER_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_LAYER_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_LAYER_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_LAYER_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_LAYER_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_LAYER_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_LAYER_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_LAYER_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_LAYER_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_LAYER_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_LAYER_xrefdep_set;
*swig_frozen_get = *LibreDWGc::Dwg_Object_LAYER_frozen_get;
*swig_frozen_set = *LibreDWGc::Dwg_Object_LAYER_frozen_set;
*swig_on_get = *LibreDWGc::Dwg_Object_LAYER_on_get;
*swig_on_set = *LibreDWGc::Dwg_Object_LAYER_on_set;
*swig_frozen_in_new_get = *LibreDWGc::Dwg_Object_LAYER_frozen_in_new_get;
*swig_frozen_in_new_set = *LibreDWGc::Dwg_Object_LAYER_frozen_in_new_set;
*swig_locked_get = *LibreDWGc::Dwg_Object_LAYER_locked_get;
*swig_locked_set = *LibreDWGc::Dwg_Object_LAYER_locked_set;
*swig_plotflag_get = *LibreDWGc::Dwg_Object_LAYER_plotflag_get;
*swig_plotflag_set = *LibreDWGc::Dwg_Object_LAYER_plotflag_set;
*swig_linewidth_get = *LibreDWGc::Dwg_Object_LAYER_linewidth_get;
*swig_linewidth_set = *LibreDWGc::Dwg_Object_LAYER_linewidth_set;
*swig_color_get = *LibreDWGc::Dwg_Object_LAYER_color_get;
*swig_color_set = *LibreDWGc::Dwg_Object_LAYER_color_set;
*swig_color_rs_get = *LibreDWGc::Dwg_Object_LAYER_color_rs_get;
*swig_color_rs_set = *LibreDWGc::Dwg_Object_LAYER_color_rs_set;
*swig_linetype_rs_get = *LibreDWGc::Dwg_Object_LAYER_linetype_rs_get;
*swig_linetype_rs_set = *LibreDWGc::Dwg_Object_LAYER_linetype_rs_set;
*swig_layer_control_get = *LibreDWGc::Dwg_Object_LAYER_layer_control_get;
*swig_layer_control_set = *LibreDWGc::Dwg_Object_LAYER_layer_control_set;
*swig_xref_get = *LibreDWGc::Dwg_Object_LAYER_xref_get;
*swig_xref_set = *LibreDWGc::Dwg_Object_LAYER_xref_set;
*swig_plotstyle_get = *LibreDWGc::Dwg_Object_LAYER_plotstyle_get;
*swig_plotstyle_set = *LibreDWGc::Dwg_Object_LAYER_plotstyle_set;
*swig_material_get = *LibreDWGc::Dwg_Object_LAYER_material_get;
*swig_material_set = *LibreDWGc::Dwg_Object_LAYER_material_set;
*swig_linetype_get = *LibreDWGc::Dwg_Object_LAYER_linetype_get;
*swig_linetype_set = *LibreDWGc::Dwg_Object_LAYER_linetype_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_LAYER_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_LAYER_null_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LAYER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LAYER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_STYLE_CONTROL ##############

package LibreDWG::Dwg_Object_STYLE_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_STYLE_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_STYLE_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_STYLE_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_STYLE_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_STYLE_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_STYLE_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_STYLE_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_STYLE_CONTROL_xdicobjhandle_set;
*swig_styles_get = *LibreDWGc::Dwg_Object_STYLE_CONTROL_styles_get;
*swig_styles_set = *LibreDWGc::Dwg_Object_STYLE_CONTROL_styles_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_STYLE_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_STYLE_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_STYLE_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_STYLE_CONTROL_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_STYLE_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_STYLE_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_STYLE ##############

package LibreDWG::Dwg_Object_STYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_STYLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_STYLE_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_STYLE_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_STYLE_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_STYLE_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_STYLE_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_STYLE_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_STYLE_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_STYLE_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_STYLE_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_STYLE_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_STYLE_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_STYLE_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_STYLE_xrefdep_set;
*swig_vertical_get = *LibreDWGc::Dwg_Object_STYLE_vertical_get;
*swig_vertical_set = *LibreDWGc::Dwg_Object_STYLE_vertical_set;
*swig_shape_file_get = *LibreDWGc::Dwg_Object_STYLE_shape_file_get;
*swig_shape_file_set = *LibreDWGc::Dwg_Object_STYLE_shape_file_set;
*swig_fixed_height_get = *LibreDWGc::Dwg_Object_STYLE_fixed_height_get;
*swig_fixed_height_set = *LibreDWGc::Dwg_Object_STYLE_fixed_height_set;
*swig_width_factor_get = *LibreDWGc::Dwg_Object_STYLE_width_factor_get;
*swig_width_factor_set = *LibreDWGc::Dwg_Object_STYLE_width_factor_set;
*swig_oblique_ang_get = *LibreDWGc::Dwg_Object_STYLE_oblique_ang_get;
*swig_oblique_ang_set = *LibreDWGc::Dwg_Object_STYLE_oblique_ang_set;
*swig_generation_get = *LibreDWGc::Dwg_Object_STYLE_generation_get;
*swig_generation_set = *LibreDWGc::Dwg_Object_STYLE_generation_set;
*swig_last_height_get = *LibreDWGc::Dwg_Object_STYLE_last_height_get;
*swig_last_height_set = *LibreDWGc::Dwg_Object_STYLE_last_height_set;
*swig_font_name_get = *LibreDWGc::Dwg_Object_STYLE_font_name_get;
*swig_font_name_set = *LibreDWGc::Dwg_Object_STYLE_font_name_set;
*swig_bigfont_name_get = *LibreDWGc::Dwg_Object_STYLE_bigfont_name_get;
*swig_bigfont_name_set = *LibreDWGc::Dwg_Object_STYLE_bigfont_name_set;
*swig_style_control_get = *LibreDWGc::Dwg_Object_STYLE_style_control_get;
*swig_style_control_set = *LibreDWGc::Dwg_Object_STYLE_style_control_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_STYLE_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_STYLE_null_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_STYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_STYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LTYPE_CONTROL ##############

package LibreDWG::Dwg_Object_LTYPE_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_xdicobjhandle_set;
*swig_linetypes_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_linetypes_get;
*swig_linetypes_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_linetypes_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_reactors_set;
*swig_bylayer_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_bylayer_get;
*swig_bylayer_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_bylayer_set;
*swig_byblock_get = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_byblock_get;
*swig_byblock_set = *LibreDWGc::Dwg_Object_LTYPE_CONTROL_byblock_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LTYPE_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LTYPE_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_LTYPE_dash ##############

package LibreDWG::Dwg_LTYPE_dash;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_LTYPE_dash_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_LTYPE_dash_parent_set;
*swig_length_get = *LibreDWGc::Dwg_LTYPE_dash_length_get;
*swig_length_set = *LibreDWGc::Dwg_LTYPE_dash_length_set;
*swig_complex_shapecode_get = *LibreDWGc::Dwg_LTYPE_dash_complex_shapecode_get;
*swig_complex_shapecode_set = *LibreDWGc::Dwg_LTYPE_dash_complex_shapecode_set;
*swig_x_offset_get = *LibreDWGc::Dwg_LTYPE_dash_x_offset_get;
*swig_x_offset_set = *LibreDWGc::Dwg_LTYPE_dash_x_offset_set;
*swig_y_offset_get = *LibreDWGc::Dwg_LTYPE_dash_y_offset_get;
*swig_y_offset_set = *LibreDWGc::Dwg_LTYPE_dash_y_offset_set;
*swig_scale_get = *LibreDWGc::Dwg_LTYPE_dash_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_LTYPE_dash_scale_set;
*swig_rotation_get = *LibreDWGc::Dwg_LTYPE_dash_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_LTYPE_dash_rotation_set;
*swig_shape_flag_get = *LibreDWGc::Dwg_LTYPE_dash_shape_flag_get;
*swig_shape_flag_set = *LibreDWGc::Dwg_LTYPE_dash_shape_flag_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_LTYPE_dash(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_LTYPE_dash($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LTYPE ##############

package LibreDWG::Dwg_Object_LTYPE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LTYPE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LTYPE_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_LTYPE_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_LTYPE_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_LTYPE_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_LTYPE_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_LTYPE_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_LTYPE_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_LTYPE_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_LTYPE_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_LTYPE_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_LTYPE_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_LTYPE_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_LTYPE_xrefdep_set;
*swig_description_get = *LibreDWGc::Dwg_Object_LTYPE_description_get;
*swig_description_set = *LibreDWGc::Dwg_Object_LTYPE_description_set;
*swig_pattern_len_get = *LibreDWGc::Dwg_Object_LTYPE_pattern_len_get;
*swig_pattern_len_set = *LibreDWGc::Dwg_Object_LTYPE_pattern_len_set;
*swig_alignment_get = *LibreDWGc::Dwg_Object_LTYPE_alignment_get;
*swig_alignment_set = *LibreDWGc::Dwg_Object_LTYPE_alignment_set;
*swig_num_dashes_get = *LibreDWGc::Dwg_Object_LTYPE_num_dashes_get;
*swig_num_dashes_set = *LibreDWGc::Dwg_Object_LTYPE_num_dashes_set;
*swig_dash_get = *LibreDWGc::Dwg_Object_LTYPE_dash_get;
*swig_dash_set = *LibreDWGc::Dwg_Object_LTYPE_dash_set;
*swig_dashes_r11_get = *LibreDWGc::Dwg_Object_LTYPE_dashes_r11_get;
*swig_dashes_r11_set = *LibreDWGc::Dwg_Object_LTYPE_dashes_r11_set;
*swig_strings_area_get = *LibreDWGc::Dwg_Object_LTYPE_strings_area_get;
*swig_strings_area_set = *LibreDWGc::Dwg_Object_LTYPE_strings_area_set;
*swig_linetype_control_get = *LibreDWGc::Dwg_Object_LTYPE_linetype_control_get;
*swig_linetype_control_set = *LibreDWGc::Dwg_Object_LTYPE_linetype_control_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_LTYPE_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_LTYPE_null_handle_set;
*swig_styles_get = *LibreDWGc::Dwg_Object_LTYPE_styles_get;
*swig_styles_set = *LibreDWGc::Dwg_Object_LTYPE_styles_set;
*swig_text_area_is_present_get = *LibreDWGc::Dwg_Object_LTYPE_text_area_is_present_get;
*swig_text_area_is_present_set = *LibreDWGc::Dwg_Object_LTYPE_text_area_is_present_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LTYPE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LTYPE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VIEW_CONTROL ##############

package LibreDWG::Dwg_Object_VIEW_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_VIEW_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VIEW_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_VIEW_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_VIEW_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_VIEW_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_VIEW_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_VIEW_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_VIEW_CONTROL_xdicobjhandle_set;
*swig_views_get = *LibreDWGc::Dwg_Object_VIEW_CONTROL_views_get;
*swig_views_set = *LibreDWGc::Dwg_Object_VIEW_CONTROL_views_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_VIEW_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_VIEW_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_VIEW_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_VIEW_CONTROL_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VIEW_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VIEW_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VIEW ##############

package LibreDWG::Dwg_Object_VIEW;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_VIEW_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VIEW_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_VIEW_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_VIEW_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_VIEW_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_VIEW_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_VIEW_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_VIEW_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_VIEW_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_VIEW_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_VIEW_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_VIEW_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_VIEW_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_VIEW_xrefdep_set;
*swig_height_get = *LibreDWGc::Dwg_Object_VIEW_height_get;
*swig_height_set = *LibreDWGc::Dwg_Object_VIEW_height_set;
*swig_width_get = *LibreDWGc::Dwg_Object_VIEW_width_get;
*swig_width_set = *LibreDWGc::Dwg_Object_VIEW_width_set;
*swig_center_get = *LibreDWGc::Dwg_Object_VIEW_center_get;
*swig_center_set = *LibreDWGc::Dwg_Object_VIEW_center_set;
*swig_target_get = *LibreDWGc::Dwg_Object_VIEW_target_get;
*swig_target_set = *LibreDWGc::Dwg_Object_VIEW_target_set;
*swig_direction_get = *LibreDWGc::Dwg_Object_VIEW_direction_get;
*swig_direction_set = *LibreDWGc::Dwg_Object_VIEW_direction_set;
*swig_twist_angle_get = *LibreDWGc::Dwg_Object_VIEW_twist_angle_get;
*swig_twist_angle_set = *LibreDWGc::Dwg_Object_VIEW_twist_angle_set;
*swig_lens_length_get = *LibreDWGc::Dwg_Object_VIEW_lens_length_get;
*swig_lens_length_set = *LibreDWGc::Dwg_Object_VIEW_lens_length_set;
*swig_front_clip_get = *LibreDWGc::Dwg_Object_VIEW_front_clip_get;
*swig_front_clip_set = *LibreDWGc::Dwg_Object_VIEW_front_clip_set;
*swig_back_clip_get = *LibreDWGc::Dwg_Object_VIEW_back_clip_get;
*swig_back_clip_set = *LibreDWGc::Dwg_Object_VIEW_back_clip_set;
*swig_VIEWMODE_get = *LibreDWGc::Dwg_Object_VIEW_VIEWMODE_get;
*swig_VIEWMODE_set = *LibreDWGc::Dwg_Object_VIEW_VIEWMODE_set;
*swig_render_mode_get = *LibreDWGc::Dwg_Object_VIEW_render_mode_get;
*swig_render_mode_set = *LibreDWGc::Dwg_Object_VIEW_render_mode_set;
*swig_use_default_lights_get = *LibreDWGc::Dwg_Object_VIEW_use_default_lights_get;
*swig_use_default_lights_set = *LibreDWGc::Dwg_Object_VIEW_use_default_lights_set;
*swig_default_lightning_type_get = *LibreDWGc::Dwg_Object_VIEW_default_lightning_type_get;
*swig_default_lightning_type_set = *LibreDWGc::Dwg_Object_VIEW_default_lightning_type_set;
*swig_brightness_get = *LibreDWGc::Dwg_Object_VIEW_brightness_get;
*swig_brightness_set = *LibreDWGc::Dwg_Object_VIEW_brightness_set;
*swig_contrast_get = *LibreDWGc::Dwg_Object_VIEW_contrast_get;
*swig_contrast_set = *LibreDWGc::Dwg_Object_VIEW_contrast_set;
*swig_ambient_color_get = *LibreDWGc::Dwg_Object_VIEW_ambient_color_get;
*swig_ambient_color_set = *LibreDWGc::Dwg_Object_VIEW_ambient_color_set;
*swig_pspace_flag_get = *LibreDWGc::Dwg_Object_VIEW_pspace_flag_get;
*swig_pspace_flag_set = *LibreDWGc::Dwg_Object_VIEW_pspace_flag_set;
*swig_associated_ucs_get = *LibreDWGc::Dwg_Object_VIEW_associated_ucs_get;
*swig_associated_ucs_set = *LibreDWGc::Dwg_Object_VIEW_associated_ucs_set;
*swig_origin_get = *LibreDWGc::Dwg_Object_VIEW_origin_get;
*swig_origin_set = *LibreDWGc::Dwg_Object_VIEW_origin_set;
*swig_x_direction_get = *LibreDWGc::Dwg_Object_VIEW_x_direction_get;
*swig_x_direction_set = *LibreDWGc::Dwg_Object_VIEW_x_direction_set;
*swig_y_direction_get = *LibreDWGc::Dwg_Object_VIEW_y_direction_get;
*swig_y_direction_set = *LibreDWGc::Dwg_Object_VIEW_y_direction_set;
*swig_elevation_get = *LibreDWGc::Dwg_Object_VIEW_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Object_VIEW_elevation_set;
*swig_orthographic_view_type_get = *LibreDWGc::Dwg_Object_VIEW_orthographic_view_type_get;
*swig_orthographic_view_type_set = *LibreDWGc::Dwg_Object_VIEW_orthographic_view_type_set;
*swig_camera_plottable_get = *LibreDWGc::Dwg_Object_VIEW_camera_plottable_get;
*swig_camera_plottable_set = *LibreDWGc::Dwg_Object_VIEW_camera_plottable_set;
*swig_view_control_get = *LibreDWGc::Dwg_Object_VIEW_view_control_get;
*swig_view_control_set = *LibreDWGc::Dwg_Object_VIEW_view_control_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_VIEW_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_VIEW_null_handle_set;
*swig_background_handle_get = *LibreDWGc::Dwg_Object_VIEW_background_handle_get;
*swig_background_handle_set = *LibreDWGc::Dwg_Object_VIEW_background_handle_set;
*swig_visual_style_handle_get = *LibreDWGc::Dwg_Object_VIEW_visual_style_handle_get;
*swig_visual_style_handle_set = *LibreDWGc::Dwg_Object_VIEW_visual_style_handle_set;
*swig_sun_handle_get = *LibreDWGc::Dwg_Object_VIEW_sun_handle_get;
*swig_sun_handle_set = *LibreDWGc::Dwg_Object_VIEW_sun_handle_set;
*swig_base_ucs_handle_get = *LibreDWGc::Dwg_Object_VIEW_base_ucs_handle_get;
*swig_base_ucs_handle_set = *LibreDWGc::Dwg_Object_VIEW_base_ucs_handle_set;
*swig_named_ucs_handle_get = *LibreDWGc::Dwg_Object_VIEW_named_ucs_handle_get;
*swig_named_ucs_handle_set = *LibreDWGc::Dwg_Object_VIEW_named_ucs_handle_set;
*swig_live_section_handle_get = *LibreDWGc::Dwg_Object_VIEW_live_section_handle_get;
*swig_live_section_handle_set = *LibreDWGc::Dwg_Object_VIEW_live_section_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VIEW(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VIEW($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_UCS_CONTROL ##############

package LibreDWG::Dwg_Object_UCS_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_UCS_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_UCS_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_UCS_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_UCS_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_UCS_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_UCS_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_UCS_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_UCS_CONTROL_xdicobjhandle_set;
*swig_ucs_get = *LibreDWGc::Dwg_Object_UCS_CONTROL_ucs_get;
*swig_ucs_set = *LibreDWGc::Dwg_Object_UCS_CONTROL_ucs_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_UCS_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_UCS_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_UCS_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_UCS_CONTROL_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_UCS_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_UCS_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_UCS ##############

package LibreDWG::Dwg_Object_UCS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_UCS_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_UCS_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_UCS_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_UCS_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_UCS_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_UCS_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_UCS_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_UCS_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_UCS_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_UCS_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_UCS_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_UCS_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_UCS_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_UCS_xrefdep_set;
*swig_origin_get = *LibreDWGc::Dwg_Object_UCS_origin_get;
*swig_origin_set = *LibreDWGc::Dwg_Object_UCS_origin_set;
*swig_x_direction_get = *LibreDWGc::Dwg_Object_UCS_x_direction_get;
*swig_x_direction_set = *LibreDWGc::Dwg_Object_UCS_x_direction_set;
*swig_y_direction_get = *LibreDWGc::Dwg_Object_UCS_y_direction_get;
*swig_y_direction_set = *LibreDWGc::Dwg_Object_UCS_y_direction_set;
*swig_elevation_get = *LibreDWGc::Dwg_Object_UCS_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Object_UCS_elevation_set;
*swig_orthographic_view_type_get = *LibreDWGc::Dwg_Object_UCS_orthographic_view_type_get;
*swig_orthographic_view_type_set = *LibreDWGc::Dwg_Object_UCS_orthographic_view_type_set;
*swig_orthographic_type_get = *LibreDWGc::Dwg_Object_UCS_orthographic_type_get;
*swig_orthographic_type_set = *LibreDWGc::Dwg_Object_UCS_orthographic_type_set;
*swig_ucs_control_get = *LibreDWGc::Dwg_Object_UCS_ucs_control_get;
*swig_ucs_control_set = *LibreDWGc::Dwg_Object_UCS_ucs_control_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_UCS_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_UCS_null_handle_set;
*swig_base_ucs_handle_get = *LibreDWGc::Dwg_Object_UCS_base_ucs_handle_get;
*swig_base_ucs_handle_set = *LibreDWGc::Dwg_Object_UCS_base_ucs_handle_set;
*swig_unknown_get = *LibreDWGc::Dwg_Object_UCS_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Object_UCS_unknown_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_UCS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_UCS($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VPORT_CONTROL ##############

package LibreDWG::Dwg_Object_VPORT_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_VPORT_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VPORT_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_VPORT_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_VPORT_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_VPORT_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_VPORT_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_VPORT_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_VPORT_CONTROL_xdicobjhandle_set;
*swig_vports_get = *LibreDWGc::Dwg_Object_VPORT_CONTROL_vports_get;
*swig_vports_set = *LibreDWGc::Dwg_Object_VPORT_CONTROL_vports_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_VPORT_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_VPORT_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_VPORT_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_VPORT_CONTROL_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VPORT_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VPORT_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VPORT ##############

package LibreDWG::Dwg_Object_VPORT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_VPORT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VPORT_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_VPORT_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_VPORT_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_VPORT_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_VPORT_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_VPORT_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_VPORT_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_VPORT_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_VPORT_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_VPORT_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_VPORT_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_VPORT_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_VPORT_xrefdep_set;
*swig_VIEWSIZE_get = *LibreDWGc::Dwg_Object_VPORT_VIEWSIZE_get;
*swig_VIEWSIZE_set = *LibreDWGc::Dwg_Object_VPORT_VIEWSIZE_set;
*swig_aspect_ratio_get = *LibreDWGc::Dwg_Object_VPORT_aspect_ratio_get;
*swig_aspect_ratio_set = *LibreDWGc::Dwg_Object_VPORT_aspect_ratio_set;
*swig_VIEWCTR_get = *LibreDWGc::Dwg_Object_VPORT_VIEWCTR_get;
*swig_VIEWCTR_set = *LibreDWGc::Dwg_Object_VPORT_VIEWCTR_set;
*swig_view_target_get = *LibreDWGc::Dwg_Object_VPORT_view_target_get;
*swig_view_target_set = *LibreDWGc::Dwg_Object_VPORT_view_target_set;
*swig_VIEWDIR_get = *LibreDWGc::Dwg_Object_VPORT_VIEWDIR_get;
*swig_VIEWDIR_set = *LibreDWGc::Dwg_Object_VPORT_VIEWDIR_set;
*swig_view_twist_get = *LibreDWGc::Dwg_Object_VPORT_view_twist_get;
*swig_view_twist_set = *LibreDWGc::Dwg_Object_VPORT_view_twist_set;
*swig_lens_length_get = *LibreDWGc::Dwg_Object_VPORT_lens_length_get;
*swig_lens_length_set = *LibreDWGc::Dwg_Object_VPORT_lens_length_set;
*swig_front_clip_get = *LibreDWGc::Dwg_Object_VPORT_front_clip_get;
*swig_front_clip_set = *LibreDWGc::Dwg_Object_VPORT_front_clip_set;
*swig_back_clip_get = *LibreDWGc::Dwg_Object_VPORT_back_clip_get;
*swig_back_clip_set = *LibreDWGc::Dwg_Object_VPORT_back_clip_set;
*swig_VIEWMODE_get = *LibreDWGc::Dwg_Object_VPORT_VIEWMODE_get;
*swig_VIEWMODE_set = *LibreDWGc::Dwg_Object_VPORT_VIEWMODE_set;
*swig_render_mode_get = *LibreDWGc::Dwg_Object_VPORT_render_mode_get;
*swig_render_mode_set = *LibreDWGc::Dwg_Object_VPORT_render_mode_set;
*swig_use_default_lights_get = *LibreDWGc::Dwg_Object_VPORT_use_default_lights_get;
*swig_use_default_lights_set = *LibreDWGc::Dwg_Object_VPORT_use_default_lights_set;
*swig_default_lightning_type_get = *LibreDWGc::Dwg_Object_VPORT_default_lightning_type_get;
*swig_default_lightning_type_set = *LibreDWGc::Dwg_Object_VPORT_default_lightning_type_set;
*swig_brightness_get = *LibreDWGc::Dwg_Object_VPORT_brightness_get;
*swig_brightness_set = *LibreDWGc::Dwg_Object_VPORT_brightness_set;
*swig_contrast_get = *LibreDWGc::Dwg_Object_VPORT_contrast_get;
*swig_contrast_set = *LibreDWGc::Dwg_Object_VPORT_contrast_set;
*swig_ambient_color_get = *LibreDWGc::Dwg_Object_VPORT_ambient_color_get;
*swig_ambient_color_set = *LibreDWGc::Dwg_Object_VPORT_ambient_color_set;
*swig_lower_left_get = *LibreDWGc::Dwg_Object_VPORT_lower_left_get;
*swig_lower_left_set = *LibreDWGc::Dwg_Object_VPORT_lower_left_set;
*swig_upper_right_get = *LibreDWGc::Dwg_Object_VPORT_upper_right_get;
*swig_upper_right_set = *LibreDWGc::Dwg_Object_VPORT_upper_right_set;
*swig_UCSFOLLOW_get = *LibreDWGc::Dwg_Object_VPORT_UCSFOLLOW_get;
*swig_UCSFOLLOW_set = *LibreDWGc::Dwg_Object_VPORT_UCSFOLLOW_set;
*swig_circle_zoom_get = *LibreDWGc::Dwg_Object_VPORT_circle_zoom_get;
*swig_circle_zoom_set = *LibreDWGc::Dwg_Object_VPORT_circle_zoom_set;
*swig_FASTZOOM_get = *LibreDWGc::Dwg_Object_VPORT_FASTZOOM_get;
*swig_FASTZOOM_set = *LibreDWGc::Dwg_Object_VPORT_FASTZOOM_set;
*swig_UCSICON_get = *LibreDWGc::Dwg_Object_VPORT_UCSICON_get;
*swig_UCSICON_set = *LibreDWGc::Dwg_Object_VPORT_UCSICON_set;
*swig_GRIDMODE_get = *LibreDWGc::Dwg_Object_VPORT_GRIDMODE_get;
*swig_GRIDMODE_set = *LibreDWGc::Dwg_Object_VPORT_GRIDMODE_set;
*swig_GRIDUNIT_get = *LibreDWGc::Dwg_Object_VPORT_GRIDUNIT_get;
*swig_GRIDUNIT_set = *LibreDWGc::Dwg_Object_VPORT_GRIDUNIT_set;
*swig_SNAPMODE_get = *LibreDWGc::Dwg_Object_VPORT_SNAPMODE_get;
*swig_SNAPMODE_set = *LibreDWGc::Dwg_Object_VPORT_SNAPMODE_set;
*swig_SNAPSTYLE_get = *LibreDWGc::Dwg_Object_VPORT_SNAPSTYLE_get;
*swig_SNAPSTYLE_set = *LibreDWGc::Dwg_Object_VPORT_SNAPSTYLE_set;
*swig_SNAPISOPAIR_get = *LibreDWGc::Dwg_Object_VPORT_SNAPISOPAIR_get;
*swig_SNAPISOPAIR_set = *LibreDWGc::Dwg_Object_VPORT_SNAPISOPAIR_set;
*swig_SNAPANG_get = *LibreDWGc::Dwg_Object_VPORT_SNAPANG_get;
*swig_SNAPANG_set = *LibreDWGc::Dwg_Object_VPORT_SNAPANG_set;
*swig_SNAPBASE_get = *LibreDWGc::Dwg_Object_VPORT_SNAPBASE_get;
*swig_SNAPBASE_set = *LibreDWGc::Dwg_Object_VPORT_SNAPBASE_set;
*swig_SNAPUNIT_get = *LibreDWGc::Dwg_Object_VPORT_SNAPUNIT_get;
*swig_SNAPUNIT_set = *LibreDWGc::Dwg_Object_VPORT_SNAPUNIT_set;
*swig_unknown_get = *LibreDWGc::Dwg_Object_VPORT_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Object_VPORT_unknown_set;
*swig_ucs_pre_viewport_get = *LibreDWGc::Dwg_Object_VPORT_ucs_pre_viewport_get;
*swig_ucs_pre_viewport_set = *LibreDWGc::Dwg_Object_VPORT_ucs_pre_viewport_set;
*swig_ucs_origin_get = *LibreDWGc::Dwg_Object_VPORT_ucs_origin_get;
*swig_ucs_origin_set = *LibreDWGc::Dwg_Object_VPORT_ucs_origin_set;
*swig_ucs_x_axis_get = *LibreDWGc::Dwg_Object_VPORT_ucs_x_axis_get;
*swig_ucs_x_axis_set = *LibreDWGc::Dwg_Object_VPORT_ucs_x_axis_set;
*swig_ucs_y_axis_get = *LibreDWGc::Dwg_Object_VPORT_ucs_y_axis_get;
*swig_ucs_y_axis_set = *LibreDWGc::Dwg_Object_VPORT_ucs_y_axis_set;
*swig_ucs_elevation_get = *LibreDWGc::Dwg_Object_VPORT_ucs_elevation_get;
*swig_ucs_elevation_set = *LibreDWGc::Dwg_Object_VPORT_ucs_elevation_set;
*swig_ucs_orthografic_type_get = *LibreDWGc::Dwg_Object_VPORT_ucs_orthografic_type_get;
*swig_ucs_orthografic_type_set = *LibreDWGc::Dwg_Object_VPORT_ucs_orthografic_type_set;
*swig_grid_flags_get = *LibreDWGc::Dwg_Object_VPORT_grid_flags_get;
*swig_grid_flags_set = *LibreDWGc::Dwg_Object_VPORT_grid_flags_set;
*swig_grid_major_get = *LibreDWGc::Dwg_Object_VPORT_grid_major_get;
*swig_grid_major_set = *LibreDWGc::Dwg_Object_VPORT_grid_major_set;
*swig_vport_control_get = *LibreDWGc::Dwg_Object_VPORT_vport_control_get;
*swig_vport_control_set = *LibreDWGc::Dwg_Object_VPORT_vport_control_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_VPORT_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_VPORT_null_handle_set;
*swig_background_handle_get = *LibreDWGc::Dwg_Object_VPORT_background_handle_get;
*swig_background_handle_set = *LibreDWGc::Dwg_Object_VPORT_background_handle_set;
*swig_visual_style_handle_get = *LibreDWGc::Dwg_Object_VPORT_visual_style_handle_get;
*swig_visual_style_handle_set = *LibreDWGc::Dwg_Object_VPORT_visual_style_handle_set;
*swig_shade_plot_handle_get = *LibreDWGc::Dwg_Object_VPORT_shade_plot_handle_get;
*swig_shade_plot_handle_set = *LibreDWGc::Dwg_Object_VPORT_shade_plot_handle_set;
*swig_named_ucs_handle_get = *LibreDWGc::Dwg_Object_VPORT_named_ucs_handle_get;
*swig_named_ucs_handle_set = *LibreDWGc::Dwg_Object_VPORT_named_ucs_handle_set;
*swig_base_ucs_handle_get = *LibreDWGc::Dwg_Object_VPORT_base_ucs_handle_get;
*swig_base_ucs_handle_set = *LibreDWGc::Dwg_Object_VPORT_base_ucs_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VPORT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VPORT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_APPID_CONTROL ##############

package LibreDWG::Dwg_Object_APPID_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_APPID_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_APPID_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_APPID_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_APPID_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_APPID_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_APPID_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_APPID_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_APPID_CONTROL_xdicobjhandle_set;
*swig_apps_get = *LibreDWGc::Dwg_Object_APPID_CONTROL_apps_get;
*swig_apps_set = *LibreDWGc::Dwg_Object_APPID_CONTROL_apps_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_APPID_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_APPID_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_APPID_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_APPID_CONTROL_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_APPID_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_APPID_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_APPID ##############

package LibreDWG::Dwg_Object_APPID;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_APPID_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_APPID_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_APPID_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_APPID_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_APPID_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_APPID_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_APPID_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_APPID_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_APPID_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_APPID_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_APPID_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_APPID_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_APPID_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_APPID_xrefdep_set;
*swig_unknown_get = *LibreDWGc::Dwg_Object_APPID_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Object_APPID_unknown_set;
*swig_app_control_get = *LibreDWGc::Dwg_Object_APPID_app_control_get;
*swig_app_control_set = *LibreDWGc::Dwg_Object_APPID_app_control_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_APPID_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_APPID_null_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_APPID(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_APPID($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DIMSTYLE_CONTROL ##############

package LibreDWG::Dwg_Object_DIMSTYLE_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_xdicobjhandle_set;
*swig_dimstyles_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_dimstyles_get;
*swig_dimstyles_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_dimstyles_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_reactors_set;
*swig_num_morehandles_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_num_morehandles_get;
*swig_num_morehandles_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_num_morehandles_set;
*swig_morehandles_get = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_morehandles_get;
*swig_morehandles_set = *LibreDWGc::Dwg_Object_DIMSTYLE_CONTROL_morehandles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DIMSTYLE_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DIMSTYLE_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DIMSTYLE ##############

package LibreDWG::Dwg_Object_DIMSTYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DIMSTYLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DIMSTYLE_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_DIMSTYLE_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_DIMSTYLE_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_DIMSTYLE_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_DIMSTYLE_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_DIMSTYLE_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_DIMSTYLE_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_DIMSTYLE_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_DIMSTYLE_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_DIMSTYLE_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_DIMSTYLE_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_DIMSTYLE_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_DIMSTYLE_xrefdep_set;
*swig_DIMTOL_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOL_get;
*swig_DIMTOL_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOL_set;
*swig_DIMLIM_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLIM_get;
*swig_DIMLIM_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLIM_set;
*swig_DIMTIH_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTIH_get;
*swig_DIMTIH_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTIH_set;
*swig_DIMTOH_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOH_get;
*swig_DIMTOH_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOH_set;
*swig_DIMSE1_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSE1_get;
*swig_DIMSE1_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSE1_set;
*swig_DIMSE2_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSE2_get;
*swig_DIMSE2_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSE2_set;
*swig_DIMALT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALT_get;
*swig_DIMALT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALT_set;
*swig_DIMTOFL_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOFL_get;
*swig_DIMTOFL_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOFL_set;
*swig_DIMSAH_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSAH_get;
*swig_DIMSAH_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSAH_set;
*swig_DIMTIX_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTIX_get;
*swig_DIMTIX_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTIX_set;
*swig_DIMSOXD_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSOXD_get;
*swig_DIMSOXD_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSOXD_set;
*swig_DIMALTD_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTD_get;
*swig_DIMALTD_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTD_set;
*swig_DIMZIN_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMZIN_get;
*swig_DIMZIN_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMZIN_set;
*swig_DIMSD1_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSD1_get;
*swig_DIMSD1_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSD1_set;
*swig_DIMSD2_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSD2_get;
*swig_DIMSD2_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSD2_set;
*swig_DIMTOLJ_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOLJ_get;
*swig_DIMTOLJ_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTOLJ_set;
*swig_DIMJUST_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMJUST_get;
*swig_DIMJUST_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMJUST_set;
*swig_DIMFIT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFIT_get;
*swig_DIMFIT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFIT_set;
*swig_DIMUPT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMUPT_get;
*swig_DIMUPT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMUPT_set;
*swig_DIMTZIN_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTZIN_get;
*swig_DIMTZIN_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTZIN_set;
*swig_DIMMALTZ_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMALTZ_get;
*swig_DIMMALTZ_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMALTZ_set;
*swig_DIMMALTTZ_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMALTTZ_get;
*swig_DIMMALTTZ_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMALTTZ_set;
*swig_DIMTAD_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTAD_get;
*swig_DIMTAD_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTAD_set;
*swig_DIMUNIT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMUNIT_get;
*swig_DIMUNIT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMUNIT_set;
*swig_DIMAUNIT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMAUNIT_get;
*swig_DIMAUNIT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMAUNIT_set;
*swig_DIMDEC_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDEC_get;
*swig_DIMDEC_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDEC_set;
*swig_DIMTDEC_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTDEC_get;
*swig_DIMTDEC_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTDEC_set;
*swig_DIMALTU_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTU_get;
*swig_DIMALTU_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTU_set;
*swig_DIMALTTD_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTTD_get;
*swig_DIMALTTD_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTTD_set;
*swig_DIMSCALE_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSCALE_get;
*swig_DIMSCALE_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMSCALE_set;
*swig_DIMASZ_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMASZ_get;
*swig_DIMASZ_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMASZ_set;
*swig_DIMEXO_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMEXO_get;
*swig_DIMEXO_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMEXO_set;
*swig_DIMDLI_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDLI_get;
*swig_DIMDLI_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDLI_set;
*swig_DIMEXE_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMEXE_get;
*swig_DIMEXE_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMEXE_set;
*swig_DIMRND_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMRND_get;
*swig_DIMRND_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMRND_set;
*swig_DIMDLE_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDLE_get;
*swig_DIMDLE_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDLE_set;
*swig_DIMTP_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTP_get;
*swig_DIMTP_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTP_set;
*swig_DIMTM_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTM_get;
*swig_DIMTM_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTM_set;
*swig_DIMFXL_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFXL_get;
*swig_DIMFXL_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFXL_set;
*swig_DIMJOGANG_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMJOGANG_get;
*swig_DIMJOGANG_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMJOGANG_set;
*swig_DIMTFILL_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTFILL_get;
*swig_DIMTFILL_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTFILL_set;
*swig_DIMTFILLCLR_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTFILLCLR_get;
*swig_DIMTFILLCLR_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTFILLCLR_set;
*swig_DIMAZIN_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMAZIN_get;
*swig_DIMAZIN_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMAZIN_set;
*swig_DIMARCSYM_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMARCSYM_get;
*swig_DIMARCSYM_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMARCSYM_set;
*swig_DIMTXT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTXT_get;
*swig_DIMTXT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTXT_set;
*swig_DIMCEN_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCEN_get;
*swig_DIMCEN_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCEN_set;
*swig_DIMTSZ_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTSZ_get;
*swig_DIMTSZ_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTSZ_set;
*swig_DIMALTF_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTF_get;
*swig_DIMALTF_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTF_set;
*swig_DIMLFAC_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLFAC_get;
*swig_DIMLFAC_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLFAC_set;
*swig_DIMTVP_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTVP_get;
*swig_DIMTVP_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTVP_set;
*swig_DIMTFAC_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTFAC_get;
*swig_DIMTFAC_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTFAC_set;
*swig_DIMGAP_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMGAP_get;
*swig_DIMGAP_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMGAP_set;
*swig_DIMPOST_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMPOST_get;
*swig_DIMPOST_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMPOST_set;
*swig_DIMAPOST_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMAPOST_get;
*swig_DIMAPOST_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMAPOST_set;
*swig_DIMBLK_T_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK_T_get;
*swig_DIMBLK_T_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK_T_set;
*swig_DIMBLK1_T_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK1_T_get;
*swig_DIMBLK1_T_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK1_T_set;
*swig_DIMBLK2_T_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK2_T_get;
*swig_DIMBLK2_T_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK2_T_set;
*swig_DIMALTRND_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTRND_get;
*swig_DIMALTRND_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTRND_set;
*swig_DIMCLRD_N_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRD_N_get;
*swig_DIMCLRD_N_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRD_N_set;
*swig_DIMCLRE_N_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRE_N_get;
*swig_DIMCLRE_N_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRE_N_set;
*swig_DIMCLRT_N_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRT_N_get;
*swig_DIMCLRT_N_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRT_N_set;
*swig_DIMCLRD_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRD_get;
*swig_DIMCLRD_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRD_set;
*swig_DIMCLRE_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRE_get;
*swig_DIMCLRE_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRE_set;
*swig_DIMCLRT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRT_get;
*swig_DIMCLRT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMCLRT_set;
*swig_DIMADEC_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMADEC_get;
*swig_DIMADEC_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMADEC_set;
*swig_DIMFRAC_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFRAC_get;
*swig_DIMFRAC_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFRAC_set;
*swig_DIMLUNIT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLUNIT_get;
*swig_DIMLUNIT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLUNIT_set;
*swig_DIMDSEP_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDSEP_get;
*swig_DIMDSEP_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMDSEP_set;
*swig_DIMTMOVE_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTMOVE_get;
*swig_DIMTMOVE_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTMOVE_set;
*swig_DIMALTZ_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTZ_get;
*swig_DIMALTZ_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTZ_set;
*swig_DIMALTTZ_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTTZ_get;
*swig_DIMALTTZ_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTTZ_set;
*swig_DIMATFIT_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMATFIT_get;
*swig_DIMATFIT_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMATFIT_set;
*swig_DIMFXLON_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFXLON_get;
*swig_DIMFXLON_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMFXLON_set;
*swig_DIMTXTDIRECTION_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTXTDIRECTION_get;
*swig_DIMTXTDIRECTION_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTXTDIRECTION_set;
*swig_DIMALTMZF_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTMZF_get;
*swig_DIMALTMZF_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTMZF_set;
*swig_DIMALTMZS_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTMZS_get;
*swig_DIMALTMZS_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMALTMZS_set;
*swig_DIMMZF_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMZF_get;
*swig_DIMMZF_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMZF_set;
*swig_DIMMZS_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMZS_get;
*swig_DIMMZS_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMMZS_set;
*swig_DIMLWD_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLWD_get;
*swig_DIMLWD_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLWD_set;
*swig_DIMLWE_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLWE_get;
*swig_DIMLWE_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLWE_set;
*swig_dimstyle_control_get = *LibreDWGc::Dwg_Object_DIMSTYLE_dimstyle_control_get;
*swig_dimstyle_control_set = *LibreDWGc::Dwg_Object_DIMSTYLE_dimstyle_control_set;
*swig_extref_handle_get = *LibreDWGc::Dwg_Object_DIMSTYLE_extref_handle_get;
*swig_extref_handle_set = *LibreDWGc::Dwg_Object_DIMSTYLE_extref_handle_set;
*swig_DIMTXSTY_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTXSTY_get;
*swig_DIMTXSTY_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMTXSTY_set;
*swig_DIMLDRBLK_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLDRBLK_get;
*swig_DIMLDRBLK_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLDRBLK_set;
*swig_DIMBLK_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK_get;
*swig_DIMBLK_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK_set;
*swig_DIMBLK1_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK1_get;
*swig_DIMBLK1_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK1_set;
*swig_DIMBLK2_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK2_get;
*swig_DIMBLK2_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMBLK2_set;
*swig_DIMLTYPE_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLTYPE_get;
*swig_DIMLTYPE_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLTYPE_set;
*swig_DIMLTEX1_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLTEX1_get;
*swig_DIMLTEX1_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLTEX1_set;
*swig_DIMLTEX2_get = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLTEX2_get;
*swig_DIMLTEX2_set = *LibreDWGc::Dwg_Object_DIMSTYLE_DIMLTEX2_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DIMSTYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DIMSTYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VPORT_ENTITY_CONTROL ##############

package LibreDWG::Dwg_Object_VPORT_ENTITY_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_parent_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_xdicobjhandle_set;
*swig_vport_entity_headers_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_vport_entity_headers_get;
*swig_vport_entity_headers_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_vport_entity_headers_set;
*swig_objid_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_objid_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_CONTROL_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VPORT_ENTITY_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VPORT_ENTITY_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VPORT_ENTITY_HEADER ##############

package LibreDWG::Dwg_Object_VPORT_ENTITY_HEADER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xrefdep_set;
*swig_flag1_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_flag1_get;
*swig_flag1_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_flag1_set;
*swig_vport_entity_control_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_vport_entity_control_get;
*swig_vport_entity_control_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_vport_entity_control_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xdicobjhandle_set;
*swig_xref_handle_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xref_handle_get;
*swig_xref_handle_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_xref_handle_set;
*swig_vport_entity_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_vport_entity_get;
*swig_vport_entity_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_vport_entity_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_VPORT_ENTITY_HEADER_reactors_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VPORT_ENTITY_HEADER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VPORT_ENTITY_HEADER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_GROUP ##############

package LibreDWG::Dwg_Object_GROUP;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_GROUP_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_GROUP_parent_set;
*swig_name_get = *LibreDWGc::Dwg_Object_GROUP_name_get;
*swig_name_set = *LibreDWGc::Dwg_Object_GROUP_name_set;
*swig_unnamed_get = *LibreDWGc::Dwg_Object_GROUP_unnamed_get;
*swig_unnamed_set = *LibreDWGc::Dwg_Object_GROUP_unnamed_set;
*swig_selectable_get = *LibreDWGc::Dwg_Object_GROUP_selectable_get;
*swig_selectable_set = *LibreDWGc::Dwg_Object_GROUP_selectable_set;
*swig_num_handles_get = *LibreDWGc::Dwg_Object_GROUP_num_handles_get;
*swig_num_handles_set = *LibreDWGc::Dwg_Object_GROUP_num_handles_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_GROUP_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_GROUP_parenthandle_set;
*swig_group_entries_get = *LibreDWGc::Dwg_Object_GROUP_group_entries_get;
*swig_group_entries_set = *LibreDWGc::Dwg_Object_GROUP_group_entries_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_GROUP(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_GROUP($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_MLINESTYLE_line ##############

package LibreDWG::Dwg_MLINESTYLE_line;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_MLINESTYLE_line_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_MLINESTYLE_line_parent_set;
*swig_offset_get = *LibreDWGc::Dwg_MLINESTYLE_line_offset_get;
*swig_offset_set = *LibreDWGc::Dwg_MLINESTYLE_line_offset_set;
*swig_color_get = *LibreDWGc::Dwg_MLINESTYLE_line_color_get;
*swig_color_set = *LibreDWGc::Dwg_MLINESTYLE_line_color_set;
*swig_ltindex_get = *LibreDWGc::Dwg_MLINESTYLE_line_ltindex_get;
*swig_ltindex_set = *LibreDWGc::Dwg_MLINESTYLE_line_ltindex_set;
*swig_ltype_get = *LibreDWGc::Dwg_MLINESTYLE_line_ltype_get;
*swig_ltype_set = *LibreDWGc::Dwg_MLINESTYLE_line_ltype_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_MLINESTYLE_line(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_MLINESTYLE_line($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_MLINESTYLE ##############

package LibreDWG::Dwg_Object_MLINESTYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_MLINESTYLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_MLINESTYLE_parent_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_MLINESTYLE_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_MLINESTYLE_entry_name_set;
*swig_desc_get = *LibreDWGc::Dwg_Object_MLINESTYLE_desc_get;
*swig_desc_set = *LibreDWGc::Dwg_Object_MLINESTYLE_desc_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_MLINESTYLE_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_MLINESTYLE_flag_set;
*swig_fill_color_get = *LibreDWGc::Dwg_Object_MLINESTYLE_fill_color_get;
*swig_fill_color_set = *LibreDWGc::Dwg_Object_MLINESTYLE_fill_color_set;
*swig_start_angle_get = *LibreDWGc::Dwg_Object_MLINESTYLE_start_angle_get;
*swig_start_angle_set = *LibreDWGc::Dwg_Object_MLINESTYLE_start_angle_set;
*swig_end_angle_get = *LibreDWGc::Dwg_Object_MLINESTYLE_end_angle_get;
*swig_end_angle_set = *LibreDWGc::Dwg_Object_MLINESTYLE_end_angle_set;
*swig_num_lines_get = *LibreDWGc::Dwg_Object_MLINESTYLE_num_lines_get;
*swig_num_lines_set = *LibreDWGc::Dwg_Object_MLINESTYLE_num_lines_set;
*swig_lines_get = *LibreDWGc::Dwg_Object_MLINESTYLE_lines_get;
*swig_lines_set = *LibreDWGc::Dwg_Object_MLINESTYLE_lines_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_MLINESTYLE_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_MLINESTYLE_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_MLINESTYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_MLINESTYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_OLE2FRAME ##############

package LibreDWG::Dwg_Entity_OLE2FRAME;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_OLE2FRAME_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_OLE2FRAME_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_OLE2FRAME_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_OLE2FRAME_flag_set;
*swig_mode_get = *LibreDWGc::Dwg_Entity_OLE2FRAME_mode_get;
*swig_mode_set = *LibreDWGc::Dwg_Entity_OLE2FRAME_mode_set;
*swig_data_length_get = *LibreDWGc::Dwg_Entity_OLE2FRAME_data_length_get;
*swig_data_length_set = *LibreDWGc::Dwg_Entity_OLE2FRAME_data_length_set;
*swig_data_get = *LibreDWGc::Dwg_Entity_OLE2FRAME_data_get;
*swig_data_set = *LibreDWGc::Dwg_Entity_OLE2FRAME_data_set;
*swig_unknown_get = *LibreDWGc::Dwg_Entity_OLE2FRAME_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Entity_OLE2FRAME_unknown_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_OLE2FRAME(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_OLE2FRAME($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DUMMY ##############

package LibreDWG::Dwg_Object_DUMMY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DUMMY_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DUMMY_parent_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_DUMMY_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_DUMMY_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_DUMMY_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_DUMMY_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DUMMY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DUMMY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LONG_TRANSACTION ##############

package LibreDWG::Dwg_Object_LONG_TRANSACTION;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LONG_TRANSACTION_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LONG_TRANSACTION_parent_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_LONG_TRANSACTION_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_LONG_TRANSACTION_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_LONG_TRANSACTION_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_LONG_TRANSACTION_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LONG_TRANSACTION(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LONG_TRANSACTION($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_LWPOLYLINE_width ##############

package LibreDWG::Dwg_LWPOLYLINE_width;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_start_get = *LibreDWGc::Dwg_LWPOLYLINE_width_start_get;
*swig_start_set = *LibreDWGc::Dwg_LWPOLYLINE_width_start_set;
*swig_end_get = *LibreDWGc::Dwg_LWPOLYLINE_width_end_get;
*swig_end_set = *LibreDWGc::Dwg_LWPOLYLINE_width_end_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_LWPOLYLINE_width(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_LWPOLYLINE_width($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_PROXY_LWPOLYLINE ##############

package LibreDWG::Dwg_Entity_PROXY_LWPOLYLINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_parent_set;
*swig_size_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_size_get;
*swig_size_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_size_set;
*swig_flags_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_flags_set;
*swig_const_width_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_const_width_get;
*swig_const_width_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_const_width_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_elevation_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_thickness_set;
*swig_normal_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_normal_get;
*swig_normal_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_normal_set;
*swig_num_points_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_num_points_get;
*swig_num_points_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_num_points_set;
*swig_points_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_points_get;
*swig_points_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_points_set;
*swig_num_bulges_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_num_bulges_get;
*swig_num_bulges_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_num_bulges_set;
*swig_bulges_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_bulges_get;
*swig_bulges_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_bulges_set;
*swig_num_widths_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_num_widths_get;
*swig_num_widths_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_num_widths_set;
*swig_widths_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_widths_get;
*swig_widths_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_widths_set;
*swig_unknown_1_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_unknown_1_get;
*swig_unknown_1_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_unknown_1_set;
*swig_unknown_2_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_unknown_2_get;
*swig_unknown_2_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_unknown_2_set;
*swig_unknown_3_get = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_unknown_3_get;
*swig_unknown_3_set = *LibreDWGc::Dwg_Entity_PROXY_LWPOLYLINE_unknown_3_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_PROXY_LWPOLYLINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_PROXY_LWPOLYLINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_PROXY_ENTITY ##############

package LibreDWG::Dwg_Entity_PROXY_ENTITY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_parent_set;
*swig_class_id_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_class_id_get;
*swig_class_id_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_class_id_set;
*swig_version_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_version_get;
*swig_version_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_version_set;
*swig_maint_version_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_maint_version_get;
*swig_maint_version_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_maint_version_set;
*swig_from_dxf_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_from_dxf_get;
*swig_from_dxf_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_from_dxf_set;
*swig_data_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_data_get;
*swig_data_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_data_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_parenthandle_set;
*swig_reactors_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_reactors_set;
*swig_objid_object_handles_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_objid_object_handles_get;
*swig_objid_object_handles_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_objid_object_handles_set;
*swig_size_get = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_size_get;
*swig_size_set = *LibreDWGc::Dwg_Entity_PROXY_ENTITY_size_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_PROXY_ENTITY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_PROXY_ENTITY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_PROXY_OBJECT ##############

package LibreDWG::Dwg_Object_PROXY_OBJECT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_parent_set;
*swig_class_id_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_class_id_get;
*swig_class_id_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_class_id_set;
*swig_version_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_version_get;
*swig_version_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_version_set;
*swig_maint_version_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_maint_version_get;
*swig_maint_version_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_maint_version_set;
*swig_from_dxf_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_from_dxf_get;
*swig_from_dxf_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_from_dxf_set;
*swig_data_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_data_get;
*swig_data_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_data_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_parenthandle_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_reactors_set;
*swig_objid_object_handles_get = *LibreDWGc::Dwg_Object_PROXY_OBJECT_objid_object_handles_get;
*swig_objid_object_handles_set = *LibreDWGc::Dwg_Object_PROXY_OBJECT_objid_object_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_PROXY_OBJECT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_PROXY_OBJECT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_HATCH_Color ##############

package LibreDWG::Dwg_HATCH_Color;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_HATCH_Color_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_HATCH_Color_parent_set;
*swig_unknown_double_get = *LibreDWGc::Dwg_HATCH_Color_unknown_double_get;
*swig_unknown_double_set = *LibreDWGc::Dwg_HATCH_Color_unknown_double_set;
*swig_unknown_short_get = *LibreDWGc::Dwg_HATCH_Color_unknown_short_get;
*swig_unknown_short_set = *LibreDWGc::Dwg_HATCH_Color_unknown_short_set;
*swig_rgb_color_get = *LibreDWGc::Dwg_HATCH_Color_rgb_color_get;
*swig_rgb_color_set = *LibreDWGc::Dwg_HATCH_Color_rgb_color_set;
*swig_ignored_color_byte_get = *LibreDWGc::Dwg_HATCH_Color_ignored_color_byte_get;
*swig_ignored_color_byte_set = *LibreDWGc::Dwg_HATCH_Color_ignored_color_byte_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_HATCH_Color(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_HATCH_Color($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_HATCH_ControlPoint ##############

package LibreDWG::Dwg_HATCH_ControlPoint;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_HATCH_ControlPoint_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_HATCH_ControlPoint_parent_set;
*swig_point_get = *LibreDWGc::Dwg_HATCH_ControlPoint_point_get;
*swig_point_set = *LibreDWGc::Dwg_HATCH_ControlPoint_point_set;
*swig_weigth_get = *LibreDWGc::Dwg_HATCH_ControlPoint_weigth_get;
*swig_weigth_set = *LibreDWGc::Dwg_HATCH_ControlPoint_weigth_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_HATCH_ControlPoint(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_HATCH_ControlPoint($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_HATCH_PathSeg ##############

package LibreDWG::Dwg_HATCH_PathSeg;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_HATCH_PathSeg_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_HATCH_PathSeg_parent_set;
*swig_type_status_get = *LibreDWGc::Dwg_HATCH_PathSeg_type_status_get;
*swig_type_status_set = *LibreDWGc::Dwg_HATCH_PathSeg_type_status_set;
*swig_first_endpoint_get = *LibreDWGc::Dwg_HATCH_PathSeg_first_endpoint_get;
*swig_first_endpoint_set = *LibreDWGc::Dwg_HATCH_PathSeg_first_endpoint_set;
*swig_second_endpoint_get = *LibreDWGc::Dwg_HATCH_PathSeg_second_endpoint_get;
*swig_second_endpoint_set = *LibreDWGc::Dwg_HATCH_PathSeg_second_endpoint_set;
*swig_center_get = *LibreDWGc::Dwg_HATCH_PathSeg_center_get;
*swig_center_set = *LibreDWGc::Dwg_HATCH_PathSeg_center_set;
*swig_radius_get = *LibreDWGc::Dwg_HATCH_PathSeg_radius_get;
*swig_radius_set = *LibreDWGc::Dwg_HATCH_PathSeg_radius_set;
*swig_start_angle_get = *LibreDWGc::Dwg_HATCH_PathSeg_start_angle_get;
*swig_start_angle_set = *LibreDWGc::Dwg_HATCH_PathSeg_start_angle_set;
*swig_end_angle_get = *LibreDWGc::Dwg_HATCH_PathSeg_end_angle_get;
*swig_end_angle_set = *LibreDWGc::Dwg_HATCH_PathSeg_end_angle_set;
*swig_is_ccw_get = *LibreDWGc::Dwg_HATCH_PathSeg_is_ccw_get;
*swig_is_ccw_set = *LibreDWGc::Dwg_HATCH_PathSeg_is_ccw_set;
*swig_endpoint_get = *LibreDWGc::Dwg_HATCH_PathSeg_endpoint_get;
*swig_endpoint_set = *LibreDWGc::Dwg_HATCH_PathSeg_endpoint_set;
*swig_minor_major_ratio_get = *LibreDWGc::Dwg_HATCH_PathSeg_minor_major_ratio_get;
*swig_minor_major_ratio_set = *LibreDWGc::Dwg_HATCH_PathSeg_minor_major_ratio_set;
*swig_degree_get = *LibreDWGc::Dwg_HATCH_PathSeg_degree_get;
*swig_degree_set = *LibreDWGc::Dwg_HATCH_PathSeg_degree_set;
*swig_is_rational_get = *LibreDWGc::Dwg_HATCH_PathSeg_is_rational_get;
*swig_is_rational_set = *LibreDWGc::Dwg_HATCH_PathSeg_is_rational_set;
*swig_is_periodic_get = *LibreDWGc::Dwg_HATCH_PathSeg_is_periodic_get;
*swig_is_periodic_set = *LibreDWGc::Dwg_HATCH_PathSeg_is_periodic_set;
*swig_num_knots_get = *LibreDWGc::Dwg_HATCH_PathSeg_num_knots_get;
*swig_num_knots_set = *LibreDWGc::Dwg_HATCH_PathSeg_num_knots_set;
*swig_num_control_points_get = *LibreDWGc::Dwg_HATCH_PathSeg_num_control_points_get;
*swig_num_control_points_set = *LibreDWGc::Dwg_HATCH_PathSeg_num_control_points_set;
*swig_knots_get = *LibreDWGc::Dwg_HATCH_PathSeg_knots_get;
*swig_knots_set = *LibreDWGc::Dwg_HATCH_PathSeg_knots_set;
*swig_control_points_get = *LibreDWGc::Dwg_HATCH_PathSeg_control_points_get;
*swig_control_points_set = *LibreDWGc::Dwg_HATCH_PathSeg_control_points_set;
*swig_num_fitpts_get = *LibreDWGc::Dwg_HATCH_PathSeg_num_fitpts_get;
*swig_num_fitpts_set = *LibreDWGc::Dwg_HATCH_PathSeg_num_fitpts_set;
*swig_fitpts_get = *LibreDWGc::Dwg_HATCH_PathSeg_fitpts_get;
*swig_fitpts_set = *LibreDWGc::Dwg_HATCH_PathSeg_fitpts_set;
*swig_start_tangent_get = *LibreDWGc::Dwg_HATCH_PathSeg_start_tangent_get;
*swig_start_tangent_set = *LibreDWGc::Dwg_HATCH_PathSeg_start_tangent_set;
*swig_end_tangent_get = *LibreDWGc::Dwg_HATCH_PathSeg_end_tangent_get;
*swig_end_tangent_set = *LibreDWGc::Dwg_HATCH_PathSeg_end_tangent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_HATCH_PathSeg(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_HATCH_PathSeg($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_HATCH_PolylinePath ##############

package LibreDWG::Dwg_HATCH_PolylinePath;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_HATCH_PolylinePath_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_HATCH_PolylinePath_parent_set;
*swig_point_get = *LibreDWGc::Dwg_HATCH_PolylinePath_point_get;
*swig_point_set = *LibreDWGc::Dwg_HATCH_PolylinePath_point_set;
*swig_bulge_get = *LibreDWGc::Dwg_HATCH_PolylinePath_bulge_get;
*swig_bulge_set = *LibreDWGc::Dwg_HATCH_PolylinePath_bulge_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_HATCH_PolylinePath(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_HATCH_PolylinePath($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_HATCH_Path ##############

package LibreDWG::Dwg_HATCH_Path;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_HATCH_Path_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_HATCH_Path_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_HATCH_Path_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_HATCH_Path_flag_set;
*swig_num_segs_or_paths_get = *LibreDWGc::Dwg_HATCH_Path_num_segs_or_paths_get;
*swig_num_segs_or_paths_set = *LibreDWGc::Dwg_HATCH_Path_num_segs_or_paths_set;
*swig_segs_get = *LibreDWGc::Dwg_HATCH_Path_segs_get;
*swig_segs_set = *LibreDWGc::Dwg_HATCH_Path_segs_set;
*swig_bulges_present_get = *LibreDWGc::Dwg_HATCH_Path_bulges_present_get;
*swig_bulges_present_set = *LibreDWGc::Dwg_HATCH_Path_bulges_present_set;
*swig_closed_get = *LibreDWGc::Dwg_HATCH_Path_closed_get;
*swig_closed_set = *LibreDWGc::Dwg_HATCH_Path_closed_set;
*swig_polyline_paths_get = *LibreDWGc::Dwg_HATCH_Path_polyline_paths_get;
*swig_polyline_paths_set = *LibreDWGc::Dwg_HATCH_Path_polyline_paths_set;
*swig_num_boundary_handles_get = *LibreDWGc::Dwg_HATCH_Path_num_boundary_handles_get;
*swig_num_boundary_handles_set = *LibreDWGc::Dwg_HATCH_Path_num_boundary_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_HATCH_Path(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_HATCH_Path($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_HATCH_DefLine ##############

package LibreDWG::Dwg_HATCH_DefLine;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_HATCH_DefLine_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_HATCH_DefLine_parent_set;
*swig_angle_get = *LibreDWGc::Dwg_HATCH_DefLine_angle_get;
*swig_angle_set = *LibreDWGc::Dwg_HATCH_DefLine_angle_set;
*swig_pt0_get = *LibreDWGc::Dwg_HATCH_DefLine_pt0_get;
*swig_pt0_set = *LibreDWGc::Dwg_HATCH_DefLine_pt0_set;
*swig_offset_get = *LibreDWGc::Dwg_HATCH_DefLine_offset_get;
*swig_offset_set = *LibreDWGc::Dwg_HATCH_DefLine_offset_set;
*swig_num_dashes_get = *LibreDWGc::Dwg_HATCH_DefLine_num_dashes_get;
*swig_num_dashes_set = *LibreDWGc::Dwg_HATCH_DefLine_num_dashes_set;
*swig_dashes_get = *LibreDWGc::Dwg_HATCH_DefLine_dashes_get;
*swig_dashes_set = *LibreDWGc::Dwg_HATCH_DefLine_dashes_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_HATCH_DefLine(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_HATCH_DefLine($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_HATCH ##############

package LibreDWG::Dwg_Entity_HATCH;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_HATCH_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_HATCH_parent_set;
*swig_is_gradient_fill_get = *LibreDWGc::Dwg_Entity_HATCH_is_gradient_fill_get;
*swig_is_gradient_fill_set = *LibreDWGc::Dwg_Entity_HATCH_is_gradient_fill_set;
*swig_reserved_get = *LibreDWGc::Dwg_Entity_HATCH_reserved_get;
*swig_reserved_set = *LibreDWGc::Dwg_Entity_HATCH_reserved_set;
*swig_gradient_angle_get = *LibreDWGc::Dwg_Entity_HATCH_gradient_angle_get;
*swig_gradient_angle_set = *LibreDWGc::Dwg_Entity_HATCH_gradient_angle_set;
*swig_gradient_shift_get = *LibreDWGc::Dwg_Entity_HATCH_gradient_shift_get;
*swig_gradient_shift_set = *LibreDWGc::Dwg_Entity_HATCH_gradient_shift_set;
*swig_single_color_gradient_get = *LibreDWGc::Dwg_Entity_HATCH_single_color_gradient_get;
*swig_single_color_gradient_set = *LibreDWGc::Dwg_Entity_HATCH_single_color_gradient_set;
*swig_gradient_tint_get = *LibreDWGc::Dwg_Entity_HATCH_gradient_tint_get;
*swig_gradient_tint_set = *LibreDWGc::Dwg_Entity_HATCH_gradient_tint_set;
*swig_num_colors_get = *LibreDWGc::Dwg_Entity_HATCH_num_colors_get;
*swig_num_colors_set = *LibreDWGc::Dwg_Entity_HATCH_num_colors_set;
*swig_colors_get = *LibreDWGc::Dwg_Entity_HATCH_colors_get;
*swig_colors_set = *LibreDWGc::Dwg_Entity_HATCH_colors_set;
*swig_gradient_name_get = *LibreDWGc::Dwg_Entity_HATCH_gradient_name_get;
*swig_gradient_name_set = *LibreDWGc::Dwg_Entity_HATCH_gradient_name_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_HATCH_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_HATCH_elevation_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_HATCH_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_HATCH_extrusion_set;
*swig_name_get = *LibreDWGc::Dwg_Entity_HATCH_name_get;
*swig_name_set = *LibreDWGc::Dwg_Entity_HATCH_name_set;
*swig_solid_fill_get = *LibreDWGc::Dwg_Entity_HATCH_solid_fill_get;
*swig_solid_fill_set = *LibreDWGc::Dwg_Entity_HATCH_solid_fill_set;
*swig_associative_get = *LibreDWGc::Dwg_Entity_HATCH_associative_get;
*swig_associative_set = *LibreDWGc::Dwg_Entity_HATCH_associative_set;
*swig_num_paths_get = *LibreDWGc::Dwg_Entity_HATCH_num_paths_get;
*swig_num_paths_set = *LibreDWGc::Dwg_Entity_HATCH_num_paths_set;
*swig_paths_get = *LibreDWGc::Dwg_Entity_HATCH_paths_get;
*swig_paths_set = *LibreDWGc::Dwg_Entity_HATCH_paths_set;
*swig_style_get = *LibreDWGc::Dwg_Entity_HATCH_style_get;
*swig_style_set = *LibreDWGc::Dwg_Entity_HATCH_style_set;
*swig_pattern_type_get = *LibreDWGc::Dwg_Entity_HATCH_pattern_type_get;
*swig_pattern_type_set = *LibreDWGc::Dwg_Entity_HATCH_pattern_type_set;
*swig_angle_get = *LibreDWGc::Dwg_Entity_HATCH_angle_get;
*swig_angle_set = *LibreDWGc::Dwg_Entity_HATCH_angle_set;
*swig_scale_spacing_get = *LibreDWGc::Dwg_Entity_HATCH_scale_spacing_get;
*swig_scale_spacing_set = *LibreDWGc::Dwg_Entity_HATCH_scale_spacing_set;
*swig_double_flag_get = *LibreDWGc::Dwg_Entity_HATCH_double_flag_get;
*swig_double_flag_set = *LibreDWGc::Dwg_Entity_HATCH_double_flag_set;
*swig_num_deflines_get = *LibreDWGc::Dwg_Entity_HATCH_num_deflines_get;
*swig_num_deflines_set = *LibreDWGc::Dwg_Entity_HATCH_num_deflines_set;
*swig_deflines_get = *LibreDWGc::Dwg_Entity_HATCH_deflines_get;
*swig_deflines_set = *LibreDWGc::Dwg_Entity_HATCH_deflines_set;
*swig_has_derived_get = *LibreDWGc::Dwg_Entity_HATCH_has_derived_get;
*swig_has_derived_set = *LibreDWGc::Dwg_Entity_HATCH_has_derived_set;
*swig_pixel_size_get = *LibreDWGc::Dwg_Entity_HATCH_pixel_size_get;
*swig_pixel_size_set = *LibreDWGc::Dwg_Entity_HATCH_pixel_size_set;
*swig_num_seeds_get = *LibreDWGc::Dwg_Entity_HATCH_num_seeds_get;
*swig_num_seeds_set = *LibreDWGc::Dwg_Entity_HATCH_num_seeds_set;
*swig_seeds_get = *LibreDWGc::Dwg_Entity_HATCH_seeds_get;
*swig_seeds_set = *LibreDWGc::Dwg_Entity_HATCH_seeds_set;
*swig_num_boundary_handles_get = *LibreDWGc::Dwg_Entity_HATCH_num_boundary_handles_get;
*swig_num_boundary_handles_set = *LibreDWGc::Dwg_Entity_HATCH_num_boundary_handles_set;
*swig_boundary_handles_get = *LibreDWGc::Dwg_Entity_HATCH_boundary_handles_get;
*swig_boundary_handles_set = *LibreDWGc::Dwg_Entity_HATCH_boundary_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_HATCH(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_HATCH($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_XRECORD ##############

package LibreDWG::Dwg_Object_XRECORD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_XRECORD_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_XRECORD_parent_set;
*swig_num_databytes_get = *LibreDWGc::Dwg_Object_XRECORD_num_databytes_get;
*swig_num_databytes_set = *LibreDWGc::Dwg_Object_XRECORD_num_databytes_set;
*swig_cloning_flags_get = *LibreDWGc::Dwg_Object_XRECORD_cloning_flags_get;
*swig_cloning_flags_set = *LibreDWGc::Dwg_Object_XRECORD_cloning_flags_set;
*swig_num_eed_get = *LibreDWGc::Dwg_Object_XRECORD_num_eed_get;
*swig_num_eed_set = *LibreDWGc::Dwg_Object_XRECORD_num_eed_set;
*swig_xdata_get = *LibreDWGc::Dwg_Object_XRECORD_xdata_get;
*swig_xdata_set = *LibreDWGc::Dwg_Object_XRECORD_xdata_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_XRECORD_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_XRECORD_parenthandle_set;
*swig_num_objid_handles_get = *LibreDWGc::Dwg_Object_XRECORD_num_objid_handles_get;
*swig_num_objid_handles_set = *LibreDWGc::Dwg_Object_XRECORD_num_objid_handles_set;
*swig_objid_handles_get = *LibreDWGc::Dwg_Object_XRECORD_objid_handles_get;
*swig_objid_handles_set = *LibreDWGc::Dwg_Object_XRECORD_objid_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_XRECORD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_XRECORD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_PLACEHOLDER ##############

package LibreDWG::Dwg_Object_PLACEHOLDER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_PLACEHOLDER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_PLACEHOLDER_parent_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_PLACEHOLDER_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_PLACEHOLDER_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_PLACEHOLDER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_PLACEHOLDER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Leader_Break ##############

package LibreDWG::Dwg_Leader_Break;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Leader_Break_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Leader_Break_parent_set;
*swig_start_get = *LibreDWGc::Dwg_Leader_Break_start_get;
*swig_start_set = *LibreDWGc::Dwg_Leader_Break_start_set;
*swig_end_get = *LibreDWGc::Dwg_Leader_Break_end_get;
*swig_end_set = *LibreDWGc::Dwg_Leader_Break_end_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Leader_Break(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Leader_Break($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Leader_Line ##############

package LibreDWG::Dwg_Leader_Line;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Leader_Line_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Leader_Line_parent_set;
*swig_num_points_get = *LibreDWGc::Dwg_Leader_Line_num_points_get;
*swig_num_points_set = *LibreDWGc::Dwg_Leader_Line_num_points_set;
*swig_points_get = *LibreDWGc::Dwg_Leader_Line_points_get;
*swig_points_set = *LibreDWGc::Dwg_Leader_Line_points_set;
*swig_num_breaks_get = *LibreDWGc::Dwg_Leader_Line_num_breaks_get;
*swig_num_breaks_set = *LibreDWGc::Dwg_Leader_Line_num_breaks_set;
*swig_breaks_get = *LibreDWGc::Dwg_Leader_Line_breaks_get;
*swig_breaks_set = *LibreDWGc::Dwg_Leader_Line_breaks_set;
*swig_segment_index_get = *LibreDWGc::Dwg_Leader_Line_segment_index_get;
*swig_segment_index_set = *LibreDWGc::Dwg_Leader_Line_segment_index_set;
*swig_index_get = *LibreDWGc::Dwg_Leader_Line_index_get;
*swig_index_set = *LibreDWGc::Dwg_Leader_Line_index_set;
*swig_type_get = *LibreDWGc::Dwg_Leader_Line_type_get;
*swig_type_set = *LibreDWGc::Dwg_Leader_Line_type_set;
*swig_color_get = *LibreDWGc::Dwg_Leader_Line_color_get;
*swig_color_set = *LibreDWGc::Dwg_Leader_Line_color_set;
*swig_type_handle_get = *LibreDWGc::Dwg_Leader_Line_type_handle_get;
*swig_type_handle_set = *LibreDWGc::Dwg_Leader_Line_type_handle_set;
*swig_weight_get = *LibreDWGc::Dwg_Leader_Line_weight_get;
*swig_weight_set = *LibreDWGc::Dwg_Leader_Line_weight_set;
*swig_arrow_size_get = *LibreDWGc::Dwg_Leader_Line_arrow_size_get;
*swig_arrow_size_set = *LibreDWGc::Dwg_Leader_Line_arrow_size_set;
*swig_arrow_handle_get = *LibreDWGc::Dwg_Leader_Line_arrow_handle_get;
*swig_arrow_handle_set = *LibreDWGc::Dwg_Leader_Line_arrow_handle_set;
*swig_flags_get = *LibreDWGc::Dwg_Leader_Line_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_Leader_Line_flags_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Leader_Line(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Leader_Line($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Leader_ArrowHead ##############

package LibreDWG::Dwg_Leader_ArrowHead;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Leader_ArrowHead_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Leader_ArrowHead_parent_set;
*swig_is_default_get = *LibreDWGc::Dwg_Leader_ArrowHead_is_default_get;
*swig_is_default_set = *LibreDWGc::Dwg_Leader_ArrowHead_is_default_set;
*swig_arrowhead_get = *LibreDWGc::Dwg_Leader_ArrowHead_arrowhead_get;
*swig_arrowhead_set = *LibreDWGc::Dwg_Leader_ArrowHead_arrowhead_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Leader_ArrowHead(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Leader_ArrowHead($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Leader_BlockLabel ##############

package LibreDWG::Dwg_Leader_BlockLabel;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Leader_BlockLabel_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Leader_BlockLabel_parent_set;
*swig_attdef_get = *LibreDWGc::Dwg_Leader_BlockLabel_attdef_get;
*swig_attdef_set = *LibreDWGc::Dwg_Leader_BlockLabel_attdef_set;
*swig_label_text_get = *LibreDWGc::Dwg_Leader_BlockLabel_label_text_get;
*swig_label_text_set = *LibreDWGc::Dwg_Leader_BlockLabel_label_text_set;
*swig_ui_index_get = *LibreDWGc::Dwg_Leader_BlockLabel_ui_index_get;
*swig_ui_index_set = *LibreDWGc::Dwg_Leader_BlockLabel_ui_index_set;
*swig_width_get = *LibreDWGc::Dwg_Leader_BlockLabel_width_get;
*swig_width_set = *LibreDWGc::Dwg_Leader_BlockLabel_width_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Leader_BlockLabel(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Leader_BlockLabel($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Leader ##############

package LibreDWG::Dwg_Leader;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Leader_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Leader_parent_set;
*swig_is_valid_get = *LibreDWGc::Dwg_Leader_is_valid_get;
*swig_is_valid_set = *LibreDWGc::Dwg_Leader_is_valid_set;
*swig_unknown_get = *LibreDWGc::Dwg_Leader_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Leader_unknown_set;
*swig_connection_get = *LibreDWGc::Dwg_Leader_connection_get;
*swig_connection_set = *LibreDWGc::Dwg_Leader_connection_set;
*swig_direction_get = *LibreDWGc::Dwg_Leader_direction_get;
*swig_direction_set = *LibreDWGc::Dwg_Leader_direction_set;
*swig_num_breaks_get = *LibreDWGc::Dwg_Leader_num_breaks_get;
*swig_num_breaks_set = *LibreDWGc::Dwg_Leader_num_breaks_set;
*swig_breaks_get = *LibreDWGc::Dwg_Leader_breaks_get;
*swig_breaks_set = *LibreDWGc::Dwg_Leader_breaks_set;
*swig_num_lines_get = *LibreDWGc::Dwg_Leader_num_lines_get;
*swig_num_lines_set = *LibreDWGc::Dwg_Leader_num_lines_set;
*swig_lines_get = *LibreDWGc::Dwg_Leader_lines_get;
*swig_lines_set = *LibreDWGc::Dwg_Leader_lines_set;
*swig_index_get = *LibreDWGc::Dwg_Leader_index_get;
*swig_index_set = *LibreDWGc::Dwg_Leader_index_set;
*swig_landing_distance_get = *LibreDWGc::Dwg_Leader_landing_distance_get;
*swig_landing_distance_set = *LibreDWGc::Dwg_Leader_landing_distance_set;
*swig_attach_dir_get = *LibreDWGc::Dwg_Leader_attach_dir_get;
*swig_attach_dir_set = *LibreDWGc::Dwg_Leader_attach_dir_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Leader(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Leader($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_MLeaderAnnotContext ##############

package LibreDWG::Dwg_MLeaderAnnotContext;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_txt_get = *LibreDWGc::Dwg_MLeaderAnnotContext_txt_get;
*swig_txt_set = *LibreDWGc::Dwg_MLeaderAnnotContext_txt_set;
*swig_blk_get = *LibreDWGc::Dwg_MLeaderAnnotContext_blk_get;
*swig_blk_set = *LibreDWGc::Dwg_MLeaderAnnotContext_blk_set;
*swig_class_version_get = *LibreDWGc::Dwg_MLeaderAnnotContext_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_MLeaderAnnotContext_class_version_set;
*swig_has_xdic_file_get = *LibreDWGc::Dwg_MLeaderAnnotContext_has_xdic_file_get;
*swig_has_xdic_file_set = *LibreDWGc::Dwg_MLeaderAnnotContext_has_xdic_file_set;
*swig_is_default_get = *LibreDWGc::Dwg_MLeaderAnnotContext_is_default_get;
*swig_is_default_set = *LibreDWGc::Dwg_MLeaderAnnotContext_is_default_set;
*swig_scale_handle_get = *LibreDWGc::Dwg_MLeaderAnnotContext_scale_handle_get;
*swig_scale_handle_set = *LibreDWGc::Dwg_MLeaderAnnotContext_scale_handle_set;
*swig_num_leaders_get = *LibreDWGc::Dwg_MLeaderAnnotContext_num_leaders_get;
*swig_num_leaders_set = *LibreDWGc::Dwg_MLeaderAnnotContext_num_leaders_set;
*swig_leaders_get = *LibreDWGc::Dwg_MLeaderAnnotContext_leaders_get;
*swig_leaders_set = *LibreDWGc::Dwg_MLeaderAnnotContext_leaders_set;
*swig_attach_dir_get = *LibreDWGc::Dwg_MLeaderAnnotContext_attach_dir_get;
*swig_attach_dir_set = *LibreDWGc::Dwg_MLeaderAnnotContext_attach_dir_set;
*swig_scale_get = *LibreDWGc::Dwg_MLeaderAnnotContext_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_MLeaderAnnotContext_scale_set;
*swig_content_base_get = *LibreDWGc::Dwg_MLeaderAnnotContext_content_base_get;
*swig_content_base_set = *LibreDWGc::Dwg_MLeaderAnnotContext_content_base_set;
*swig_text_height_get = *LibreDWGc::Dwg_MLeaderAnnotContext_text_height_get;
*swig_text_height_set = *LibreDWGc::Dwg_MLeaderAnnotContext_text_height_set;
*swig_arrow_size_get = *LibreDWGc::Dwg_MLeaderAnnotContext_arrow_size_get;
*swig_arrow_size_set = *LibreDWGc::Dwg_MLeaderAnnotContext_arrow_size_set;
*swig_landing_gap_get = *LibreDWGc::Dwg_MLeaderAnnotContext_landing_gap_get;
*swig_landing_gap_set = *LibreDWGc::Dwg_MLeaderAnnotContext_landing_gap_set;
*swig_text_left_get = *LibreDWGc::Dwg_MLeaderAnnotContext_text_left_get;
*swig_text_left_set = *LibreDWGc::Dwg_MLeaderAnnotContext_text_left_set;
*swig_text_right_get = *LibreDWGc::Dwg_MLeaderAnnotContext_text_right_get;
*swig_text_right_set = *LibreDWGc::Dwg_MLeaderAnnotContext_text_right_set;
*swig_text_align_get = *LibreDWGc::Dwg_MLeaderAnnotContext_text_align_get;
*swig_text_align_set = *LibreDWGc::Dwg_MLeaderAnnotContext_text_align_set;
*swig_attach_type_get = *LibreDWGc::Dwg_MLeaderAnnotContext_attach_type_get;
*swig_attach_type_set = *LibreDWGc::Dwg_MLeaderAnnotContext_attach_type_set;
*swig_has_text_content_get = *LibreDWGc::Dwg_MLeaderAnnotContext_has_text_content_get;
*swig_has_text_content_set = *LibreDWGc::Dwg_MLeaderAnnotContext_has_text_content_set;
*swig_has_content_block_get = *LibreDWGc::Dwg_MLeaderAnnotContext_has_content_block_get;
*swig_has_content_block_set = *LibreDWGc::Dwg_MLeaderAnnotContext_has_content_block_set;
*swig_base_get = *LibreDWGc::Dwg_MLeaderAnnotContext_base_get;
*swig_base_set = *LibreDWGc::Dwg_MLeaderAnnotContext_base_set;
*swig_base_dir_get = *LibreDWGc::Dwg_MLeaderAnnotContext_base_dir_get;
*swig_base_dir_set = *LibreDWGc::Dwg_MLeaderAnnotContext_base_dir_set;
*swig_base_vert_get = *LibreDWGc::Dwg_MLeaderAnnotContext_base_vert_get;
*swig_base_vert_set = *LibreDWGc::Dwg_MLeaderAnnotContext_base_vert_set;
*swig_is_normal_reversed_get = *LibreDWGc::Dwg_MLeaderAnnotContext_is_normal_reversed_get;
*swig_is_normal_reversed_set = *LibreDWGc::Dwg_MLeaderAnnotContext_is_normal_reversed_set;
*swig_text_top_get = *LibreDWGc::Dwg_MLeaderAnnotContext_text_top_get;
*swig_text_top_set = *LibreDWGc::Dwg_MLeaderAnnotContext_text_top_set;
*swig_text_bottom_get = *LibreDWGc::Dwg_MLeaderAnnotContext_text_bottom_get;
*swig_text_bottom_set = *LibreDWGc::Dwg_MLeaderAnnotContext_text_bottom_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_MLeaderAnnotContext(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_MLeaderAnnotContext($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_text_content ##############

package LibreDWG::_text_content;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_label_get = *LibreDWGc::_text_content_label_get;
*swig_label_set = *LibreDWGc::_text_content_label_set;
*swig_normal_get = *LibreDWGc::_text_content_normal_get;
*swig_normal_set = *LibreDWGc::_text_content_normal_set;
*swig_style_get = *LibreDWGc::_text_content_style_get;
*swig_style_set = *LibreDWGc::_text_content_style_set;
*swig_location_get = *LibreDWGc::_text_content_location_get;
*swig_location_set = *LibreDWGc::_text_content_location_set;
*swig_direction_get = *LibreDWGc::_text_content_direction_get;
*swig_direction_set = *LibreDWGc::_text_content_direction_set;
*swig_rotation_get = *LibreDWGc::_text_content_rotation_get;
*swig_rotation_set = *LibreDWGc::_text_content_rotation_set;
*swig_width_get = *LibreDWGc::_text_content_width_get;
*swig_width_set = *LibreDWGc::_text_content_width_set;
*swig_height_get = *LibreDWGc::_text_content_height_get;
*swig_height_set = *LibreDWGc::_text_content_height_set;
*swig_line_spacing_factor_get = *LibreDWGc::_text_content_line_spacing_factor_get;
*swig_line_spacing_factor_set = *LibreDWGc::_text_content_line_spacing_factor_set;
*swig_line_spacing_style_get = *LibreDWGc::_text_content_line_spacing_style_get;
*swig_line_spacing_style_set = *LibreDWGc::_text_content_line_spacing_style_set;
*swig_color_get = *LibreDWGc::_text_content_color_get;
*swig_color_set = *LibreDWGc::_text_content_color_set;
*swig_align_get = *LibreDWGc::_text_content_align_get;
*swig_align_set = *LibreDWGc::_text_content_align_set;
*swig_flow_get = *LibreDWGc::_text_content_flow_get;
*swig_flow_set = *LibreDWGc::_text_content_flow_set;
*swig_bg_color_get = *LibreDWGc::_text_content_bg_color_get;
*swig_bg_color_set = *LibreDWGc::_text_content_bg_color_set;
*swig_bg_scale_get = *LibreDWGc::_text_content_bg_scale_get;
*swig_bg_scale_set = *LibreDWGc::_text_content_bg_scale_set;
*swig_bg_transparency_get = *LibreDWGc::_text_content_bg_transparency_get;
*swig_bg_transparency_set = *LibreDWGc::_text_content_bg_transparency_set;
*swig_is_bg_fill_get = *LibreDWGc::_text_content_is_bg_fill_get;
*swig_is_bg_fill_set = *LibreDWGc::_text_content_is_bg_fill_set;
*swig_is_bg_mask_fill_get = *LibreDWGc::_text_content_is_bg_mask_fill_get;
*swig_is_bg_mask_fill_set = *LibreDWGc::_text_content_is_bg_mask_fill_set;
*swig_col_type_get = *LibreDWGc::_text_content_col_type_get;
*swig_col_type_set = *LibreDWGc::_text_content_col_type_set;
*swig_is_height_auto_get = *LibreDWGc::_text_content_is_height_auto_get;
*swig_is_height_auto_set = *LibreDWGc::_text_content_is_height_auto_set;
*swig_col_width_get = *LibreDWGc::_text_content_col_width_get;
*swig_col_width_set = *LibreDWGc::_text_content_col_width_set;
*swig_col_gutter_get = *LibreDWGc::_text_content_col_gutter_get;
*swig_col_gutter_set = *LibreDWGc::_text_content_col_gutter_set;
*swig_is_col_flow_reversed_get = *LibreDWGc::_text_content_is_col_flow_reversed_get;
*swig_is_col_flow_reversed_set = *LibreDWGc::_text_content_is_col_flow_reversed_set;
*swig_num_col_sizes_get = *LibreDWGc::_text_content_num_col_sizes_get;
*swig_num_col_sizes_set = *LibreDWGc::_text_content_num_col_sizes_set;
*swig_col_sizes_get = *LibreDWGc::_text_content_col_sizes_get;
*swig_col_sizes_set = *LibreDWGc::_text_content_col_sizes_set;
*swig_word_break_get = *LibreDWGc::_text_content_word_break_get;
*swig_word_break_set = *LibreDWGc::_text_content_word_break_set;
*swig_unknown_get = *LibreDWGc::_text_content_unknown_get;
*swig_unknown_set = *LibreDWGc::_text_content_unknown_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__text_content(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__text_content($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_content_block ##############

package LibreDWG::_content_block;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_block_table_get = *LibreDWGc::_content_block_block_table_get;
*swig_block_table_set = *LibreDWGc::_content_block_block_table_set;
*swig_normal_get = *LibreDWGc::_content_block_normal_get;
*swig_normal_set = *LibreDWGc::_content_block_normal_set;
*swig_location_get = *LibreDWGc::_content_block_location_get;
*swig_location_set = *LibreDWGc::_content_block_location_set;
*swig_scale_get = *LibreDWGc::_content_block_scale_get;
*swig_scale_set = *LibreDWGc::_content_block_scale_set;
*swig_rotation_get = *LibreDWGc::_content_block_rotation_get;
*swig_rotation_set = *LibreDWGc::_content_block_rotation_set;
*swig_color_get = *LibreDWGc::_content_block_color_get;
*swig_color_set = *LibreDWGc::_content_block_color_set;
*swig_transform_get = *LibreDWGc::_content_block_transform_get;
*swig_transform_set = *LibreDWGc::_content_block_transform_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__content_block(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__content_block($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_MULTILEADER ##############

package LibreDWG::Dwg_Entity_MULTILEADER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_MULTILEADER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_MULTILEADER_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_MULTILEADER_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_MULTILEADER_class_version_set;
*swig_ctx_get = *LibreDWGc::Dwg_Entity_MULTILEADER_ctx_get;
*swig_ctx_set = *LibreDWGc::Dwg_Entity_MULTILEADER_ctx_set;
*swig_leaderstyle_get = *LibreDWGc::Dwg_Entity_MULTILEADER_leaderstyle_get;
*swig_leaderstyle_set = *LibreDWGc::Dwg_Entity_MULTILEADER_leaderstyle_set;
*swig_flags_get = *LibreDWGc::Dwg_Entity_MULTILEADER_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_Entity_MULTILEADER_flags_set;
*swig_type_get = *LibreDWGc::Dwg_Entity_MULTILEADER_type_get;
*swig_type_set = *LibreDWGc::Dwg_Entity_MULTILEADER_type_set;
*swig_color_get = *LibreDWGc::Dwg_Entity_MULTILEADER_color_get;
*swig_color_set = *LibreDWGc::Dwg_Entity_MULTILEADER_color_set;
*swig_ltype_get = *LibreDWGc::Dwg_Entity_MULTILEADER_ltype_get;
*swig_ltype_set = *LibreDWGc::Dwg_Entity_MULTILEADER_ltype_set;
*swig_linewt_get = *LibreDWGc::Dwg_Entity_MULTILEADER_linewt_get;
*swig_linewt_set = *LibreDWGc::Dwg_Entity_MULTILEADER_linewt_set;
*swig_landing_get = *LibreDWGc::Dwg_Entity_MULTILEADER_landing_get;
*swig_landing_set = *LibreDWGc::Dwg_Entity_MULTILEADER_landing_set;
*swig_dog_leg_get = *LibreDWGc::Dwg_Entity_MULTILEADER_dog_leg_get;
*swig_dog_leg_set = *LibreDWGc::Dwg_Entity_MULTILEADER_dog_leg_set;
*swig_landing_dist_get = *LibreDWGc::Dwg_Entity_MULTILEADER_landing_dist_get;
*swig_landing_dist_set = *LibreDWGc::Dwg_Entity_MULTILEADER_landing_dist_set;
*swig_arrow_head_get = *LibreDWGc::Dwg_Entity_MULTILEADER_arrow_head_get;
*swig_arrow_head_set = *LibreDWGc::Dwg_Entity_MULTILEADER_arrow_head_set;
*swig_arrow_head_size_get = *LibreDWGc::Dwg_Entity_MULTILEADER_arrow_head_size_get;
*swig_arrow_head_size_set = *LibreDWGc::Dwg_Entity_MULTILEADER_arrow_head_size_set;
*swig_style_content_get = *LibreDWGc::Dwg_Entity_MULTILEADER_style_content_get;
*swig_style_content_set = *LibreDWGc::Dwg_Entity_MULTILEADER_style_content_set;
*swig_text_style_get = *LibreDWGc::Dwg_Entity_MULTILEADER_text_style_get;
*swig_text_style_set = *LibreDWGc::Dwg_Entity_MULTILEADER_text_style_set;
*swig_text_left_get = *LibreDWGc::Dwg_Entity_MULTILEADER_text_left_get;
*swig_text_left_set = *LibreDWGc::Dwg_Entity_MULTILEADER_text_left_set;
*swig_text_right_get = *LibreDWGc::Dwg_Entity_MULTILEADER_text_right_get;
*swig_text_right_set = *LibreDWGc::Dwg_Entity_MULTILEADER_text_right_set;
*swig_text_angletype_get = *LibreDWGc::Dwg_Entity_MULTILEADER_text_angletype_get;
*swig_text_angletype_set = *LibreDWGc::Dwg_Entity_MULTILEADER_text_angletype_set;
*swig_attach_type_get = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_type_get;
*swig_attach_type_set = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_type_set;
*swig_text_color_get = *LibreDWGc::Dwg_Entity_MULTILEADER_text_color_get;
*swig_text_color_set = *LibreDWGc::Dwg_Entity_MULTILEADER_text_color_set;
*swig_text_frame_get = *LibreDWGc::Dwg_Entity_MULTILEADER_text_frame_get;
*swig_text_frame_set = *LibreDWGc::Dwg_Entity_MULTILEADER_text_frame_set;
*swig_block_style_get = *LibreDWGc::Dwg_Entity_MULTILEADER_block_style_get;
*swig_block_style_set = *LibreDWGc::Dwg_Entity_MULTILEADER_block_style_set;
*swig_block_color_get = *LibreDWGc::Dwg_Entity_MULTILEADER_block_color_get;
*swig_block_color_set = *LibreDWGc::Dwg_Entity_MULTILEADER_block_color_set;
*swig_block_scale_get = *LibreDWGc::Dwg_Entity_MULTILEADER_block_scale_get;
*swig_block_scale_set = *LibreDWGc::Dwg_Entity_MULTILEADER_block_scale_set;
*swig_block_rotation_get = *LibreDWGc::Dwg_Entity_MULTILEADER_block_rotation_get;
*swig_block_rotation_set = *LibreDWGc::Dwg_Entity_MULTILEADER_block_rotation_set;
*swig_style_attachment_get = *LibreDWGc::Dwg_Entity_MULTILEADER_style_attachment_get;
*swig_style_attachment_set = *LibreDWGc::Dwg_Entity_MULTILEADER_style_attachment_set;
*swig_is_annotative_get = *LibreDWGc::Dwg_Entity_MULTILEADER_is_annotative_get;
*swig_is_annotative_set = *LibreDWGc::Dwg_Entity_MULTILEADER_is_annotative_set;
*swig_num_arrowheads_get = *LibreDWGc::Dwg_Entity_MULTILEADER_num_arrowheads_get;
*swig_num_arrowheads_set = *LibreDWGc::Dwg_Entity_MULTILEADER_num_arrowheads_set;
*swig_arrowheads_get = *LibreDWGc::Dwg_Entity_MULTILEADER_arrowheads_get;
*swig_arrowheads_set = *LibreDWGc::Dwg_Entity_MULTILEADER_arrowheads_set;
*swig_num_blocklabels_get = *LibreDWGc::Dwg_Entity_MULTILEADER_num_blocklabels_get;
*swig_num_blocklabels_set = *LibreDWGc::Dwg_Entity_MULTILEADER_num_blocklabels_set;
*swig_blocklabels_get = *LibreDWGc::Dwg_Entity_MULTILEADER_blocklabels_get;
*swig_blocklabels_set = *LibreDWGc::Dwg_Entity_MULTILEADER_blocklabels_set;
*swig_neg_textdir_get = *LibreDWGc::Dwg_Entity_MULTILEADER_neg_textdir_get;
*swig_neg_textdir_set = *LibreDWGc::Dwg_Entity_MULTILEADER_neg_textdir_set;
*swig_ipe_align_get = *LibreDWGc::Dwg_Entity_MULTILEADER_ipe_align_get;
*swig_ipe_align_set = *LibreDWGc::Dwg_Entity_MULTILEADER_ipe_align_set;
*swig_justification_get = *LibreDWGc::Dwg_Entity_MULTILEADER_justification_get;
*swig_justification_set = *LibreDWGc::Dwg_Entity_MULTILEADER_justification_set;
*swig_scale_factor_get = *LibreDWGc::Dwg_Entity_MULTILEADER_scale_factor_get;
*swig_scale_factor_set = *LibreDWGc::Dwg_Entity_MULTILEADER_scale_factor_set;
*swig_attach_dir_get = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_dir_get;
*swig_attach_dir_set = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_dir_set;
*swig_attach_top_get = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_top_get;
*swig_attach_top_set = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_top_set;
*swig_attach_bottom_get = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_bottom_get;
*swig_attach_bottom_set = *LibreDWGc::Dwg_Entity_MULTILEADER_attach_bottom_set;
*swig_text_extended_get = *LibreDWGc::Dwg_Entity_MULTILEADER_text_extended_get;
*swig_text_extended_set = *LibreDWGc::Dwg_Entity_MULTILEADER_text_extended_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_MULTILEADER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_MULTILEADER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_MLEADERSTYLE ##############

package LibreDWG::Dwg_Object_MLEADERSTYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_class_version_set;
*swig_content_type_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_content_type_get;
*swig_content_type_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_content_type_set;
*swig_mleader_order_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_mleader_order_get;
*swig_mleader_order_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_mleader_order_set;
*swig_leader_order_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_leader_order_get;
*swig_leader_order_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_leader_order_set;
*swig_max_points_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_max_points_get;
*swig_max_points_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_max_points_set;
*swig_first_seg_angle_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_first_seg_angle_get;
*swig_first_seg_angle_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_first_seg_angle_set;
*swig_second_seg_angle_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_second_seg_angle_get;
*swig_second_seg_angle_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_second_seg_angle_set;
*swig_type_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_type_get;
*swig_type_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_type_set;
*swig_line_color_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_line_color_get;
*swig_line_color_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_line_color_set;
*swig_line_type_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_line_type_get;
*swig_line_type_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_line_type_set;
*swig_linewt_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_linewt_get;
*swig_linewt_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_linewt_set;
*swig_landing_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_landing_get;
*swig_landing_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_landing_set;
*swig_landing_gap_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_landing_gap_get;
*swig_landing_gap_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_landing_gap_set;
*swig_dog_leg_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_dog_leg_get;
*swig_dog_leg_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_dog_leg_set;
*swig_landing_dist_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_landing_dist_get;
*swig_landing_dist_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_landing_dist_set;
*swig_description_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_description_get;
*swig_description_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_description_set;
*swig_arrow_head_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_arrow_head_get;
*swig_arrow_head_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_arrow_head_set;
*swig_arrow_head_size_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_arrow_head_size_get;
*swig_arrow_head_size_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_arrow_head_size_set;
*swig_text_default_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_default_get;
*swig_text_default_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_default_set;
*swig_text_style_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_style_get;
*swig_text_style_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_style_set;
*swig_attach_left_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_left_get;
*swig_attach_left_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_left_set;
*swig_attach_right_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_right_get;
*swig_attach_right_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_right_set;
*swig_text_angle_type_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_angle_type_get;
*swig_text_angle_type_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_angle_type_set;
*swig_text_align_type_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_align_type_get;
*swig_text_align_type_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_align_type_set;
*swig_text_color_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_color_get;
*swig_text_color_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_color_set;
*swig_text_height_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_height_get;
*swig_text_height_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_height_set;
*swig_text_frame_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_frame_get;
*swig_text_frame_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_frame_set;
*swig_is_new_format_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_is_new_format_get;
*swig_is_new_format_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_is_new_format_set;
*swig_text_always_left_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_always_left_get;
*swig_text_always_left_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_always_left_set;
*swig_align_space_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_align_space_get;
*swig_align_space_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_align_space_set;
*swig_block_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_get;
*swig_block_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_set;
*swig_block_color_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_color_get;
*swig_block_color_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_color_set;
*swig_block_scale_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_scale_get;
*swig_block_scale_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_scale_set;
*swig_use_block_scale_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_use_block_scale_get;
*swig_use_block_scale_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_use_block_scale_set;
*swig_block_rotation_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_rotation_get;
*swig_block_rotation_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_rotation_set;
*swig_use_block_rotation_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_use_block_rotation_get;
*swig_use_block_rotation_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_use_block_rotation_set;
*swig_block_connection_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_connection_get;
*swig_block_connection_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_block_connection_set;
*swig_scale_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_scale_set;
*swig_changed_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_changed_get;
*swig_changed_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_changed_set;
*swig_is_annotative_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_is_annotative_get;
*swig_is_annotative_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_is_annotative_set;
*swig_break_size_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_break_size_get;
*swig_break_size_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_break_size_set;
*swig_attach_dir_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_dir_get;
*swig_attach_dir_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_dir_set;
*swig_attach_top_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_top_get;
*swig_attach_top_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_top_set;
*swig_attach_bottom_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_bottom_get;
*swig_attach_bottom_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_attach_bottom_set;
*swig_text_extended_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_extended_get;
*swig_text_extended_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_text_extended_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_MLEADERSTYLE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_MLEADERSTYLE_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_MLEADERSTYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_MLEADERSTYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VBA_PROJECT ##############

package LibreDWG::Dwg_Object_VBA_PROJECT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_VBA_PROJECT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VBA_PROJECT_parent_set;
*swig_num_bytes_get = *LibreDWGc::Dwg_Object_VBA_PROJECT_num_bytes_get;
*swig_num_bytes_set = *LibreDWGc::Dwg_Object_VBA_PROJECT_num_bytes_set;
*swig_bytes_get = *LibreDWGc::Dwg_Object_VBA_PROJECT_bytes_get;
*swig_bytes_set = *LibreDWGc::Dwg_Object_VBA_PROJECT_bytes_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_VBA_PROJECT_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_VBA_PROJECT_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VBA_PROJECT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VBA_PROJECT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LAYOUT ##############

package LibreDWG::Dwg_Object_LAYOUT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LAYOUT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LAYOUT_parent_set;
*swig_page_setup_name_get = *LibreDWGc::Dwg_Object_LAYOUT_page_setup_name_get;
*swig_page_setup_name_set = *LibreDWGc::Dwg_Object_LAYOUT_page_setup_name_set;
*swig_printer_or_config_get = *LibreDWGc::Dwg_Object_LAYOUT_printer_or_config_get;
*swig_printer_or_config_set = *LibreDWGc::Dwg_Object_LAYOUT_printer_or_config_set;
*swig_plot_layout_flags_get = *LibreDWGc::Dwg_Object_LAYOUT_plot_layout_flags_get;
*swig_plot_layout_flags_set = *LibreDWGc::Dwg_Object_LAYOUT_plot_layout_flags_set;
*swig_left_margin_get = *LibreDWGc::Dwg_Object_LAYOUT_left_margin_get;
*swig_left_margin_set = *LibreDWGc::Dwg_Object_LAYOUT_left_margin_set;
*swig_bottom_margin_get = *LibreDWGc::Dwg_Object_LAYOUT_bottom_margin_get;
*swig_bottom_margin_set = *LibreDWGc::Dwg_Object_LAYOUT_bottom_margin_set;
*swig_right_margin_get = *LibreDWGc::Dwg_Object_LAYOUT_right_margin_get;
*swig_right_margin_set = *LibreDWGc::Dwg_Object_LAYOUT_right_margin_set;
*swig_top_margin_get = *LibreDWGc::Dwg_Object_LAYOUT_top_margin_get;
*swig_top_margin_set = *LibreDWGc::Dwg_Object_LAYOUT_top_margin_set;
*swig_paper_width_get = *LibreDWGc::Dwg_Object_LAYOUT_paper_width_get;
*swig_paper_width_set = *LibreDWGc::Dwg_Object_LAYOUT_paper_width_set;
*swig_paper_height_get = *LibreDWGc::Dwg_Object_LAYOUT_paper_height_get;
*swig_paper_height_set = *LibreDWGc::Dwg_Object_LAYOUT_paper_height_set;
*swig_paper_size_get = *LibreDWGc::Dwg_Object_LAYOUT_paper_size_get;
*swig_paper_size_set = *LibreDWGc::Dwg_Object_LAYOUT_paper_size_set;
*swig_plot_origin_get = *LibreDWGc::Dwg_Object_LAYOUT_plot_origin_get;
*swig_plot_origin_set = *LibreDWGc::Dwg_Object_LAYOUT_plot_origin_set;
*swig_paper_units_get = *LibreDWGc::Dwg_Object_LAYOUT_paper_units_get;
*swig_paper_units_set = *LibreDWGc::Dwg_Object_LAYOUT_paper_units_set;
*swig_plot_rotation_get = *LibreDWGc::Dwg_Object_LAYOUT_plot_rotation_get;
*swig_plot_rotation_set = *LibreDWGc::Dwg_Object_LAYOUT_plot_rotation_set;
*swig_plot_type_get = *LibreDWGc::Dwg_Object_LAYOUT_plot_type_get;
*swig_plot_type_set = *LibreDWGc::Dwg_Object_LAYOUT_plot_type_set;
*swig_window_min_get = *LibreDWGc::Dwg_Object_LAYOUT_window_min_get;
*swig_window_min_set = *LibreDWGc::Dwg_Object_LAYOUT_window_min_set;
*swig_window_max_get = *LibreDWGc::Dwg_Object_LAYOUT_window_max_get;
*swig_window_max_set = *LibreDWGc::Dwg_Object_LAYOUT_window_max_set;
*swig_plot_view_name_get = *LibreDWGc::Dwg_Object_LAYOUT_plot_view_name_get;
*swig_plot_view_name_set = *LibreDWGc::Dwg_Object_LAYOUT_plot_view_name_set;
*swig_real_world_units_get = *LibreDWGc::Dwg_Object_LAYOUT_real_world_units_get;
*swig_real_world_units_set = *LibreDWGc::Dwg_Object_LAYOUT_real_world_units_set;
*swig_drawing_units_get = *LibreDWGc::Dwg_Object_LAYOUT_drawing_units_get;
*swig_drawing_units_set = *LibreDWGc::Dwg_Object_LAYOUT_drawing_units_set;
*swig_current_style_sheet_get = *LibreDWGc::Dwg_Object_LAYOUT_current_style_sheet_get;
*swig_current_style_sheet_set = *LibreDWGc::Dwg_Object_LAYOUT_current_style_sheet_set;
*swig_scale_type_get = *LibreDWGc::Dwg_Object_LAYOUT_scale_type_get;
*swig_scale_type_set = *LibreDWGc::Dwg_Object_LAYOUT_scale_type_set;
*swig_scale_factor_get = *LibreDWGc::Dwg_Object_LAYOUT_scale_factor_get;
*swig_scale_factor_set = *LibreDWGc::Dwg_Object_LAYOUT_scale_factor_set;
*swig_paper_image_origin_get = *LibreDWGc::Dwg_Object_LAYOUT_paper_image_origin_get;
*swig_paper_image_origin_set = *LibreDWGc::Dwg_Object_LAYOUT_paper_image_origin_set;
*swig_shade_plot_mode_get = *LibreDWGc::Dwg_Object_LAYOUT_shade_plot_mode_get;
*swig_shade_plot_mode_set = *LibreDWGc::Dwg_Object_LAYOUT_shade_plot_mode_set;
*swig_shade_plot_res_level_get = *LibreDWGc::Dwg_Object_LAYOUT_shade_plot_res_level_get;
*swig_shade_plot_res_level_set = *LibreDWGc::Dwg_Object_LAYOUT_shade_plot_res_level_set;
*swig_shade_plot_custom_dpi_get = *LibreDWGc::Dwg_Object_LAYOUT_shade_plot_custom_dpi_get;
*swig_shade_plot_custom_dpi_set = *LibreDWGc::Dwg_Object_LAYOUT_shade_plot_custom_dpi_set;
*swig_layout_name_get = *LibreDWGc::Dwg_Object_LAYOUT_layout_name_get;
*swig_layout_name_set = *LibreDWGc::Dwg_Object_LAYOUT_layout_name_set;
*swig_tab_order_get = *LibreDWGc::Dwg_Object_LAYOUT_tab_order_get;
*swig_tab_order_set = *LibreDWGc::Dwg_Object_LAYOUT_tab_order_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_LAYOUT_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_LAYOUT_flag_set;
*swig_ucs_origin_get = *LibreDWGc::Dwg_Object_LAYOUT_ucs_origin_get;
*swig_ucs_origin_set = *LibreDWGc::Dwg_Object_LAYOUT_ucs_origin_set;
*swig_minimum_limits_get = *LibreDWGc::Dwg_Object_LAYOUT_minimum_limits_get;
*swig_minimum_limits_set = *LibreDWGc::Dwg_Object_LAYOUT_minimum_limits_set;
*swig_maximum_limits_get = *LibreDWGc::Dwg_Object_LAYOUT_maximum_limits_get;
*swig_maximum_limits_set = *LibreDWGc::Dwg_Object_LAYOUT_maximum_limits_set;
*swig_ins_point_get = *LibreDWGc::Dwg_Object_LAYOUT_ins_point_get;
*swig_ins_point_set = *LibreDWGc::Dwg_Object_LAYOUT_ins_point_set;
*swig_ucs_x_axis_get = *LibreDWGc::Dwg_Object_LAYOUT_ucs_x_axis_get;
*swig_ucs_x_axis_set = *LibreDWGc::Dwg_Object_LAYOUT_ucs_x_axis_set;
*swig_ucs_y_axis_get = *LibreDWGc::Dwg_Object_LAYOUT_ucs_y_axis_get;
*swig_ucs_y_axis_set = *LibreDWGc::Dwg_Object_LAYOUT_ucs_y_axis_set;
*swig_elevation_get = *LibreDWGc::Dwg_Object_LAYOUT_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Object_LAYOUT_elevation_set;
*swig_orthoview_type_get = *LibreDWGc::Dwg_Object_LAYOUT_orthoview_type_get;
*swig_orthoview_type_set = *LibreDWGc::Dwg_Object_LAYOUT_orthoview_type_set;
*swig_extent_min_get = *LibreDWGc::Dwg_Object_LAYOUT_extent_min_get;
*swig_extent_min_set = *LibreDWGc::Dwg_Object_LAYOUT_extent_min_set;
*swig_extent_max_get = *LibreDWGc::Dwg_Object_LAYOUT_extent_max_get;
*swig_extent_max_set = *LibreDWGc::Dwg_Object_LAYOUT_extent_max_set;
*swig_num_viewports_get = *LibreDWGc::Dwg_Object_LAYOUT_num_viewports_get;
*swig_num_viewports_set = *LibreDWGc::Dwg_Object_LAYOUT_num_viewports_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_LAYOUT_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_LAYOUT_parenthandle_set;
*swig_plot_view_get = *LibreDWGc::Dwg_Object_LAYOUT_plot_view_get;
*swig_plot_view_set = *LibreDWGc::Dwg_Object_LAYOUT_plot_view_set;
*swig_visual_style_get = *LibreDWGc::Dwg_Object_LAYOUT_visual_style_get;
*swig_visual_style_set = *LibreDWGc::Dwg_Object_LAYOUT_visual_style_set;
*swig_pspace_block_record_get = *LibreDWGc::Dwg_Object_LAYOUT_pspace_block_record_get;
*swig_pspace_block_record_set = *LibreDWGc::Dwg_Object_LAYOUT_pspace_block_record_set;
*swig_last_viewport_get = *LibreDWGc::Dwg_Object_LAYOUT_last_viewport_get;
*swig_last_viewport_set = *LibreDWGc::Dwg_Object_LAYOUT_last_viewport_set;
*swig_base_ucs_get = *LibreDWGc::Dwg_Object_LAYOUT_base_ucs_get;
*swig_base_ucs_set = *LibreDWGc::Dwg_Object_LAYOUT_base_ucs_set;
*swig_named_ucs_get = *LibreDWGc::Dwg_Object_LAYOUT_named_ucs_get;
*swig_named_ucs_set = *LibreDWGc::Dwg_Object_LAYOUT_named_ucs_set;
*swig_viewports_get = *LibreDWGc::Dwg_Object_LAYOUT_viewports_get;
*swig_viewports_set = *LibreDWGc::Dwg_Object_LAYOUT_viewports_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LAYOUT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LAYOUT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TABLE_value ##############

package LibreDWG::Dwg_TABLE_value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_flags_get = *LibreDWGc::Dwg_TABLE_value_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_TABLE_value_flags_set;
*swig_data_type_get = *LibreDWGc::Dwg_TABLE_value_data_type_get;
*swig_data_type_set = *LibreDWGc::Dwg_TABLE_value_data_type_set;
*swig_data_size_get = *LibreDWGc::Dwg_TABLE_value_data_size_get;
*swig_data_size_set = *LibreDWGc::Dwg_TABLE_value_data_size_set;
*swig_data_long_get = *LibreDWGc::Dwg_TABLE_value_data_long_get;
*swig_data_long_set = *LibreDWGc::Dwg_TABLE_value_data_long_set;
*swig_data_double_get = *LibreDWGc::Dwg_TABLE_value_data_double_get;
*swig_data_double_set = *LibreDWGc::Dwg_TABLE_value_data_double_set;
*swig_data_string_get = *LibreDWGc::Dwg_TABLE_value_data_string_get;
*swig_data_string_set = *LibreDWGc::Dwg_TABLE_value_data_string_set;
*swig_data_date_get = *LibreDWGc::Dwg_TABLE_value_data_date_get;
*swig_data_date_set = *LibreDWGc::Dwg_TABLE_value_data_date_set;
*swig_data_point_get = *LibreDWGc::Dwg_TABLE_value_data_point_get;
*swig_data_point_set = *LibreDWGc::Dwg_TABLE_value_data_point_set;
*swig_data_3dpoint_get = *LibreDWGc::Dwg_TABLE_value_data_3dpoint_get;
*swig_data_3dpoint_set = *LibreDWGc::Dwg_TABLE_value_data_3dpoint_set;
*swig_unit_type_get = *LibreDWGc::Dwg_TABLE_value_unit_type_get;
*swig_unit_type_set = *LibreDWGc::Dwg_TABLE_value_unit_type_set;
*swig_format_string_get = *LibreDWGc::Dwg_TABLE_value_format_string_get;
*swig_format_string_set = *LibreDWGc::Dwg_TABLE_value_format_string_set;
*swig_value_string_get = *LibreDWGc::Dwg_TABLE_value_value_string_get;
*swig_value_string_set = *LibreDWGc::Dwg_TABLE_value_value_string_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TABLE_value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TABLE_value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TABLE_CustomDataItem ##############

package LibreDWG::Dwg_TABLE_CustomDataItem;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *LibreDWGc::Dwg_TABLE_CustomDataItem_name_get;
*swig_name_set = *LibreDWGc::Dwg_TABLE_CustomDataItem_name_set;
*swig_value_get = *LibreDWGc::Dwg_TABLE_CustomDataItem_value_get;
*swig_value_set = *LibreDWGc::Dwg_TABLE_CustomDataItem_value_set;
*swig_cell_parent_get = *LibreDWGc::Dwg_TABLE_CustomDataItem_cell_parent_get;
*swig_cell_parent_set = *LibreDWGc::Dwg_TABLE_CustomDataItem_cell_parent_set;
*swig_row_parent_get = *LibreDWGc::Dwg_TABLE_CustomDataItem_row_parent_get;
*swig_row_parent_set = *LibreDWGc::Dwg_TABLE_CustomDataItem_row_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TABLE_CustomDataItem(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TABLE_CustomDataItem($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TABLE_Cell ##############

package LibreDWG::Dwg_TABLE_Cell;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *LibreDWGc::Dwg_TABLE_Cell_type_get;
*swig_type_set = *LibreDWGc::Dwg_TABLE_Cell_type_set;
*swig_flags_get = *LibreDWGc::Dwg_TABLE_Cell_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_TABLE_Cell_flags_set;
*swig_merged_value_get = *LibreDWGc::Dwg_TABLE_Cell_merged_value_get;
*swig_merged_value_set = *LibreDWGc::Dwg_TABLE_Cell_merged_value_set;
*swig_autofit_flag_get = *LibreDWGc::Dwg_TABLE_Cell_autofit_flag_get;
*swig_autofit_flag_set = *LibreDWGc::Dwg_TABLE_Cell_autofit_flag_set;
*swig_merged_width_flag_get = *LibreDWGc::Dwg_TABLE_Cell_merged_width_flag_get;
*swig_merged_width_flag_set = *LibreDWGc::Dwg_TABLE_Cell_merged_width_flag_set;
*swig_merged_height_flag_get = *LibreDWGc::Dwg_TABLE_Cell_merged_height_flag_get;
*swig_merged_height_flag_set = *LibreDWGc::Dwg_TABLE_Cell_merged_height_flag_set;
*swig_rotation_value_get = *LibreDWGc::Dwg_TABLE_Cell_rotation_value_get;
*swig_rotation_value_set = *LibreDWGc::Dwg_TABLE_Cell_rotation_value_set;
*swig_text_string_get = *LibreDWGc::Dwg_TABLE_Cell_text_string_get;
*swig_text_string_set = *LibreDWGc::Dwg_TABLE_Cell_text_string_set;
*swig_block_scale_get = *LibreDWGc::Dwg_TABLE_Cell_block_scale_get;
*swig_block_scale_set = *LibreDWGc::Dwg_TABLE_Cell_block_scale_set;
*swig_additional_data_flag_get = *LibreDWGc::Dwg_TABLE_Cell_additional_data_flag_get;
*swig_additional_data_flag_set = *LibreDWGc::Dwg_TABLE_Cell_additional_data_flag_set;
*swig_num_attr_defs_get = *LibreDWGc::Dwg_TABLE_Cell_num_attr_defs_get;
*swig_num_attr_defs_set = *LibreDWGc::Dwg_TABLE_Cell_num_attr_defs_set;
*swig_attr_def_index_get = *LibreDWGc::Dwg_TABLE_Cell_attr_def_index_get;
*swig_attr_def_index_set = *LibreDWGc::Dwg_TABLE_Cell_attr_def_index_set;
*swig_attr_def_text_get = *LibreDWGc::Dwg_TABLE_Cell_attr_def_text_get;
*swig_attr_def_text_set = *LibreDWGc::Dwg_TABLE_Cell_attr_def_text_set;
*swig_additional_data_flag2_get = *LibreDWGc::Dwg_TABLE_Cell_additional_data_flag2_get;
*swig_additional_data_flag2_set = *LibreDWGc::Dwg_TABLE_Cell_additional_data_flag2_set;
*swig_cell_flag_override_get = *LibreDWGc::Dwg_TABLE_Cell_cell_flag_override_get;
*swig_cell_flag_override_set = *LibreDWGc::Dwg_TABLE_Cell_cell_flag_override_set;
*swig_virtual_edge_flag_get = *LibreDWGc::Dwg_TABLE_Cell_virtual_edge_flag_get;
*swig_virtual_edge_flag_set = *LibreDWGc::Dwg_TABLE_Cell_virtual_edge_flag_set;
*swig_cell_alignment_get = *LibreDWGc::Dwg_TABLE_Cell_cell_alignment_get;
*swig_cell_alignment_set = *LibreDWGc::Dwg_TABLE_Cell_cell_alignment_set;
*swig_background_fill_none_get = *LibreDWGc::Dwg_TABLE_Cell_background_fill_none_get;
*swig_background_fill_none_set = *LibreDWGc::Dwg_TABLE_Cell_background_fill_none_set;
*swig_background_color_get = *LibreDWGc::Dwg_TABLE_Cell_background_color_get;
*swig_background_color_set = *LibreDWGc::Dwg_TABLE_Cell_background_color_set;
*swig_content_color_get = *LibreDWGc::Dwg_TABLE_Cell_content_color_get;
*swig_content_color_set = *LibreDWGc::Dwg_TABLE_Cell_content_color_set;
*swig_text_style_get = *LibreDWGc::Dwg_TABLE_Cell_text_style_get;
*swig_text_style_set = *LibreDWGc::Dwg_TABLE_Cell_text_style_set;
*swig_text_height_get = *LibreDWGc::Dwg_TABLE_Cell_text_height_get;
*swig_text_height_set = *LibreDWGc::Dwg_TABLE_Cell_text_height_set;
*swig_top_grid_color_get = *LibreDWGc::Dwg_TABLE_Cell_top_grid_color_get;
*swig_top_grid_color_set = *LibreDWGc::Dwg_TABLE_Cell_top_grid_color_set;
*swig_top_grid_linewt_get = *LibreDWGc::Dwg_TABLE_Cell_top_grid_linewt_get;
*swig_top_grid_linewt_set = *LibreDWGc::Dwg_TABLE_Cell_top_grid_linewt_set;
*swig_top_visibility_get = *LibreDWGc::Dwg_TABLE_Cell_top_visibility_get;
*swig_top_visibility_set = *LibreDWGc::Dwg_TABLE_Cell_top_visibility_set;
*swig_right_grid_color_get = *LibreDWGc::Dwg_TABLE_Cell_right_grid_color_get;
*swig_right_grid_color_set = *LibreDWGc::Dwg_TABLE_Cell_right_grid_color_set;
*swig_right_grid_linewt_get = *LibreDWGc::Dwg_TABLE_Cell_right_grid_linewt_get;
*swig_right_grid_linewt_set = *LibreDWGc::Dwg_TABLE_Cell_right_grid_linewt_set;
*swig_right_visibility_get = *LibreDWGc::Dwg_TABLE_Cell_right_visibility_get;
*swig_right_visibility_set = *LibreDWGc::Dwg_TABLE_Cell_right_visibility_set;
*swig_bottom_grid_color_get = *LibreDWGc::Dwg_TABLE_Cell_bottom_grid_color_get;
*swig_bottom_grid_color_set = *LibreDWGc::Dwg_TABLE_Cell_bottom_grid_color_set;
*swig_bottom_grid_linewt_get = *LibreDWGc::Dwg_TABLE_Cell_bottom_grid_linewt_get;
*swig_bottom_grid_linewt_set = *LibreDWGc::Dwg_TABLE_Cell_bottom_grid_linewt_set;
*swig_bottom_visibility_get = *LibreDWGc::Dwg_TABLE_Cell_bottom_visibility_get;
*swig_bottom_visibility_set = *LibreDWGc::Dwg_TABLE_Cell_bottom_visibility_set;
*swig_left_grid_color_get = *LibreDWGc::Dwg_TABLE_Cell_left_grid_color_get;
*swig_left_grid_color_set = *LibreDWGc::Dwg_TABLE_Cell_left_grid_color_set;
*swig_left_grid_linewt_get = *LibreDWGc::Dwg_TABLE_Cell_left_grid_linewt_get;
*swig_left_grid_linewt_set = *LibreDWGc::Dwg_TABLE_Cell_left_grid_linewt_set;
*swig_left_visibility_get = *LibreDWGc::Dwg_TABLE_Cell_left_visibility_get;
*swig_left_visibility_set = *LibreDWGc::Dwg_TABLE_Cell_left_visibility_set;
*swig_unknown_get = *LibreDWGc::Dwg_TABLE_Cell_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_TABLE_Cell_unknown_set;
*swig_value_get = *LibreDWGc::Dwg_TABLE_Cell_value_get;
*swig_value_set = *LibreDWGc::Dwg_TABLE_Cell_value_set;
*swig_cell_handle_get = *LibreDWGc::Dwg_TABLE_Cell_cell_handle_get;
*swig_cell_handle_set = *LibreDWGc::Dwg_TABLE_Cell_cell_handle_set;
*swig_attr_def_id_get = *LibreDWGc::Dwg_TABLE_Cell_attr_def_id_get;
*swig_attr_def_id_set = *LibreDWGc::Dwg_TABLE_Cell_attr_def_id_set;
*swig_text_style_override_get = *LibreDWGc::Dwg_TABLE_Cell_text_style_override_get;
*swig_text_style_override_set = *LibreDWGc::Dwg_TABLE_Cell_text_style_override_set;
*swig_parent_get = *LibreDWGc::Dwg_TABLE_Cell_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TABLE_Cell_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TABLE_Cell(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TABLE_Cell($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TABLE_BreakHeight ##############

package LibreDWG::Dwg_TABLE_BreakHeight;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_position_get = *LibreDWGc::Dwg_TABLE_BreakHeight_position_get;
*swig_position_set = *LibreDWGc::Dwg_TABLE_BreakHeight_position_set;
*swig_height_get = *LibreDWGc::Dwg_TABLE_BreakHeight_height_get;
*swig_height_set = *LibreDWGc::Dwg_TABLE_BreakHeight_height_set;
*swig_flag_get = *LibreDWGc::Dwg_TABLE_BreakHeight_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_TABLE_BreakHeight_flag_set;
*swig_parent_get = *LibreDWGc::Dwg_TABLE_BreakHeight_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TABLE_BreakHeight_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TABLE_BreakHeight(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TABLE_BreakHeight($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TABLE_BreakRow ##############

package LibreDWG::Dwg_TABLE_BreakRow;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_position_get = *LibreDWGc::Dwg_TABLE_BreakRow_position_get;
*swig_position_set = *LibreDWGc::Dwg_TABLE_BreakRow_position_set;
*swig_start_get = *LibreDWGc::Dwg_TABLE_BreakRow_start_get;
*swig_start_set = *LibreDWGc::Dwg_TABLE_BreakRow_start_set;
*swig_end_get = *LibreDWGc::Dwg_TABLE_BreakRow_end_get;
*swig_end_set = *LibreDWGc::Dwg_TABLE_BreakRow_end_set;
*swig_parent_get = *LibreDWGc::Dwg_TABLE_BreakRow_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TABLE_BreakRow_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TABLE_BreakRow(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TABLE_BreakRow($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_TABLE ##############

package LibreDWG::Dwg_Entity_TABLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_TABLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_TABLE_parent_set;
*swig_unknown_rc_get = *LibreDWGc::Dwg_Entity_TABLE_unknown_rc_get;
*swig_unknown_rc_set = *LibreDWGc::Dwg_Entity_TABLE_unknown_rc_set;
*swig_unknown_h_get = *LibreDWGc::Dwg_Entity_TABLE_unknown_h_get;
*swig_unknown_h_set = *LibreDWGc::Dwg_Entity_TABLE_unknown_h_set;
*swig_unknown_bl_get = *LibreDWGc::Dwg_Entity_TABLE_unknown_bl_get;
*swig_unknown_bl_set = *LibreDWGc::Dwg_Entity_TABLE_unknown_bl_set;
*swig_unknown_b_get = *LibreDWGc::Dwg_Entity_TABLE_unknown_b_get;
*swig_unknown_b_set = *LibreDWGc::Dwg_Entity_TABLE_unknown_b_set;
*swig_unknown_bl1_get = *LibreDWGc::Dwg_Entity_TABLE_unknown_bl1_get;
*swig_unknown_bl1_set = *LibreDWGc::Dwg_Entity_TABLE_unknown_bl1_set;
*swig_insertion_point_get = *LibreDWGc::Dwg_Entity_TABLE_insertion_point_get;
*swig_insertion_point_set = *LibreDWGc::Dwg_Entity_TABLE_insertion_point_set;
*swig_scale_get = *LibreDWGc::Dwg_Entity_TABLE_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_Entity_TABLE_scale_set;
*swig_data_flags_get = *LibreDWGc::Dwg_Entity_TABLE_data_flags_get;
*swig_data_flags_set = *LibreDWGc::Dwg_Entity_TABLE_data_flags_set;
*swig_rotation_get = *LibreDWGc::Dwg_Entity_TABLE_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_Entity_TABLE_rotation_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_TABLE_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_TABLE_extrusion_set;
*swig_has_attribs_get = *LibreDWGc::Dwg_Entity_TABLE_has_attribs_get;
*swig_has_attribs_set = *LibreDWGc::Dwg_Entity_TABLE_has_attribs_set;
*swig_num_owned_get = *LibreDWGc::Dwg_Entity_TABLE_num_owned_get;
*swig_num_owned_set = *LibreDWGc::Dwg_Entity_TABLE_num_owned_set;
*swig_flag_for_table_value_get = *LibreDWGc::Dwg_Entity_TABLE_flag_for_table_value_get;
*swig_flag_for_table_value_set = *LibreDWGc::Dwg_Entity_TABLE_flag_for_table_value_set;
*swig_horiz_direction_get = *LibreDWGc::Dwg_Entity_TABLE_horiz_direction_get;
*swig_horiz_direction_set = *LibreDWGc::Dwg_Entity_TABLE_horiz_direction_set;
*swig_num_cols_get = *LibreDWGc::Dwg_Entity_TABLE_num_cols_get;
*swig_num_cols_set = *LibreDWGc::Dwg_Entity_TABLE_num_cols_set;
*swig_num_rows_get = *LibreDWGc::Dwg_Entity_TABLE_num_rows_get;
*swig_num_rows_set = *LibreDWGc::Dwg_Entity_TABLE_num_rows_set;
*swig_num_cells_get = *LibreDWGc::Dwg_Entity_TABLE_num_cells_get;
*swig_num_cells_set = *LibreDWGc::Dwg_Entity_TABLE_num_cells_set;
*swig_col_widths_get = *LibreDWGc::Dwg_Entity_TABLE_col_widths_get;
*swig_col_widths_set = *LibreDWGc::Dwg_Entity_TABLE_col_widths_set;
*swig_row_heights_get = *LibreDWGc::Dwg_Entity_TABLE_row_heights_get;
*swig_row_heights_set = *LibreDWGc::Dwg_Entity_TABLE_row_heights_set;
*swig_cells_get = *LibreDWGc::Dwg_Entity_TABLE_cells_get;
*swig_cells_set = *LibreDWGc::Dwg_Entity_TABLE_cells_set;
*swig_has_table_overrides_get = *LibreDWGc::Dwg_Entity_TABLE_has_table_overrides_get;
*swig_has_table_overrides_set = *LibreDWGc::Dwg_Entity_TABLE_has_table_overrides_set;
*swig_table_flag_override_get = *LibreDWGc::Dwg_Entity_TABLE_table_flag_override_get;
*swig_table_flag_override_set = *LibreDWGc::Dwg_Entity_TABLE_table_flag_override_set;
*swig_title_suppressed_get = *LibreDWGc::Dwg_Entity_TABLE_title_suppressed_get;
*swig_title_suppressed_set = *LibreDWGc::Dwg_Entity_TABLE_title_suppressed_set;
*swig_header_suppressed_get = *LibreDWGc::Dwg_Entity_TABLE_header_suppressed_get;
*swig_header_suppressed_set = *LibreDWGc::Dwg_Entity_TABLE_header_suppressed_set;
*swig_flow_direction_get = *LibreDWGc::Dwg_Entity_TABLE_flow_direction_get;
*swig_flow_direction_set = *LibreDWGc::Dwg_Entity_TABLE_flow_direction_set;
*swig_horiz_cell_margin_get = *LibreDWGc::Dwg_Entity_TABLE_horiz_cell_margin_get;
*swig_horiz_cell_margin_set = *LibreDWGc::Dwg_Entity_TABLE_horiz_cell_margin_set;
*swig_vert_cell_margin_get = *LibreDWGc::Dwg_Entity_TABLE_vert_cell_margin_get;
*swig_vert_cell_margin_set = *LibreDWGc::Dwg_Entity_TABLE_vert_cell_margin_set;
*swig_title_row_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_row_color_get;
*swig_title_row_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_row_color_set;
*swig_header_row_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_row_color_get;
*swig_header_row_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_row_color_set;
*swig_data_row_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_row_color_get;
*swig_data_row_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_row_color_set;
*swig_title_row_fill_none_get = *LibreDWGc::Dwg_Entity_TABLE_title_row_fill_none_get;
*swig_title_row_fill_none_set = *LibreDWGc::Dwg_Entity_TABLE_title_row_fill_none_set;
*swig_header_row_fill_none_get = *LibreDWGc::Dwg_Entity_TABLE_header_row_fill_none_get;
*swig_header_row_fill_none_set = *LibreDWGc::Dwg_Entity_TABLE_header_row_fill_none_set;
*swig_data_row_fill_none_get = *LibreDWGc::Dwg_Entity_TABLE_data_row_fill_none_get;
*swig_data_row_fill_none_set = *LibreDWGc::Dwg_Entity_TABLE_data_row_fill_none_set;
*swig_title_row_fill_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_row_fill_color_get;
*swig_title_row_fill_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_row_fill_color_set;
*swig_header_row_fill_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_row_fill_color_get;
*swig_header_row_fill_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_row_fill_color_set;
*swig_data_row_fill_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_row_fill_color_get;
*swig_data_row_fill_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_row_fill_color_set;
*swig_title_row_align_get = *LibreDWGc::Dwg_Entity_TABLE_title_row_align_get;
*swig_title_row_align_set = *LibreDWGc::Dwg_Entity_TABLE_title_row_align_set;
*swig_header_row_align_get = *LibreDWGc::Dwg_Entity_TABLE_header_row_align_get;
*swig_header_row_align_set = *LibreDWGc::Dwg_Entity_TABLE_header_row_align_set;
*swig_data_row_align_get = *LibreDWGc::Dwg_Entity_TABLE_data_row_align_get;
*swig_data_row_align_set = *LibreDWGc::Dwg_Entity_TABLE_data_row_align_set;
*swig_title_text_style_get = *LibreDWGc::Dwg_Entity_TABLE_title_text_style_get;
*swig_title_text_style_set = *LibreDWGc::Dwg_Entity_TABLE_title_text_style_set;
*swig_header_text_style_get = *LibreDWGc::Dwg_Entity_TABLE_header_text_style_get;
*swig_header_text_style_set = *LibreDWGc::Dwg_Entity_TABLE_header_text_style_set;
*swig_data_text_style_get = *LibreDWGc::Dwg_Entity_TABLE_data_text_style_get;
*swig_data_text_style_set = *LibreDWGc::Dwg_Entity_TABLE_data_text_style_set;
*swig_title_row_height_get = *LibreDWGc::Dwg_Entity_TABLE_title_row_height_get;
*swig_title_row_height_set = *LibreDWGc::Dwg_Entity_TABLE_title_row_height_set;
*swig_header_row_height_get = *LibreDWGc::Dwg_Entity_TABLE_header_row_height_get;
*swig_header_row_height_set = *LibreDWGc::Dwg_Entity_TABLE_header_row_height_set;
*swig_data_row_height_get = *LibreDWGc::Dwg_Entity_TABLE_data_row_height_get;
*swig_data_row_height_set = *LibreDWGc::Dwg_Entity_TABLE_data_row_height_set;
*swig_has_border_color_overrides_get = *LibreDWGc::Dwg_Entity_TABLE_has_border_color_overrides_get;
*swig_has_border_color_overrides_set = *LibreDWGc::Dwg_Entity_TABLE_has_border_color_overrides_set;
*swig_border_color_overrides_flag_get = *LibreDWGc::Dwg_Entity_TABLE_border_color_overrides_flag_get;
*swig_border_color_overrides_flag_set = *LibreDWGc::Dwg_Entity_TABLE_border_color_overrides_flag_set;
*swig_title_horiz_top_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_top_color_get;
*swig_title_horiz_top_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_top_color_set;
*swig_title_horiz_ins_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_ins_color_get;
*swig_title_horiz_ins_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_ins_color_set;
*swig_title_horiz_bottom_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_bottom_color_get;
*swig_title_horiz_bottom_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_bottom_color_set;
*swig_title_vert_left_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_left_color_get;
*swig_title_vert_left_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_left_color_set;
*swig_title_vert_ins_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_ins_color_get;
*swig_title_vert_ins_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_ins_color_set;
*swig_title_vert_right_color_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_right_color_get;
*swig_title_vert_right_color_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_right_color_set;
*swig_header_horiz_top_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_top_color_get;
*swig_header_horiz_top_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_top_color_set;
*swig_header_horiz_ins_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_ins_color_get;
*swig_header_horiz_ins_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_ins_color_set;
*swig_header_horiz_bottom_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_bottom_color_get;
*swig_header_horiz_bottom_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_bottom_color_set;
*swig_header_vert_left_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_left_color_get;
*swig_header_vert_left_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_left_color_set;
*swig_header_vert_ins_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_ins_color_get;
*swig_header_vert_ins_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_ins_color_set;
*swig_header_vert_right_color_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_right_color_get;
*swig_header_vert_right_color_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_right_color_set;
*swig_data_horiz_top_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_top_color_get;
*swig_data_horiz_top_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_top_color_set;
*swig_data_horiz_ins_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_ins_color_get;
*swig_data_horiz_ins_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_ins_color_set;
*swig_data_horiz_bottom_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_bottom_color_get;
*swig_data_horiz_bottom_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_bottom_color_set;
*swig_data_vert_left_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_left_color_get;
*swig_data_vert_left_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_left_color_set;
*swig_data_vert_ins_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_ins_color_get;
*swig_data_vert_ins_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_ins_color_set;
*swig_data_vert_right_color_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_right_color_get;
*swig_data_vert_right_color_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_right_color_set;
*swig_has_border_lineweight_overrides_get = *LibreDWGc::Dwg_Entity_TABLE_has_border_lineweight_overrides_get;
*swig_has_border_lineweight_overrides_set = *LibreDWGc::Dwg_Entity_TABLE_has_border_lineweight_overrides_set;
*swig_border_lineweight_overrides_flag_get = *LibreDWGc::Dwg_Entity_TABLE_border_lineweight_overrides_flag_get;
*swig_border_lineweight_overrides_flag_set = *LibreDWGc::Dwg_Entity_TABLE_border_lineweight_overrides_flag_set;
*swig_title_horiz_top_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_top_linewt_get;
*swig_title_horiz_top_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_top_linewt_set;
*swig_title_horiz_ins_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_ins_linewt_get;
*swig_title_horiz_ins_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_ins_linewt_set;
*swig_title_horiz_bottom_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_bottom_linewt_get;
*swig_title_horiz_bottom_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_bottom_linewt_set;
*swig_title_vert_left_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_left_linewt_get;
*swig_title_vert_left_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_left_linewt_set;
*swig_title_vert_ins_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_ins_linewt_get;
*swig_title_vert_ins_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_ins_linewt_set;
*swig_title_vert_right_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_right_linewt_get;
*swig_title_vert_right_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_right_linewt_set;
*swig_header_horiz_top_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_top_linewt_get;
*swig_header_horiz_top_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_top_linewt_set;
*swig_header_horiz_ins_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_ins_linewt_get;
*swig_header_horiz_ins_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_ins_linewt_set;
*swig_header_horiz_bottom_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_bottom_linewt_get;
*swig_header_horiz_bottom_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_bottom_linewt_set;
*swig_header_vert_left_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_left_linewt_get;
*swig_header_vert_left_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_left_linewt_set;
*swig_header_vert_ins_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_ins_linewt_get;
*swig_header_vert_ins_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_ins_linewt_set;
*swig_header_vert_right_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_right_linewt_get;
*swig_header_vert_right_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_right_linewt_set;
*swig_data_horiz_top_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_top_linewt_get;
*swig_data_horiz_top_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_top_linewt_set;
*swig_data_horiz_ins_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_ins_linewt_get;
*swig_data_horiz_ins_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_ins_linewt_set;
*swig_data_horiz_bottom_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_bottom_linewt_get;
*swig_data_horiz_bottom_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_bottom_linewt_set;
*swig_data_vert_left_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_left_linewt_get;
*swig_data_vert_left_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_left_linewt_set;
*swig_data_vert_ins_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_ins_linewt_get;
*swig_data_vert_ins_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_ins_linewt_set;
*swig_data_vert_right_linewt_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_right_linewt_get;
*swig_data_vert_right_linewt_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_right_linewt_set;
*swig_has_border_visibility_overrides_get = *LibreDWGc::Dwg_Entity_TABLE_has_border_visibility_overrides_get;
*swig_has_border_visibility_overrides_set = *LibreDWGc::Dwg_Entity_TABLE_has_border_visibility_overrides_set;
*swig_border_visibility_overrides_flag_get = *LibreDWGc::Dwg_Entity_TABLE_border_visibility_overrides_flag_get;
*swig_border_visibility_overrides_flag_set = *LibreDWGc::Dwg_Entity_TABLE_border_visibility_overrides_flag_set;
*swig_title_horiz_top_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_top_visibility_get;
*swig_title_horiz_top_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_top_visibility_set;
*swig_title_horiz_ins_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_ins_visibility_get;
*swig_title_horiz_ins_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_ins_visibility_set;
*swig_title_horiz_bottom_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_bottom_visibility_get;
*swig_title_horiz_bottom_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_title_horiz_bottom_visibility_set;
*swig_title_vert_left_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_left_visibility_get;
*swig_title_vert_left_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_left_visibility_set;
*swig_title_vert_ins_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_ins_visibility_get;
*swig_title_vert_ins_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_ins_visibility_set;
*swig_title_vert_right_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_title_vert_right_visibility_get;
*swig_title_vert_right_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_title_vert_right_visibility_set;
*swig_header_horiz_top_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_top_visibility_get;
*swig_header_horiz_top_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_top_visibility_set;
*swig_header_horiz_ins_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_ins_visibility_get;
*swig_header_horiz_ins_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_ins_visibility_set;
*swig_header_horiz_bottom_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_bottom_visibility_get;
*swig_header_horiz_bottom_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_header_horiz_bottom_visibility_set;
*swig_header_vert_left_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_left_visibility_get;
*swig_header_vert_left_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_left_visibility_set;
*swig_header_vert_ins_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_ins_visibility_get;
*swig_header_vert_ins_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_ins_visibility_set;
*swig_header_vert_right_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_header_vert_right_visibility_get;
*swig_header_vert_right_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_header_vert_right_visibility_set;
*swig_data_horiz_top_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_top_visibility_get;
*swig_data_horiz_top_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_top_visibility_set;
*swig_data_horiz_ins_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_ins_visibility_get;
*swig_data_horiz_ins_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_ins_visibility_set;
*swig_data_horiz_bottom_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_bottom_visibility_get;
*swig_data_horiz_bottom_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_data_horiz_bottom_visibility_set;
*swig_data_vert_left_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_left_visibility_get;
*swig_data_vert_left_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_left_visibility_set;
*swig_data_vert_ins_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_ins_visibility_get;
*swig_data_vert_ins_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_ins_visibility_set;
*swig_data_vert_right_visibility_get = *LibreDWGc::Dwg_Entity_TABLE_data_vert_right_visibility_get;
*swig_data_vert_right_visibility_set = *LibreDWGc::Dwg_Entity_TABLE_data_vert_right_visibility_set;
*swig_block_header_get = *LibreDWGc::Dwg_Entity_TABLE_block_header_get;
*swig_block_header_set = *LibreDWGc::Dwg_Entity_TABLE_block_header_set;
*swig_first_attrib_get = *LibreDWGc::Dwg_Entity_TABLE_first_attrib_get;
*swig_first_attrib_set = *LibreDWGc::Dwg_Entity_TABLE_first_attrib_set;
*swig_last_attrib_get = *LibreDWGc::Dwg_Entity_TABLE_last_attrib_get;
*swig_last_attrib_set = *LibreDWGc::Dwg_Entity_TABLE_last_attrib_set;
*swig_attribs_get = *LibreDWGc::Dwg_Entity_TABLE_attribs_get;
*swig_attribs_set = *LibreDWGc::Dwg_Entity_TABLE_attribs_set;
*swig_seqend_get = *LibreDWGc::Dwg_Entity_TABLE_seqend_get;
*swig_seqend_set = *LibreDWGc::Dwg_Entity_TABLE_seqend_set;
*swig_table_style_id_get = *LibreDWGc::Dwg_Entity_TABLE_table_style_id_get;
*swig_table_style_id_set = *LibreDWGc::Dwg_Entity_TABLE_table_style_id_set;
*swig_title_row_style_override_get = *LibreDWGc::Dwg_Entity_TABLE_title_row_style_override_get;
*swig_title_row_style_override_set = *LibreDWGc::Dwg_Entity_TABLE_title_row_style_override_set;
*swig_header_row_style_override_get = *LibreDWGc::Dwg_Entity_TABLE_header_row_style_override_get;
*swig_header_row_style_override_set = *LibreDWGc::Dwg_Entity_TABLE_header_row_style_override_set;
*swig_data_row_style_override_get = *LibreDWGc::Dwg_Entity_TABLE_data_row_style_override_get;
*swig_data_row_style_override_set = *LibreDWGc::Dwg_Entity_TABLE_data_row_style_override_set;
*swig_unknown_bs_get = *LibreDWGc::Dwg_Entity_TABLE_unknown_bs_get;
*swig_unknown_bs_set = *LibreDWGc::Dwg_Entity_TABLE_unknown_bs_set;
*swig_hor_dir_get = *LibreDWGc::Dwg_Entity_TABLE_hor_dir_get;
*swig_hor_dir_set = *LibreDWGc::Dwg_Entity_TABLE_hor_dir_set;
*swig_has_break_data_get = *LibreDWGc::Dwg_Entity_TABLE_has_break_data_get;
*swig_has_break_data_set = *LibreDWGc::Dwg_Entity_TABLE_has_break_data_set;
*swig_break_flag_get = *LibreDWGc::Dwg_Entity_TABLE_break_flag_get;
*swig_break_flag_set = *LibreDWGc::Dwg_Entity_TABLE_break_flag_set;
*swig_break_flow_direction_get = *LibreDWGc::Dwg_Entity_TABLE_break_flow_direction_get;
*swig_break_flow_direction_set = *LibreDWGc::Dwg_Entity_TABLE_break_flow_direction_set;
*swig_break_spacing_get = *LibreDWGc::Dwg_Entity_TABLE_break_spacing_get;
*swig_break_spacing_set = *LibreDWGc::Dwg_Entity_TABLE_break_spacing_set;
*swig_break_unknown1_get = *LibreDWGc::Dwg_Entity_TABLE_break_unknown1_get;
*swig_break_unknown1_set = *LibreDWGc::Dwg_Entity_TABLE_break_unknown1_set;
*swig_break_unknown2_get = *LibreDWGc::Dwg_Entity_TABLE_break_unknown2_get;
*swig_break_unknown2_set = *LibreDWGc::Dwg_Entity_TABLE_break_unknown2_set;
*swig_num_break_heights_get = *LibreDWGc::Dwg_Entity_TABLE_num_break_heights_get;
*swig_num_break_heights_set = *LibreDWGc::Dwg_Entity_TABLE_num_break_heights_set;
*swig_break_heights_get = *LibreDWGc::Dwg_Entity_TABLE_break_heights_get;
*swig_break_heights_set = *LibreDWGc::Dwg_Entity_TABLE_break_heights_set;
*swig_num_break_rows_get = *LibreDWGc::Dwg_Entity_TABLE_num_break_rows_get;
*swig_num_break_rows_set = *LibreDWGc::Dwg_Entity_TABLE_num_break_rows_set;
*swig_break_rows_get = *LibreDWGc::Dwg_Entity_TABLE_break_rows_get;
*swig_break_rows_set = *LibreDWGc::Dwg_Entity_TABLE_break_rows_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_TABLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_TABLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_LinkedData ##############

package LibreDWG::Dwg_LinkedData;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *LibreDWGc::Dwg_LinkedData_name_get;
*swig_name_set = *LibreDWGc::Dwg_LinkedData_name_set;
*swig_desc_get = *LibreDWGc::Dwg_LinkedData_desc_get;
*swig_desc_set = *LibreDWGc::Dwg_LinkedData_desc_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_LinkedData(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_LinkedData($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TableCellContent_Attr ##############

package LibreDWG::Dwg_TableCellContent_Attr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_attdef_get = *LibreDWGc::Dwg_TableCellContent_Attr_attdef_get;
*swig_attdef_set = *LibreDWGc::Dwg_TableCellContent_Attr_attdef_set;
*swig_value_get = *LibreDWGc::Dwg_TableCellContent_Attr_value_get;
*swig_value_set = *LibreDWGc::Dwg_TableCellContent_Attr_value_set;
*swig_index_get = *LibreDWGc::Dwg_TableCellContent_Attr_index_get;
*swig_index_set = *LibreDWGc::Dwg_TableCellContent_Attr_index_set;
*swig_parent_get = *LibreDWGc::Dwg_TableCellContent_Attr_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TableCellContent_Attr_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TableCellContent_Attr(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TableCellContent_Attr($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_ContentFormat ##############

package LibreDWG::Dwg_ContentFormat;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_property_override_flags_get = *LibreDWGc::Dwg_ContentFormat_property_override_flags_get;
*swig_property_override_flags_set = *LibreDWGc::Dwg_ContentFormat_property_override_flags_set;
*swig_property_flags_get = *LibreDWGc::Dwg_ContentFormat_property_flags_get;
*swig_property_flags_set = *LibreDWGc::Dwg_ContentFormat_property_flags_set;
*swig_value_data_type_get = *LibreDWGc::Dwg_ContentFormat_value_data_type_get;
*swig_value_data_type_set = *LibreDWGc::Dwg_ContentFormat_value_data_type_set;
*swig_value_unit_type_get = *LibreDWGc::Dwg_ContentFormat_value_unit_type_get;
*swig_value_unit_type_set = *LibreDWGc::Dwg_ContentFormat_value_unit_type_set;
*swig_value_format_string_get = *LibreDWGc::Dwg_ContentFormat_value_format_string_get;
*swig_value_format_string_set = *LibreDWGc::Dwg_ContentFormat_value_format_string_set;
*swig_rotation_get = *LibreDWGc::Dwg_ContentFormat_rotation_get;
*swig_rotation_set = *LibreDWGc::Dwg_ContentFormat_rotation_set;
*swig_block_scale_get = *LibreDWGc::Dwg_ContentFormat_block_scale_get;
*swig_block_scale_set = *LibreDWGc::Dwg_ContentFormat_block_scale_set;
*swig_cell_align_get = *LibreDWGc::Dwg_ContentFormat_cell_align_get;
*swig_cell_align_set = *LibreDWGc::Dwg_ContentFormat_cell_align_set;
*swig_content_color_get = *LibreDWGc::Dwg_ContentFormat_content_color_get;
*swig_content_color_set = *LibreDWGc::Dwg_ContentFormat_content_color_set;
*swig_text_style_get = *LibreDWGc::Dwg_ContentFormat_text_style_get;
*swig_text_style_set = *LibreDWGc::Dwg_ContentFormat_text_style_set;
*swig_text_height_get = *LibreDWGc::Dwg_ContentFormat_text_height_get;
*swig_text_height_set = *LibreDWGc::Dwg_ContentFormat_text_height_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_ContentFormat(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_ContentFormat($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TableCellContent ##############

package LibreDWG::Dwg_TableCellContent;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *LibreDWGc::Dwg_TableCellContent_type_get;
*swig_type_set = *LibreDWGc::Dwg_TableCellContent_type_set;
*swig_value_get = *LibreDWGc::Dwg_TableCellContent_value_get;
*swig_value_set = *LibreDWGc::Dwg_TableCellContent_value_set;
*swig_handle_get = *LibreDWGc::Dwg_TableCellContent_handle_get;
*swig_handle_set = *LibreDWGc::Dwg_TableCellContent_handle_set;
*swig_num_attrs_get = *LibreDWGc::Dwg_TableCellContent_num_attrs_get;
*swig_num_attrs_set = *LibreDWGc::Dwg_TableCellContent_num_attrs_set;
*swig_attrs_get = *LibreDWGc::Dwg_TableCellContent_attrs_get;
*swig_attrs_set = *LibreDWGc::Dwg_TableCellContent_attrs_set;
*swig_has_content_format_overrides_get = *LibreDWGc::Dwg_TableCellContent_has_content_format_overrides_get;
*swig_has_content_format_overrides_set = *LibreDWGc::Dwg_TableCellContent_has_content_format_overrides_set;
*swig_content_format_get = *LibreDWGc::Dwg_TableCellContent_content_format_get;
*swig_content_format_set = *LibreDWGc::Dwg_TableCellContent_content_format_set;
*swig_parent_get = *LibreDWGc::Dwg_TableCellContent_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TableCellContent_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TableCellContent(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TableCellContent($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_CellContentGeometry ##############

package LibreDWG::Dwg_CellContentGeometry;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_dist_top_left_get = *LibreDWGc::Dwg_CellContentGeometry_dist_top_left_get;
*swig_dist_top_left_set = *LibreDWGc::Dwg_CellContentGeometry_dist_top_left_set;
*swig_dist_center_get = *LibreDWGc::Dwg_CellContentGeometry_dist_center_get;
*swig_dist_center_set = *LibreDWGc::Dwg_CellContentGeometry_dist_center_set;
*swig_content_width_get = *LibreDWGc::Dwg_CellContentGeometry_content_width_get;
*swig_content_width_set = *LibreDWGc::Dwg_CellContentGeometry_content_width_set;
*swig_content_height_get = *LibreDWGc::Dwg_CellContentGeometry_content_height_get;
*swig_content_height_set = *LibreDWGc::Dwg_CellContentGeometry_content_height_set;
*swig_width_get = *LibreDWGc::Dwg_CellContentGeometry_width_get;
*swig_width_set = *LibreDWGc::Dwg_CellContentGeometry_width_set;
*swig_height_get = *LibreDWGc::Dwg_CellContentGeometry_height_get;
*swig_height_set = *LibreDWGc::Dwg_CellContentGeometry_height_set;
*swig_unknown_get = *LibreDWGc::Dwg_CellContentGeometry_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_CellContentGeometry_unknown_set;
*swig_cell_parent_get = *LibreDWGc::Dwg_CellContentGeometry_cell_parent_get;
*swig_cell_parent_set = *LibreDWGc::Dwg_CellContentGeometry_cell_parent_set;
*swig_geom_parent_get = *LibreDWGc::Dwg_CellContentGeometry_geom_parent_get;
*swig_geom_parent_set = *LibreDWGc::Dwg_CellContentGeometry_geom_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_CellContentGeometry(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_CellContentGeometry($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TableCell ##############

package LibreDWG::Dwg_TableCell;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_flag_get = *LibreDWGc::Dwg_TableCell_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_TableCell_flag_set;
*swig_tooltip_get = *LibreDWGc::Dwg_TableCell_tooltip_get;
*swig_tooltip_set = *LibreDWGc::Dwg_TableCell_tooltip_set;
*swig_customdata_get = *LibreDWGc::Dwg_TableCell_customdata_get;
*swig_customdata_set = *LibreDWGc::Dwg_TableCell_customdata_set;
*swig_num_customdata_items_get = *LibreDWGc::Dwg_TableCell_num_customdata_items_get;
*swig_num_customdata_items_set = *LibreDWGc::Dwg_TableCell_num_customdata_items_set;
*swig_customdata_items_get = *LibreDWGc::Dwg_TableCell_customdata_items_get;
*swig_customdata_items_set = *LibreDWGc::Dwg_TableCell_customdata_items_set;
*swig_has_linked_data_get = *LibreDWGc::Dwg_TableCell_has_linked_data_get;
*swig_has_linked_data_set = *LibreDWGc::Dwg_TableCell_has_linked_data_set;
*swig_data_link_get = *LibreDWGc::Dwg_TableCell_data_link_get;
*swig_data_link_set = *LibreDWGc::Dwg_TableCell_data_link_set;
*swig_num_rows_get = *LibreDWGc::Dwg_TableCell_num_rows_get;
*swig_num_rows_set = *LibreDWGc::Dwg_TableCell_num_rows_set;
*swig_num_cols_get = *LibreDWGc::Dwg_TableCell_num_cols_get;
*swig_num_cols_set = *LibreDWGc::Dwg_TableCell_num_cols_set;
*swig_unknown_get = *LibreDWGc::Dwg_TableCell_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_TableCell_unknown_set;
*swig_num_cell_contents_get = *LibreDWGc::Dwg_TableCell_num_cell_contents_get;
*swig_num_cell_contents_set = *LibreDWGc::Dwg_TableCell_num_cell_contents_set;
*swig_cell_contents_get = *LibreDWGc::Dwg_TableCell_cell_contents_get;
*swig_cell_contents_set = *LibreDWGc::Dwg_TableCell_cell_contents_set;
*swig_style_id_get = *LibreDWGc::Dwg_TableCell_style_id_get;
*swig_style_id_set = *LibreDWGc::Dwg_TableCell_style_id_set;
*swig_has_geom_data_get = *LibreDWGc::Dwg_TableCell_has_geom_data_get;
*swig_has_geom_data_set = *LibreDWGc::Dwg_TableCell_has_geom_data_set;
*swig_geom_data_flag_get = *LibreDWGc::Dwg_TableCell_geom_data_flag_get;
*swig_geom_data_flag_set = *LibreDWGc::Dwg_TableCell_geom_data_flag_set;
*swig_unknown_d40_get = *LibreDWGc::Dwg_TableCell_unknown_d40_get;
*swig_unknown_d40_set = *LibreDWGc::Dwg_TableCell_unknown_d40_set;
*swig_unknown_d41_get = *LibreDWGc::Dwg_TableCell_unknown_d41_get;
*swig_unknown_d41_set = *LibreDWGc::Dwg_TableCell_unknown_d41_set;
*swig_has_cell_geom_get = *LibreDWGc::Dwg_TableCell_has_cell_geom_get;
*swig_has_cell_geom_set = *LibreDWGc::Dwg_TableCell_has_cell_geom_set;
*swig_cell_geom_handle_get = *LibreDWGc::Dwg_TableCell_cell_geom_handle_get;
*swig_cell_geom_handle_set = *LibreDWGc::Dwg_TableCell_cell_geom_handle_set;
*swig_geom_data_get = *LibreDWGc::Dwg_TableCell_geom_data_get;
*swig_geom_data_set = *LibreDWGc::Dwg_TableCell_geom_data_set;
*swig_style_parent_get = *LibreDWGc::Dwg_TableCell_style_parent_get;
*swig_style_parent_set = *LibreDWGc::Dwg_TableCell_style_parent_set;
*swig_row_parent_get = *LibreDWGc::Dwg_TableCell_row_parent_get;
*swig_row_parent_set = *LibreDWGc::Dwg_TableCell_row_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TableCell(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TableCell($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_BorderStyle ##############

package LibreDWG::Dwg_BorderStyle;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_edge_flags_get = *LibreDWGc::Dwg_BorderStyle_edge_flags_get;
*swig_edge_flags_set = *LibreDWGc::Dwg_BorderStyle_edge_flags_set;
*swig_border_property_overrides_flag_get = *LibreDWGc::Dwg_BorderStyle_border_property_overrides_flag_get;
*swig_border_property_overrides_flag_set = *LibreDWGc::Dwg_BorderStyle_border_property_overrides_flag_set;
*swig_border_type_get = *LibreDWGc::Dwg_BorderStyle_border_type_get;
*swig_border_type_set = *LibreDWGc::Dwg_BorderStyle_border_type_set;
*swig_color_get = *LibreDWGc::Dwg_BorderStyle_color_get;
*swig_color_set = *LibreDWGc::Dwg_BorderStyle_color_set;
*swig_linewt_get = *LibreDWGc::Dwg_BorderStyle_linewt_get;
*swig_linewt_set = *LibreDWGc::Dwg_BorderStyle_linewt_set;
*swig_line_type_get = *LibreDWGc::Dwg_BorderStyle_line_type_get;
*swig_line_type_set = *LibreDWGc::Dwg_BorderStyle_line_type_set;
*swig_invisible_get = *LibreDWGc::Dwg_BorderStyle_invisible_get;
*swig_invisible_set = *LibreDWGc::Dwg_BorderStyle_invisible_set;
*swig_double_line_spacing_get = *LibreDWGc::Dwg_BorderStyle_double_line_spacing_get;
*swig_double_line_spacing_set = *LibreDWGc::Dwg_BorderStyle_double_line_spacing_set;
*swig_parent_get = *LibreDWGc::Dwg_BorderStyle_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_BorderStyle_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_BorderStyle(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_BorderStyle($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_CellStyle ##############

package LibreDWG::Dwg_CellStyle;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *LibreDWGc::Dwg_CellStyle_type_get;
*swig_type_set = *LibreDWGc::Dwg_CellStyle_type_set;
*swig_data_flags_get = *LibreDWGc::Dwg_CellStyle_data_flags_get;
*swig_data_flags_set = *LibreDWGc::Dwg_CellStyle_data_flags_set;
*swig_property_override_flags_get = *LibreDWGc::Dwg_CellStyle_property_override_flags_get;
*swig_property_override_flags_set = *LibreDWGc::Dwg_CellStyle_property_override_flags_set;
*swig_merge_flags_get = *LibreDWGc::Dwg_CellStyle_merge_flags_get;
*swig_merge_flags_set = *LibreDWGc::Dwg_CellStyle_merge_flags_set;
*swig_background_color_get = *LibreDWGc::Dwg_CellStyle_background_color_get;
*swig_background_color_set = *LibreDWGc::Dwg_CellStyle_background_color_set;
*swig_content_layout_get = *LibreDWGc::Dwg_CellStyle_content_layout_get;
*swig_content_layout_set = *LibreDWGc::Dwg_CellStyle_content_layout_set;
*swig_content_format_get = *LibreDWGc::Dwg_CellStyle_content_format_get;
*swig_content_format_set = *LibreDWGc::Dwg_CellStyle_content_format_set;
*swig_margin_override_flags_get = *LibreDWGc::Dwg_CellStyle_margin_override_flags_get;
*swig_margin_override_flags_set = *LibreDWGc::Dwg_CellStyle_margin_override_flags_set;
*swig_vert_margin_get = *LibreDWGc::Dwg_CellStyle_vert_margin_get;
*swig_vert_margin_set = *LibreDWGc::Dwg_CellStyle_vert_margin_set;
*swig_horiz_margin_get = *LibreDWGc::Dwg_CellStyle_horiz_margin_get;
*swig_horiz_margin_set = *LibreDWGc::Dwg_CellStyle_horiz_margin_set;
*swig_bottom_margin_get = *LibreDWGc::Dwg_CellStyle_bottom_margin_get;
*swig_bottom_margin_set = *LibreDWGc::Dwg_CellStyle_bottom_margin_set;
*swig_right_margin_get = *LibreDWGc::Dwg_CellStyle_right_margin_get;
*swig_right_margin_set = *LibreDWGc::Dwg_CellStyle_right_margin_set;
*swig_margin_horiz_spacing_get = *LibreDWGc::Dwg_CellStyle_margin_horiz_spacing_get;
*swig_margin_horiz_spacing_set = *LibreDWGc::Dwg_CellStyle_margin_horiz_spacing_set;
*swig_margin_vert_spacing_get = *LibreDWGc::Dwg_CellStyle_margin_vert_spacing_get;
*swig_margin_vert_spacing_set = *LibreDWGc::Dwg_CellStyle_margin_vert_spacing_set;
*swig_num_borders_get = *LibreDWGc::Dwg_CellStyle_num_borders_get;
*swig_num_borders_set = *LibreDWGc::Dwg_CellStyle_num_borders_set;
*swig_border_get = *LibreDWGc::Dwg_CellStyle_border_get;
*swig_border_set = *LibreDWGc::Dwg_CellStyle_border_set;
*swig_tablerow_parent_get = *LibreDWGc::Dwg_CellStyle_tablerow_parent_get;
*swig_tablerow_parent_set = *LibreDWGc::Dwg_CellStyle_tablerow_parent_set;
*swig_tabledatacolumn_parent_get = *LibreDWGc::Dwg_CellStyle_tabledatacolumn_parent_get;
*swig_tabledatacolumn_parent_set = *LibreDWGc::Dwg_CellStyle_tabledatacolumn_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_CellStyle(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_CellStyle($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TableRow ##############

package LibreDWG::Dwg_TableRow;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_num_cells_get = *LibreDWGc::Dwg_TableRow_num_cells_get;
*swig_num_cells_set = *LibreDWGc::Dwg_TableRow_num_cells_set;
*swig_cells_get = *LibreDWGc::Dwg_TableRow_cells_get;
*swig_cells_set = *LibreDWGc::Dwg_TableRow_cells_set;
*swig_custom_data_get = *LibreDWGc::Dwg_TableRow_custom_data_get;
*swig_custom_data_set = *LibreDWGc::Dwg_TableRow_custom_data_set;
*swig_num_customdata_items_get = *LibreDWGc::Dwg_TableRow_num_customdata_items_get;
*swig_num_customdata_items_set = *LibreDWGc::Dwg_TableRow_num_customdata_items_set;
*swig_customdata_items_get = *LibreDWGc::Dwg_TableRow_customdata_items_get;
*swig_customdata_items_set = *LibreDWGc::Dwg_TableRow_customdata_items_set;
*swig_cell_style_get = *LibreDWGc::Dwg_TableRow_cell_style_get;
*swig_cell_style_set = *LibreDWGc::Dwg_TableRow_cell_style_set;
*swig_style_id_get = *LibreDWGc::Dwg_TableRow_style_id_get;
*swig_style_id_set = *LibreDWGc::Dwg_TableRow_style_id_set;
*swig_height_get = *LibreDWGc::Dwg_TableRow_height_get;
*swig_height_set = *LibreDWGc::Dwg_TableRow_height_set;
*swig_parent_get = *LibreDWGc::Dwg_TableRow_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TableRow_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TableRow(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TableRow($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TableDataColumn ##############

package LibreDWG::Dwg_TableDataColumn;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *LibreDWGc::Dwg_TableDataColumn_name_get;
*swig_name_set = *LibreDWGc::Dwg_TableDataColumn_name_set;
*swig_custom_data_get = *LibreDWGc::Dwg_TableDataColumn_custom_data_get;
*swig_custom_data_set = *LibreDWGc::Dwg_TableDataColumn_custom_data_set;
*swig_cell_style_get = *LibreDWGc::Dwg_TableDataColumn_cell_style_get;
*swig_cell_style_set = *LibreDWGc::Dwg_TableDataColumn_cell_style_set;
*swig_cell_style_id_get = *LibreDWGc::Dwg_TableDataColumn_cell_style_id_get;
*swig_cell_style_id_set = *LibreDWGc::Dwg_TableDataColumn_cell_style_id_set;
*swig_width_get = *LibreDWGc::Dwg_TableDataColumn_width_get;
*swig_width_set = *LibreDWGc::Dwg_TableDataColumn_width_set;
*swig_parent_get = *LibreDWGc::Dwg_TableDataColumn_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TableDataColumn_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TableDataColumn(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TableDataColumn($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_LinkedTableData ##############

package LibreDWG::Dwg_LinkedTableData;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_num_cols_get = *LibreDWGc::Dwg_LinkedTableData_num_cols_get;
*swig_num_cols_set = *LibreDWGc::Dwg_LinkedTableData_num_cols_set;
*swig_cols_get = *LibreDWGc::Dwg_LinkedTableData_cols_get;
*swig_cols_set = *LibreDWGc::Dwg_LinkedTableData_cols_set;
*swig_num_rows_get = *LibreDWGc::Dwg_LinkedTableData_num_rows_get;
*swig_num_rows_set = *LibreDWGc::Dwg_LinkedTableData_num_rows_set;
*swig_rows_get = *LibreDWGc::Dwg_LinkedTableData_rows_get;
*swig_rows_set = *LibreDWGc::Dwg_LinkedTableData_rows_set;
*swig_num_field_refs_get = *LibreDWGc::Dwg_LinkedTableData_num_field_refs_get;
*swig_num_field_refs_set = *LibreDWGc::Dwg_LinkedTableData_num_field_refs_set;
*swig_field_refs_get = *LibreDWGc::Dwg_LinkedTableData_field_refs_get;
*swig_field_refs_set = *LibreDWGc::Dwg_LinkedTableData_field_refs_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_LinkedTableData(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_LinkedTableData($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_FormattedTableMerged ##############

package LibreDWG::Dwg_FormattedTableMerged;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_top_row_get = *LibreDWGc::Dwg_FormattedTableMerged_top_row_get;
*swig_top_row_set = *LibreDWGc::Dwg_FormattedTableMerged_top_row_set;
*swig_left_col_get = *LibreDWGc::Dwg_FormattedTableMerged_left_col_get;
*swig_left_col_set = *LibreDWGc::Dwg_FormattedTableMerged_left_col_set;
*swig_bottom_row_get = *LibreDWGc::Dwg_FormattedTableMerged_bottom_row_get;
*swig_bottom_row_set = *LibreDWGc::Dwg_FormattedTableMerged_bottom_row_set;
*swig_right_col_get = *LibreDWGc::Dwg_FormattedTableMerged_right_col_get;
*swig_right_col_set = *LibreDWGc::Dwg_FormattedTableMerged_right_col_set;
*swig_parent_get = *LibreDWGc::Dwg_FormattedTableMerged_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_FormattedTableMerged_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_FormattedTableMerged(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_FormattedTableMerged($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_FormattedTableData ##############

package LibreDWG::Dwg_FormattedTableData;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_cell_style_get = *LibreDWGc::Dwg_FormattedTableData_cell_style_get;
*swig_cell_style_set = *LibreDWGc::Dwg_FormattedTableData_cell_style_set;
*swig_num_merged_cells_get = *LibreDWGc::Dwg_FormattedTableData_num_merged_cells_get;
*swig_num_merged_cells_set = *LibreDWGc::Dwg_FormattedTableData_num_merged_cells_set;
*swig_merged_cells_get = *LibreDWGc::Dwg_FormattedTableData_merged_cells_get;
*swig_merged_cells_set = *LibreDWGc::Dwg_FormattedTableData_merged_cells_set;
*swig_parent_get = *LibreDWGc::Dwg_FormattedTableData_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_FormattedTableData_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_FormattedTableData(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_FormattedTableData($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_TABLECONTENT ##############

package LibreDWG::Dwg_Object_TABLECONTENT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_TABLECONTENT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_TABLECONTENT_parent_set;
*swig_ldata_get = *LibreDWGc::Dwg_Object_TABLECONTENT_ldata_get;
*swig_ldata_set = *LibreDWGc::Dwg_Object_TABLECONTENT_ldata_set;
*swig_tdata_get = *LibreDWGc::Dwg_Object_TABLECONTENT_tdata_get;
*swig_tdata_set = *LibreDWGc::Dwg_Object_TABLECONTENT_tdata_set;
*swig_fdata_get = *LibreDWGc::Dwg_Object_TABLECONTENT_fdata_get;
*swig_fdata_set = *LibreDWGc::Dwg_Object_TABLECONTENT_fdata_set;
*swig_table_style_get = *LibreDWGc::Dwg_Object_TABLECONTENT_table_style_get;
*swig_table_style_set = *LibreDWGc::Dwg_Object_TABLECONTENT_table_style_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_TABLECONTENT_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_TABLECONTENT_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_TABLECONTENT_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_TABLECONTENT_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_TABLECONTENT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_TABLECONTENT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TABLESTYLE_Cell ##############

package LibreDWG::Dwg_TABLESTYLE_Cell;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_cell_get = *LibreDWGc::Dwg_TABLESTYLE_Cell_cell_get;
*swig_cell_set = *LibreDWGc::Dwg_TABLESTYLE_Cell_cell_set;
*swig_id_get = *LibreDWGc::Dwg_TABLESTYLE_Cell_id_get;
*swig_id_set = *LibreDWGc::Dwg_TABLESTYLE_Cell_id_set;
*swig_type_get = *LibreDWGc::Dwg_TABLESTYLE_Cell_type_get;
*swig_type_set = *LibreDWGc::Dwg_TABLESTYLE_Cell_type_set;
*swig_name_get = *LibreDWGc::Dwg_TABLESTYLE_Cell_name_get;
*swig_name_set = *LibreDWGc::Dwg_TABLESTYLE_Cell_name_set;
*swig_parent_get = *LibreDWGc::Dwg_TABLESTYLE_Cell_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TABLESTYLE_Cell_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TABLESTYLE_Cell(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TABLESTYLE_Cell($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_TABLESTYLE ##############

package LibreDWG::Dwg_Object_TABLESTYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_TABLESTYLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_TABLESTYLE_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_TABLESTYLE_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_TABLESTYLE_class_version_set;
*swig_name_get = *LibreDWGc::Dwg_Object_TABLESTYLE_name_get;
*swig_name_set = *LibreDWGc::Dwg_Object_TABLESTYLE_name_set;
*swig_flags_get = *LibreDWGc::Dwg_Object_TABLESTYLE_flags_get;
*swig_flags_set = *LibreDWGc::Dwg_Object_TABLESTYLE_flags_set;
*swig_title_suppressed_get = *LibreDWGc::Dwg_Object_TABLESTYLE_title_suppressed_get;
*swig_title_suppressed_set = *LibreDWGc::Dwg_Object_TABLESTYLE_title_suppressed_set;
*swig_header_suppressed_get = *LibreDWGc::Dwg_Object_TABLESTYLE_header_suppressed_get;
*swig_header_suppressed_set = *LibreDWGc::Dwg_Object_TABLESTYLE_header_suppressed_set;
*swig_flow_direction_get = *LibreDWGc::Dwg_Object_TABLESTYLE_flow_direction_get;
*swig_flow_direction_set = *LibreDWGc::Dwg_Object_TABLESTYLE_flow_direction_set;
*swig_horiz_cell_margin_get = *LibreDWGc::Dwg_Object_TABLESTYLE_horiz_cell_margin_get;
*swig_horiz_cell_margin_set = *LibreDWGc::Dwg_Object_TABLESTYLE_horiz_cell_margin_set;
*swig_vert_cell_margin_get = *LibreDWGc::Dwg_Object_TABLESTYLE_vert_cell_margin_get;
*swig_vert_cell_margin_set = *LibreDWGc::Dwg_Object_TABLESTYLE_vert_cell_margin_set;
*swig_num_cells_get = *LibreDWGc::Dwg_Object_TABLESTYLE_num_cells_get;
*swig_num_cells_set = *LibreDWGc::Dwg_Object_TABLESTYLE_num_cells_set;
*swig_cells_get = *LibreDWGc::Dwg_Object_TABLESTYLE_cells_get;
*swig_cells_set = *LibreDWGc::Dwg_Object_TABLESTYLE_cells_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_TABLESTYLE_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_TABLESTYLE_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_TABLESTYLE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_TABLESTYLE_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_TABLESTYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_TABLESTYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_CELLSTYLEMAP_Cell ##############

package LibreDWG::Dwg_CELLSTYLEMAP_Cell;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_style_get = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_style_get;
*swig_style_set = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_style_set;
*swig_id_get = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_id_get;
*swig_id_set = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_id_set;
*swig_type_get = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_type_get;
*swig_type_set = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_type_set;
*swig_name_get = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_name_get;
*swig_name_set = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_name_set;
*swig_parent_get = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_CELLSTYLEMAP_Cell_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_CELLSTYLEMAP_Cell(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_CELLSTYLEMAP_Cell($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_CELLSTYLEMAP ##############

package LibreDWG::Dwg_Object_CELLSTYLEMAP;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_parent_set;
*swig_num_cells_get = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_num_cells_get;
*swig_num_cells_set = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_num_cells_set;
*swig_cells_get = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_cells_get;
*swig_cells_set = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_cells_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_CELLSTYLEMAP_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_CELLSTYLEMAP(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_CELLSTYLEMAP($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_TABLEGEOMETRY_Cell ##############

package LibreDWG::Dwg_TABLEGEOMETRY_Cell;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_flag_get = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_flag_set;
*swig_width_w_gap_get = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_width_w_gap_get;
*swig_width_w_gap_set = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_width_w_gap_set;
*swig_height_w_gap_get = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_height_w_gap_get;
*swig_height_w_gap_set = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_height_w_gap_set;
*swig_unknown_get = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_unknown_set;
*swig_num_geom_data_get = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_num_geom_data_get;
*swig_num_geom_data_set = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_num_geom_data_set;
*swig_geom_data_get = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_geom_data_get;
*swig_geom_data_set = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_geom_data_set;
*swig_parent_get = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_TABLEGEOMETRY_Cell_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_TABLEGEOMETRY_Cell(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_TABLEGEOMETRY_Cell($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_TABLEGEOMETRY ##############

package LibreDWG::Dwg_Object_TABLEGEOMETRY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_num_rows_get = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_num_rows_get;
*swig_num_rows_set = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_num_rows_set;
*swig_num_cols_get = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_num_cols_get;
*swig_num_cols_set = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_num_cols_set;
*swig_num_cells_get = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_num_cells_get;
*swig_num_cells_set = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_num_cells_set;
*swig_cells_get = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_cells_get;
*swig_cells_set = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_cells_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_xdicobjhandle_set;
*swig_parent_get = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_TABLEGEOMETRY_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_TABLEGEOMETRY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_TABLEGEOMETRY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_UNDERLAYDEFINITION ##############

package LibreDWG::Dwg_Object_UNDERLAYDEFINITION;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_parent_set;
*swig_filename_get = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_filename_get;
*swig_filename_set = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_filename_set;
*swig_name_get = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_name_get;
*swig_name_set = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_name_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_UNDERLAYDEFINITION_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_UNDERLAYDEFINITION(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_UNDERLAYDEFINITION($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DBCOLOR ##############

package LibreDWG::Dwg_Object_DBCOLOR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DBCOLOR_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DBCOLOR_parent_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_DBCOLOR_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_DBCOLOR_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_DBCOLOR_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_DBCOLOR_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DBCOLOR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DBCOLOR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DICTIONARYVAR ##############

package LibreDWG::Dwg_Object_DICTIONARYVAR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DICTIONARYVAR_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DICTIONARYVAR_parent_set;
*swig_intval_get = *LibreDWGc::Dwg_Object_DICTIONARYVAR_intval_get;
*swig_intval_set = *LibreDWGc::Dwg_Object_DICTIONARYVAR_intval_set;
*swig_str_get = *LibreDWGc::Dwg_Object_DICTIONARYVAR_str_get;
*swig_str_set = *LibreDWGc::Dwg_Object_DICTIONARYVAR_str_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_DICTIONARYVAR_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_DICTIONARYVAR_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DICTIONARYVAR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DICTIONARYVAR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DICTIONARYWDFLT ##############

package LibreDWG::Dwg_Object_DICTIONARYWDFLT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_parent_set;
*swig_numitems_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_numitems_get;
*swig_numitems_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_numitems_set;
*swig_cloning_rl_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_cloning_rl_get;
*swig_cloning_rl_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_cloning_rl_set;
*swig_cloning_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_cloning_get;
*swig_cloning_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_cloning_set;
*swig_hard_owner_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_hard_owner_get;
*swig_hard_owner_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_hard_owner_set;
*swig_text_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_text_get;
*swig_text_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_text_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_parenthandle_set;
*swig_itemhandles_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_itemhandles_get;
*swig_itemhandles_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_itemhandles_set;
*swig_defaultid_get = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_defaultid_get;
*swig_defaultid_set = *LibreDWGc::Dwg_Object_DICTIONARYWDFLT_defaultid_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DICTIONARYWDFLT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DICTIONARYWDFLT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_FIELD_ChildValue ##############

package LibreDWG::Dwg_FIELD_ChildValue;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_key_get = *LibreDWGc::Dwg_FIELD_ChildValue_key_get;
*swig_key_set = *LibreDWGc::Dwg_FIELD_ChildValue_key_set;
*swig_value_get = *LibreDWGc::Dwg_FIELD_ChildValue_value_get;
*swig_value_set = *LibreDWGc::Dwg_FIELD_ChildValue_value_set;
*swig_parent_get = *LibreDWGc::Dwg_FIELD_ChildValue_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_FIELD_ChildValue_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_FIELD_ChildValue(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_FIELD_ChildValue($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_FIELD ##############

package LibreDWG::Dwg_Object_FIELD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_FIELD_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_FIELD_parent_set;
*swig_id_get = *LibreDWGc::Dwg_Object_FIELD_id_get;
*swig_id_set = *LibreDWGc::Dwg_Object_FIELD_id_set;
*swig_code_get = *LibreDWGc::Dwg_Object_FIELD_code_get;
*swig_code_set = *LibreDWGc::Dwg_Object_FIELD_code_set;
*swig_num_childs_get = *LibreDWGc::Dwg_Object_FIELD_num_childs_get;
*swig_num_childs_set = *LibreDWGc::Dwg_Object_FIELD_num_childs_set;
*swig_childs_get = *LibreDWGc::Dwg_Object_FIELD_childs_get;
*swig_childs_set = *LibreDWGc::Dwg_Object_FIELD_childs_set;
*swig_num_objects_get = *LibreDWGc::Dwg_Object_FIELD_num_objects_get;
*swig_num_objects_set = *LibreDWGc::Dwg_Object_FIELD_num_objects_set;
*swig_objects_get = *LibreDWGc::Dwg_Object_FIELD_objects_get;
*swig_objects_set = *LibreDWGc::Dwg_Object_FIELD_objects_set;
*swig_format_get = *LibreDWGc::Dwg_Object_FIELD_format_get;
*swig_format_set = *LibreDWGc::Dwg_Object_FIELD_format_set;
*swig_evaluation_option_get = *LibreDWGc::Dwg_Object_FIELD_evaluation_option_get;
*swig_evaluation_option_set = *LibreDWGc::Dwg_Object_FIELD_evaluation_option_set;
*swig_filing_option_get = *LibreDWGc::Dwg_Object_FIELD_filing_option_get;
*swig_filing_option_set = *LibreDWGc::Dwg_Object_FIELD_filing_option_set;
*swig_field_state_get = *LibreDWGc::Dwg_Object_FIELD_field_state_get;
*swig_field_state_set = *LibreDWGc::Dwg_Object_FIELD_field_state_set;
*swig_evaluation_status_get = *LibreDWGc::Dwg_Object_FIELD_evaluation_status_get;
*swig_evaluation_status_set = *LibreDWGc::Dwg_Object_FIELD_evaluation_status_set;
*swig_evaluation_error_code_get = *LibreDWGc::Dwg_Object_FIELD_evaluation_error_code_get;
*swig_evaluation_error_code_set = *LibreDWGc::Dwg_Object_FIELD_evaluation_error_code_set;
*swig_evaluation_error_msg_get = *LibreDWGc::Dwg_Object_FIELD_evaluation_error_msg_get;
*swig_evaluation_error_msg_set = *LibreDWGc::Dwg_Object_FIELD_evaluation_error_msg_set;
*swig_value_get = *LibreDWGc::Dwg_Object_FIELD_value_get;
*swig_value_set = *LibreDWGc::Dwg_Object_FIELD_value_set;
*swig_value_string_get = *LibreDWGc::Dwg_Object_FIELD_value_string_get;
*swig_value_string_set = *LibreDWGc::Dwg_Object_FIELD_value_string_set;
*swig_value_string_length_get = *LibreDWGc::Dwg_Object_FIELD_value_string_length_get;
*swig_value_string_length_set = *LibreDWGc::Dwg_Object_FIELD_value_string_length_set;
*swig_num_childval_get = *LibreDWGc::Dwg_Object_FIELD_num_childval_get;
*swig_num_childval_set = *LibreDWGc::Dwg_Object_FIELD_num_childval_set;
*swig_childval_get = *LibreDWGc::Dwg_Object_FIELD_childval_get;
*swig_childval_set = *LibreDWGc::Dwg_Object_FIELD_childval_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_FIELD_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_FIELD_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_FIELD_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_FIELD_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_FIELD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_FIELD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_FIELDLIST ##############

package LibreDWG::Dwg_Object_FIELDLIST;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_FIELDLIST_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_FIELDLIST_parent_set;
*swig_num_fields_get = *LibreDWGc::Dwg_Object_FIELDLIST_num_fields_get;
*swig_num_fields_set = *LibreDWGc::Dwg_Object_FIELDLIST_num_fields_set;
*swig_unknown_get = *LibreDWGc::Dwg_Object_FIELDLIST_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Object_FIELDLIST_unknown_set;
*swig_field_handles_get = *LibreDWGc::Dwg_Object_FIELDLIST_field_handles_get;
*swig_field_handles_set = *LibreDWGc::Dwg_Object_FIELDLIST_field_handles_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_FIELDLIST_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_FIELDLIST_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_FIELDLIST_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_FIELDLIST_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_FIELDLIST(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_FIELDLIST($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_GEODATA_meshpt ##############

package LibreDWG::Dwg_GEODATA_meshpt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_source_pt_get = *LibreDWGc::Dwg_GEODATA_meshpt_source_pt_get;
*swig_source_pt_set = *LibreDWGc::Dwg_GEODATA_meshpt_source_pt_set;
*swig_dest_pt_get = *LibreDWGc::Dwg_GEODATA_meshpt_dest_pt_get;
*swig_dest_pt_set = *LibreDWGc::Dwg_GEODATA_meshpt_dest_pt_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_GEODATA_meshpt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_GEODATA_meshpt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_GEODATA_meshface ##############

package LibreDWG::Dwg_GEODATA_meshface;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_face1_get = *LibreDWGc::Dwg_GEODATA_meshface_face1_get;
*swig_face1_set = *LibreDWGc::Dwg_GEODATA_meshface_face1_set;
*swig_face2_get = *LibreDWGc::Dwg_GEODATA_meshface_face2_get;
*swig_face2_set = *LibreDWGc::Dwg_GEODATA_meshface_face2_set;
*swig_face3_get = *LibreDWGc::Dwg_GEODATA_meshface_face3_get;
*swig_face3_set = *LibreDWGc::Dwg_GEODATA_meshface_face3_set;
*swig_face4_get = *LibreDWGc::Dwg_GEODATA_meshface_face4_get;
*swig_face4_set = *LibreDWGc::Dwg_GEODATA_meshface_face4_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_GEODATA_meshface(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_GEODATA_meshface($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_GEODATA ##############

package LibreDWG::Dwg_Object_GEODATA;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_GEODATA_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_GEODATA_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_GEODATA_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_GEODATA_class_version_set;
*swig_host_block_get = *LibreDWGc::Dwg_Object_GEODATA_host_block_get;
*swig_host_block_set = *LibreDWGc::Dwg_Object_GEODATA_host_block_set;
*swig_coord_type_get = *LibreDWGc::Dwg_Object_GEODATA_coord_type_get;
*swig_coord_type_set = *LibreDWGc::Dwg_Object_GEODATA_coord_type_set;
*swig_design_pt_get = *LibreDWGc::Dwg_Object_GEODATA_design_pt_get;
*swig_design_pt_set = *LibreDWGc::Dwg_Object_GEODATA_design_pt_set;
*swig_ref_pt_get = *LibreDWGc::Dwg_Object_GEODATA_ref_pt_get;
*swig_ref_pt_set = *LibreDWGc::Dwg_Object_GEODATA_ref_pt_set;
*swig_obs_pt_get = *LibreDWGc::Dwg_Object_GEODATA_obs_pt_get;
*swig_obs_pt_set = *LibreDWGc::Dwg_Object_GEODATA_obs_pt_set;
*swig_unit_scale_horiz_get = *LibreDWGc::Dwg_Object_GEODATA_unit_scale_horiz_get;
*swig_unit_scale_horiz_set = *LibreDWGc::Dwg_Object_GEODATA_unit_scale_horiz_set;
*swig_units_value_horiz_get = *LibreDWGc::Dwg_Object_GEODATA_units_value_horiz_get;
*swig_units_value_horiz_set = *LibreDWGc::Dwg_Object_GEODATA_units_value_horiz_set;
*swig_unit_scale_vert_get = *LibreDWGc::Dwg_Object_GEODATA_unit_scale_vert_get;
*swig_unit_scale_vert_set = *LibreDWGc::Dwg_Object_GEODATA_unit_scale_vert_set;
*swig_units_value_vert_get = *LibreDWGc::Dwg_Object_GEODATA_units_value_vert_get;
*swig_units_value_vert_set = *LibreDWGc::Dwg_Object_GEODATA_units_value_vert_set;
*swig_up_dir_get = *LibreDWGc::Dwg_Object_GEODATA_up_dir_get;
*swig_up_dir_set = *LibreDWGc::Dwg_Object_GEODATA_up_dir_set;
*swig_north_dir_get = *LibreDWGc::Dwg_Object_GEODATA_north_dir_get;
*swig_north_dir_set = *LibreDWGc::Dwg_Object_GEODATA_north_dir_set;
*swig_scale_est_get = *LibreDWGc::Dwg_Object_GEODATA_scale_est_get;
*swig_scale_est_set = *LibreDWGc::Dwg_Object_GEODATA_scale_est_set;
*swig_user_scale_factor_get = *LibreDWGc::Dwg_Object_GEODATA_user_scale_factor_get;
*swig_user_scale_factor_set = *LibreDWGc::Dwg_Object_GEODATA_user_scale_factor_set;
*swig_sea_level_corr_get = *LibreDWGc::Dwg_Object_GEODATA_sea_level_corr_get;
*swig_sea_level_corr_set = *LibreDWGc::Dwg_Object_GEODATA_sea_level_corr_set;
*swig_sea_level_elev_get = *LibreDWGc::Dwg_Object_GEODATA_sea_level_elev_get;
*swig_sea_level_elev_set = *LibreDWGc::Dwg_Object_GEODATA_sea_level_elev_set;
*swig_coord_proj_radius_get = *LibreDWGc::Dwg_Object_GEODATA_coord_proj_radius_get;
*swig_coord_proj_radius_set = *LibreDWGc::Dwg_Object_GEODATA_coord_proj_radius_set;
*swig_coord_system_def_get = *LibreDWGc::Dwg_Object_GEODATA_coord_system_def_get;
*swig_coord_system_def_set = *LibreDWGc::Dwg_Object_GEODATA_coord_system_def_set;
*swig_geo_rss_tag_get = *LibreDWGc::Dwg_Object_GEODATA_geo_rss_tag_get;
*swig_geo_rss_tag_set = *LibreDWGc::Dwg_Object_GEODATA_geo_rss_tag_set;
*swig_coord_system_datum_get = *LibreDWGc::Dwg_Object_GEODATA_coord_system_datum_get;
*swig_coord_system_datum_set = *LibreDWGc::Dwg_Object_GEODATA_coord_system_datum_set;
*swig_coord_system_wkt_get = *LibreDWGc::Dwg_Object_GEODATA_coord_system_wkt_get;
*swig_coord_system_wkt_set = *LibreDWGc::Dwg_Object_GEODATA_coord_system_wkt_set;
*swig_observation_from_tag_get = *LibreDWGc::Dwg_Object_GEODATA_observation_from_tag_get;
*swig_observation_from_tag_set = *LibreDWGc::Dwg_Object_GEODATA_observation_from_tag_set;
*swig_observation_to_tag_get = *LibreDWGc::Dwg_Object_GEODATA_observation_to_tag_get;
*swig_observation_to_tag_set = *LibreDWGc::Dwg_Object_GEODATA_observation_to_tag_set;
*swig_observation_coverage_tag_get = *LibreDWGc::Dwg_Object_GEODATA_observation_coverage_tag_get;
*swig_observation_coverage_tag_set = *LibreDWGc::Dwg_Object_GEODATA_observation_coverage_tag_set;
*swig_num_geomesh_pts_get = *LibreDWGc::Dwg_Object_GEODATA_num_geomesh_pts_get;
*swig_num_geomesh_pts_set = *LibreDWGc::Dwg_Object_GEODATA_num_geomesh_pts_set;
*swig_geomesh_pts_get = *LibreDWGc::Dwg_Object_GEODATA_geomesh_pts_get;
*swig_geomesh_pts_set = *LibreDWGc::Dwg_Object_GEODATA_geomesh_pts_set;
*swig_num_geomesh_faces_get = *LibreDWGc::Dwg_Object_GEODATA_num_geomesh_faces_get;
*swig_num_geomesh_faces_set = *LibreDWGc::Dwg_Object_GEODATA_num_geomesh_faces_set;
*swig_geomesh_faces_get = *LibreDWGc::Dwg_Object_GEODATA_geomesh_faces_get;
*swig_geomesh_faces_set = *LibreDWGc::Dwg_Object_GEODATA_geomesh_faces_set;
*swig_has_civil_data_get = *LibreDWGc::Dwg_Object_GEODATA_has_civil_data_get;
*swig_has_civil_data_set = *LibreDWGc::Dwg_Object_GEODATA_has_civil_data_set;
*swig_obsolete_false_get = *LibreDWGc::Dwg_Object_GEODATA_obsolete_false_get;
*swig_obsolete_false_set = *LibreDWGc::Dwg_Object_GEODATA_obsolete_false_set;
*swig_north_dir_angle_deg_get = *LibreDWGc::Dwg_Object_GEODATA_north_dir_angle_deg_get;
*swig_north_dir_angle_deg_set = *LibreDWGc::Dwg_Object_GEODATA_north_dir_angle_deg_set;
*swig_north_dir_angle_rad_get = *LibreDWGc::Dwg_Object_GEODATA_north_dir_angle_rad_get;
*swig_north_dir_angle_rad_set = *LibreDWGc::Dwg_Object_GEODATA_north_dir_angle_rad_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_GEODATA_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_GEODATA_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_GEODATA_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_GEODATA_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_GEODATA(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_GEODATA($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_IDBUFFER ##############

package LibreDWG::Dwg_Object_IDBUFFER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_IDBUFFER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_IDBUFFER_parent_set;
*swig_unknown_get = *LibreDWGc::Dwg_Object_IDBUFFER_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Object_IDBUFFER_unknown_set;
*swig_num_obj_ids_get = *LibreDWGc::Dwg_Object_IDBUFFER_num_obj_ids_get;
*swig_num_obj_ids_set = *LibreDWGc::Dwg_Object_IDBUFFER_num_obj_ids_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_IDBUFFER_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_IDBUFFER_parenthandle_set;
*swig_obj_ids_get = *LibreDWGc::Dwg_Object_IDBUFFER_obj_ids_get;
*swig_obj_ids_set = *LibreDWGc::Dwg_Object_IDBUFFER_obj_ids_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_IDBUFFER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_IDBUFFER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_IMAGE ##############

package LibreDWG::Dwg_Entity_IMAGE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_IMAGE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_IMAGE_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_IMAGE_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_IMAGE_class_version_set;
*swig_pt0_get = *LibreDWGc::Dwg_Entity_IMAGE_pt0_get;
*swig_pt0_set = *LibreDWGc::Dwg_Entity_IMAGE_pt0_set;
*swig_uvec_get = *LibreDWGc::Dwg_Entity_IMAGE_uvec_get;
*swig_uvec_set = *LibreDWGc::Dwg_Entity_IMAGE_uvec_set;
*swig_vvec_get = *LibreDWGc::Dwg_Entity_IMAGE_vvec_get;
*swig_vvec_set = *LibreDWGc::Dwg_Entity_IMAGE_vvec_set;
*swig_size_get = *LibreDWGc::Dwg_Entity_IMAGE_size_get;
*swig_size_set = *LibreDWGc::Dwg_Entity_IMAGE_size_set;
*swig_display_props_get = *LibreDWGc::Dwg_Entity_IMAGE_display_props_get;
*swig_display_props_set = *LibreDWGc::Dwg_Entity_IMAGE_display_props_set;
*swig_clipping_get = *LibreDWGc::Dwg_Entity_IMAGE_clipping_get;
*swig_clipping_set = *LibreDWGc::Dwg_Entity_IMAGE_clipping_set;
*swig_brightness_get = *LibreDWGc::Dwg_Entity_IMAGE_brightness_get;
*swig_brightness_set = *LibreDWGc::Dwg_Entity_IMAGE_brightness_set;
*swig_contrast_get = *LibreDWGc::Dwg_Entity_IMAGE_contrast_get;
*swig_contrast_set = *LibreDWGc::Dwg_Entity_IMAGE_contrast_set;
*swig_fade_get = *LibreDWGc::Dwg_Entity_IMAGE_fade_get;
*swig_fade_set = *LibreDWGc::Dwg_Entity_IMAGE_fade_set;
*swig_clip_mode_get = *LibreDWGc::Dwg_Entity_IMAGE_clip_mode_get;
*swig_clip_mode_set = *LibreDWGc::Dwg_Entity_IMAGE_clip_mode_set;
*swig_clip_boundary_type_get = *LibreDWGc::Dwg_Entity_IMAGE_clip_boundary_type_get;
*swig_clip_boundary_type_set = *LibreDWGc::Dwg_Entity_IMAGE_clip_boundary_type_set;
*swig_boundary_pt0_get = *LibreDWGc::Dwg_Entity_IMAGE_boundary_pt0_get;
*swig_boundary_pt0_set = *LibreDWGc::Dwg_Entity_IMAGE_boundary_pt0_set;
*swig_boundary_pt1_get = *LibreDWGc::Dwg_Entity_IMAGE_boundary_pt1_get;
*swig_boundary_pt1_set = *LibreDWGc::Dwg_Entity_IMAGE_boundary_pt1_set;
*swig_num_clip_verts_get = *LibreDWGc::Dwg_Entity_IMAGE_num_clip_verts_get;
*swig_num_clip_verts_set = *LibreDWGc::Dwg_Entity_IMAGE_num_clip_verts_set;
*swig_clip_verts_get = *LibreDWGc::Dwg_Entity_IMAGE_clip_verts_get;
*swig_clip_verts_set = *LibreDWGc::Dwg_Entity_IMAGE_clip_verts_set;
*swig_imagedef_get = *LibreDWGc::Dwg_Entity_IMAGE_imagedef_get;
*swig_imagedef_set = *LibreDWGc::Dwg_Entity_IMAGE_imagedef_set;
*swig_imagedefreactor_get = *LibreDWGc::Dwg_Entity_IMAGE_imagedefreactor_get;
*swig_imagedefreactor_set = *LibreDWGc::Dwg_Entity_IMAGE_imagedefreactor_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_IMAGE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_IMAGE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_entity_IMAGE_size ##############

package LibreDWG::_dwg_entity_IMAGE_size;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_width_get = *LibreDWGc::_dwg_entity_IMAGE_size_width_get;
*swig_width_set = *LibreDWGc::_dwg_entity_IMAGE_size_width_set;
*swig_height_get = *LibreDWGc::_dwg_entity_IMAGE_size_height_get;
*swig_height_set = *LibreDWGc::_dwg_entity_IMAGE_size_height_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_entity_IMAGE_size(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_entity_IMAGE_size($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_IMAGEDEF ##############

package LibreDWG::Dwg_Object_IMAGEDEF;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_IMAGEDEF_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_IMAGEDEF_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_IMAGEDEF_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_IMAGEDEF_class_version_set;
*swig_image_size_get = *LibreDWGc::Dwg_Object_IMAGEDEF_image_size_get;
*swig_image_size_set = *LibreDWGc::Dwg_Object_IMAGEDEF_image_size_set;
*swig_file_path_get = *LibreDWGc::Dwg_Object_IMAGEDEF_file_path_get;
*swig_file_path_set = *LibreDWGc::Dwg_Object_IMAGEDEF_file_path_set;
*swig_is_loaded_get = *LibreDWGc::Dwg_Object_IMAGEDEF_is_loaded_get;
*swig_is_loaded_set = *LibreDWGc::Dwg_Object_IMAGEDEF_is_loaded_set;
*swig_resunits_get = *LibreDWGc::Dwg_Object_IMAGEDEF_resunits_get;
*swig_resunits_set = *LibreDWGc::Dwg_Object_IMAGEDEF_resunits_set;
*swig_pixel_size_get = *LibreDWGc::Dwg_Object_IMAGEDEF_pixel_size_get;
*swig_pixel_size_set = *LibreDWGc::Dwg_Object_IMAGEDEF_pixel_size_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_IMAGEDEF_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_IMAGEDEF_parenthandle_set;
*swig_null_handle_get = *LibreDWGc::Dwg_Object_IMAGEDEF_null_handle_get;
*swig_null_handle_set = *LibreDWGc::Dwg_Object_IMAGEDEF_null_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_IMAGEDEF(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_IMAGEDEF($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_IMAGEDEF_REACTOR ##############

package LibreDWG::Dwg_Object_IMAGEDEF_REACTOR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_IMAGEDEF_REACTOR_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_IMAGEDEF_REACTOR_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_IMAGEDEF_REACTOR_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_IMAGEDEF_REACTOR_class_version_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_IMAGEDEF_REACTOR_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_IMAGEDEF_REACTOR_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_IMAGEDEF_REACTOR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_IMAGEDEF_REACTOR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_LAYER_entry ##############

package LibreDWG::Dwg_LAYER_entry;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_idxlong_get = *LibreDWGc::Dwg_LAYER_entry_idxlong_get;
*swig_idxlong_set = *LibreDWGc::Dwg_LAYER_entry_idxlong_set;
*swig_layer_get = *LibreDWGc::Dwg_LAYER_entry_layer_get;
*swig_layer_set = *LibreDWGc::Dwg_LAYER_entry_layer_set;
*swig_parent_get = *LibreDWGc::Dwg_LAYER_entry_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_LAYER_entry_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_LAYER_entry(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_LAYER_entry($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LAYER_INDEX ##############

package LibreDWG::Dwg_Object_LAYER_INDEX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LAYER_INDEX_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LAYER_INDEX_parent_set;
*swig_timestamp1_get = *LibreDWGc::Dwg_Object_LAYER_INDEX_timestamp1_get;
*swig_timestamp1_set = *LibreDWGc::Dwg_Object_LAYER_INDEX_timestamp1_set;
*swig_timestamp2_get = *LibreDWGc::Dwg_Object_LAYER_INDEX_timestamp2_get;
*swig_timestamp2_set = *LibreDWGc::Dwg_Object_LAYER_INDEX_timestamp2_set;
*swig_num_entries_get = *LibreDWGc::Dwg_Object_LAYER_INDEX_num_entries_get;
*swig_num_entries_set = *LibreDWGc::Dwg_Object_LAYER_INDEX_num_entries_set;
*swig_entries_get = *LibreDWGc::Dwg_Object_LAYER_INDEX_entries_get;
*swig_entries_set = *LibreDWGc::Dwg_Object_LAYER_INDEX_entries_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_LAYER_INDEX_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_LAYER_INDEX_parenthandle_set;
*swig_entry_handles_get = *LibreDWGc::Dwg_Object_LAYER_INDEX_entry_handles_get;
*swig_entry_handles_set = *LibreDWGc::Dwg_Object_LAYER_INDEX_entry_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LAYER_INDEX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LAYER_INDEX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_LWPOLYLINE ##############

package LibreDWG::Dwg_Entity_LWPOLYLINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_flag_set;
*swig_const_width_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_const_width_get;
*swig_const_width_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_const_width_set;
*swig_elevation_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_elevation_get;
*swig_elevation_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_elevation_set;
*swig_thickness_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_thickness_get;
*swig_thickness_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_thickness_set;
*swig_normal_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_normal_get;
*swig_normal_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_normal_set;
*swig_num_points_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_points_get;
*swig_num_points_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_points_set;
*swig_points_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_points_get;
*swig_points_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_points_set;
*swig_num_bulges_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_bulges_get;
*swig_num_bulges_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_bulges_set;
*swig_bulges_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_bulges_get;
*swig_bulges_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_bulges_set;
*swig_num_vertexids_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_vertexids_get;
*swig_num_vertexids_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_vertexids_set;
*swig_vertexids_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_vertexids_get;
*swig_vertexids_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_vertexids_set;
*swig_num_widths_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_widths_get;
*swig_num_widths_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_num_widths_set;
*swig_widths_get = *LibreDWGc::Dwg_Entity_LWPOLYLINE_widths_get;
*swig_widths_set = *LibreDWGc::Dwg_Entity_LWPOLYLINE_widths_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_LWPOLYLINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_LWPOLYLINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_OBJECTCONTEXTDATA ##############

package LibreDWG::Dwg_Object_OBJECTCONTEXTDATA;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_class_version_set;
*swig_has_file_get = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_has_file_get;
*swig_has_file_set = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_has_file_set;
*swig_defaultflag_get = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_defaultflag_get;
*swig_defaultflag_set = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_defaultflag_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_OBJECTCONTEXTDATA_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_OBJECTCONTEXTDATA(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_OBJECTCONTEXTDATA($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_RASTERVARIABLES ##############

package LibreDWG::Dwg_Object_RASTERVARIABLES;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_RASTERVARIABLES_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_RASTERVARIABLES_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_RASTERVARIABLES_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_RASTERVARIABLES_class_version_set;
*swig_display_frame_get = *LibreDWGc::Dwg_Object_RASTERVARIABLES_display_frame_get;
*swig_display_frame_set = *LibreDWGc::Dwg_Object_RASTERVARIABLES_display_frame_set;
*swig_display_quality_get = *LibreDWGc::Dwg_Object_RASTERVARIABLES_display_quality_get;
*swig_display_quality_set = *LibreDWGc::Dwg_Object_RASTERVARIABLES_display_quality_set;
*swig_units_get = *LibreDWGc::Dwg_Object_RASTERVARIABLES_units_get;
*swig_units_set = *LibreDWGc::Dwg_Object_RASTERVARIABLES_units_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_RASTERVARIABLES_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_RASTERVARIABLES_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_RASTERVARIABLES(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_RASTERVARIABLES($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_SCALE ##############

package LibreDWG::Dwg_Object_SCALE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_SCALE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_SCALE_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_SCALE_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_SCALE_flag_set;
*swig_name_get = *LibreDWGc::Dwg_Object_SCALE_name_get;
*swig_name_set = *LibreDWGc::Dwg_Object_SCALE_name_set;
*swig_paper_units_get = *LibreDWGc::Dwg_Object_SCALE_paper_units_get;
*swig_paper_units_set = *LibreDWGc::Dwg_Object_SCALE_paper_units_set;
*swig_drawing_units_get = *LibreDWGc::Dwg_Object_SCALE_drawing_units_get;
*swig_drawing_units_set = *LibreDWGc::Dwg_Object_SCALE_drawing_units_set;
*swig_has_unit_scale_get = *LibreDWGc::Dwg_Object_SCALE_has_unit_scale_get;
*swig_has_unit_scale_set = *LibreDWGc::Dwg_Object_SCALE_has_unit_scale_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_SCALE_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_SCALE_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_SCALE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_SCALE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_SORTENTSTABLE ##############

package LibreDWG::Dwg_Object_SORTENTSTABLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_SORTENTSTABLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_SORTENTSTABLE_parent_set;
*swig_num_ents_get = *LibreDWGc::Dwg_Object_SORTENTSTABLE_num_ents_get;
*swig_num_ents_set = *LibreDWGc::Dwg_Object_SORTENTSTABLE_num_ents_set;
*swig_sort_handles_get = *LibreDWGc::Dwg_Object_SORTENTSTABLE_sort_handles_get;
*swig_sort_handles_set = *LibreDWGc::Dwg_Object_SORTENTSTABLE_sort_handles_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_SORTENTSTABLE_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_SORTENTSTABLE_parenthandle_set;
*swig_owner_handle_get = *LibreDWGc::Dwg_Object_SORTENTSTABLE_owner_handle_get;
*swig_owner_handle_set = *LibreDWGc::Dwg_Object_SORTENTSTABLE_owner_handle_set;
*swig_ents_get = *LibreDWGc::Dwg_Object_SORTENTSTABLE_ents_get;
*swig_ents_set = *LibreDWGc::Dwg_Object_SORTENTSTABLE_ents_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_SORTENTSTABLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_SORTENTSTABLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_SPATIAL_FILTER ##############

package LibreDWG::Dwg_Object_SPATIAL_FILTER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_parent_set;
*swig_num_points_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_num_points_get;
*swig_num_points_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_num_points_set;
*swig_points_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_points_get;
*swig_points_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_points_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_extrusion_set;
*swig_clip_bound_origin_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_clip_bound_origin_get;
*swig_clip_bound_origin_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_clip_bound_origin_set;
*swig_display_boundary_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_display_boundary_get;
*swig_display_boundary_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_display_boundary_set;
*swig_front_clip_on_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_front_clip_on_get;
*swig_front_clip_on_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_front_clip_on_set;
*swig_front_clip_dist_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_front_clip_dist_get;
*swig_front_clip_dist_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_front_clip_dist_set;
*swig_back_clip_on_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_back_clip_on_get;
*swig_back_clip_on_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_back_clip_on_set;
*swig_back_clip_dist_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_back_clip_dist_get;
*swig_back_clip_dist_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_back_clip_dist_set;
*swig_inverse_block_transform_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_inverse_block_transform_get;
*swig_inverse_block_transform_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_inverse_block_transform_set;
*swig_clip_bound_transform_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_clip_bound_transform_get;
*swig_clip_bound_transform_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_clip_bound_transform_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_SPATIAL_FILTER_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_SPATIAL_FILTER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_SPATIAL_FILTER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_SPATIAL_INDEX ##############

package LibreDWG::Dwg_Object_SPATIAL_INDEX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_parent_set;
*swig_timestamp1_get = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_timestamp1_get;
*swig_timestamp1_set = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_timestamp1_set;
*swig_timestamp2_get = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_timestamp2_get;
*swig_timestamp2_set = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_timestamp2_set;
*swig_unknown_get = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_unknown_get;
*swig_unknown_set = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_unknown_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_SPATIAL_INDEX_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_SPATIAL_INDEX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_SPATIAL_INDEX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_WIPEOUT ##############

package LibreDWG::Dwg_Entity_WIPEOUT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_WIPEOUT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_WIPEOUT_parent_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_WIPEOUT_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_WIPEOUT_class_version_set;
*swig_pt0_get = *LibreDWGc::Dwg_Entity_WIPEOUT_pt0_get;
*swig_pt0_set = *LibreDWGc::Dwg_Entity_WIPEOUT_pt0_set;
*swig_uvec_get = *LibreDWGc::Dwg_Entity_WIPEOUT_uvec_get;
*swig_uvec_set = *LibreDWGc::Dwg_Entity_WIPEOUT_uvec_set;
*swig_vvec_get = *LibreDWGc::Dwg_Entity_WIPEOUT_vvec_get;
*swig_vvec_set = *LibreDWGc::Dwg_Entity_WIPEOUT_vvec_set;
*swig_size_get = *LibreDWGc::Dwg_Entity_WIPEOUT_size_get;
*swig_size_set = *LibreDWGc::Dwg_Entity_WIPEOUT_size_set;
*swig_display_props_get = *LibreDWGc::Dwg_Entity_WIPEOUT_display_props_get;
*swig_display_props_set = *LibreDWGc::Dwg_Entity_WIPEOUT_display_props_set;
*swig_clipping_get = *LibreDWGc::Dwg_Entity_WIPEOUT_clipping_get;
*swig_clipping_set = *LibreDWGc::Dwg_Entity_WIPEOUT_clipping_set;
*swig_brightness_get = *LibreDWGc::Dwg_Entity_WIPEOUT_brightness_get;
*swig_brightness_set = *LibreDWGc::Dwg_Entity_WIPEOUT_brightness_set;
*swig_contrast_get = *LibreDWGc::Dwg_Entity_WIPEOUT_contrast_get;
*swig_contrast_set = *LibreDWGc::Dwg_Entity_WIPEOUT_contrast_set;
*swig_fade_get = *LibreDWGc::Dwg_Entity_WIPEOUT_fade_get;
*swig_fade_set = *LibreDWGc::Dwg_Entity_WIPEOUT_fade_set;
*swig_clip_mode_get = *LibreDWGc::Dwg_Entity_WIPEOUT_clip_mode_get;
*swig_clip_mode_set = *LibreDWGc::Dwg_Entity_WIPEOUT_clip_mode_set;
*swig_clip_boundary_type_get = *LibreDWGc::Dwg_Entity_WIPEOUT_clip_boundary_type_get;
*swig_clip_boundary_type_set = *LibreDWGc::Dwg_Entity_WIPEOUT_clip_boundary_type_set;
*swig_boundary_pt0_get = *LibreDWGc::Dwg_Entity_WIPEOUT_boundary_pt0_get;
*swig_boundary_pt0_set = *LibreDWGc::Dwg_Entity_WIPEOUT_boundary_pt0_set;
*swig_boundary_pt1_get = *LibreDWGc::Dwg_Entity_WIPEOUT_boundary_pt1_get;
*swig_boundary_pt1_set = *LibreDWGc::Dwg_Entity_WIPEOUT_boundary_pt1_set;
*swig_num_clip_verts_get = *LibreDWGc::Dwg_Entity_WIPEOUT_num_clip_verts_get;
*swig_num_clip_verts_set = *LibreDWGc::Dwg_Entity_WIPEOUT_num_clip_verts_set;
*swig_clip_verts_get = *LibreDWGc::Dwg_Entity_WIPEOUT_clip_verts_get;
*swig_clip_verts_set = *LibreDWGc::Dwg_Entity_WIPEOUT_clip_verts_set;
*swig_imagedef_get = *LibreDWGc::Dwg_Entity_WIPEOUT_imagedef_get;
*swig_imagedef_set = *LibreDWGc::Dwg_Entity_WIPEOUT_imagedef_set;
*swig_imagedefreactor_get = *LibreDWGc::Dwg_Entity_WIPEOUT_imagedefreactor_get;
*swig_imagedefreactor_set = *LibreDWGc::Dwg_Entity_WIPEOUT_imagedefreactor_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_WIPEOUT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_WIPEOUT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_entity_WIPEOUT_size ##############

package LibreDWG::_dwg_entity_WIPEOUT_size;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_width_get = *LibreDWGc::_dwg_entity_WIPEOUT_size_width_get;
*swig_width_set = *LibreDWGc::_dwg_entity_WIPEOUT_size_width_set;
*swig_height_get = *LibreDWGc::_dwg_entity_WIPEOUT_size_height_get;
*swig_height_set = *LibreDWGc::_dwg_entity_WIPEOUT_size_height_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_entity_WIPEOUT_size(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_entity_WIPEOUT_size($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_WIPEOUTVARIABLES ##############

package LibreDWG::Dwg_Object_WIPEOUTVARIABLES;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_WIPEOUTVARIABLES_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_WIPEOUTVARIABLES_parent_set;
*swig_display_frame_get = *LibreDWGc::Dwg_Object_WIPEOUTVARIABLES_display_frame_get;
*swig_display_frame_set = *LibreDWGc::Dwg_Object_WIPEOUTVARIABLES_display_frame_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_WIPEOUTVARIABLES_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_WIPEOUTVARIABLES_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_WIPEOUTVARIABLES(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_WIPEOUTVARIABLES($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_VISUALSTYLE ##############

package LibreDWG::Dwg_Object_VISUALSTYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_dictionary_get = *LibreDWGc::Dwg_Object_VISUALSTYLE_dictionary_get;
*swig_dictionary_set = *LibreDWGc::Dwg_Object_VISUALSTYLE_dictionary_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_VISUALSTYLE_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_VISUALSTYLE_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_VISUALSTYLE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_VISUALSTYLE_xdicobjhandle_set;
*swig_parent_get = *LibreDWGc::Dwg_Object_VISUALSTYLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_VISUALSTYLE_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_VISUALSTYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_VISUALSTYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_LIGHTLIST ##############

package LibreDWG::Dwg_Object_LIGHTLIST;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_LIGHTLIST_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_LIGHTLIST_parent_set;
*swig_dictionary_get = *LibreDWGc::Dwg_Object_LIGHTLIST_dictionary_get;
*swig_dictionary_set = *LibreDWGc::Dwg_Object_LIGHTLIST_dictionary_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_LIGHTLIST_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_LIGHTLIST_class_version_set;
*swig_num_lights_get = *LibreDWGc::Dwg_Object_LIGHTLIST_num_lights_get;
*swig_num_lights_set = *LibreDWGc::Dwg_Object_LIGHTLIST_num_lights_set;
*swig_light_handle_get = *LibreDWGc::Dwg_Object_LIGHTLIST_light_handle_get;
*swig_light_handle_set = *LibreDWGc::Dwg_Object_LIGHTLIST_light_handle_set;
*swig_light_name_get = *LibreDWGc::Dwg_Object_LIGHTLIST_light_name_get;
*swig_light_name_set = *LibreDWGc::Dwg_Object_LIGHTLIST_light_name_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_LIGHTLIST_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_LIGHTLIST_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_LIGHTLIST_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_LIGHTLIST_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_LIGHTLIST(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_LIGHTLIST($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_MATERIAL ##############

package LibreDWG::Dwg_Object_MATERIAL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_MATERIAL_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_MATERIAL_parent_set;
*swig_name_get = *LibreDWGc::Dwg_Object_MATERIAL_name_get;
*swig_name_set = *LibreDWGc::Dwg_Object_MATERIAL_name_set;
*swig_desc_get = *LibreDWGc::Dwg_Object_MATERIAL_desc_get;
*swig_desc_set = *LibreDWGc::Dwg_Object_MATERIAL_desc_set;
*swig_ambient_color_flag_get = *LibreDWGc::Dwg_Object_MATERIAL_ambient_color_flag_get;
*swig_ambient_color_flag_set = *LibreDWGc::Dwg_Object_MATERIAL_ambient_color_flag_set;
*swig_ambient_color_factor_get = *LibreDWGc::Dwg_Object_MATERIAL_ambient_color_factor_get;
*swig_ambient_color_factor_set = *LibreDWGc::Dwg_Object_MATERIAL_ambient_color_factor_set;
*swig_ambient_color_get = *LibreDWGc::Dwg_Object_MATERIAL_ambient_color_get;
*swig_ambient_color_set = *LibreDWGc::Dwg_Object_MATERIAL_ambient_color_set;
*swig_diffuse_color_flag_get = *LibreDWGc::Dwg_Object_MATERIAL_diffuse_color_flag_get;
*swig_diffuse_color_flag_set = *LibreDWGc::Dwg_Object_MATERIAL_diffuse_color_flag_set;
*swig_diffuse_color_factor_get = *LibreDWGc::Dwg_Object_MATERIAL_diffuse_color_factor_get;
*swig_diffuse_color_factor_set = *LibreDWGc::Dwg_Object_MATERIAL_diffuse_color_factor_set;
*swig_diffuse_color_get = *LibreDWGc::Dwg_Object_MATERIAL_diffuse_color_get;
*swig_diffuse_color_set = *LibreDWGc::Dwg_Object_MATERIAL_diffuse_color_set;
*swig_diffusemap_source_get = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_source_get;
*swig_diffusemap_source_set = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_source_set;
*swig_diffusemap_filename_get = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_filename_get;
*swig_diffusemap_filename_set = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_filename_set;
*swig_diffusemap_blendfactor_get = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_blendfactor_get;
*swig_diffusemap_blendfactor_set = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_blendfactor_set;
*swig_diffusemap_projection_get = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_projection_get;
*swig_diffusemap_projection_set = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_projection_set;
*swig_diffusemap_tiling_get = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_tiling_get;
*swig_diffusemap_tiling_set = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_tiling_set;
*swig_diffusemap_autotransform_get = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_autotransform_get;
*swig_diffusemap_autotransform_set = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_autotransform_set;
*swig_diffusemap_transmatrix_get = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_transmatrix_get;
*swig_diffusemap_transmatrix_set = *LibreDWGc::Dwg_Object_MATERIAL_diffusemap_transmatrix_set;
*swig_specular_gloss_factor_get = *LibreDWGc::Dwg_Object_MATERIAL_specular_gloss_factor_get;
*swig_specular_gloss_factor_set = *LibreDWGc::Dwg_Object_MATERIAL_specular_gloss_factor_set;
*swig_specular_color_flag_get = *LibreDWGc::Dwg_Object_MATERIAL_specular_color_flag_get;
*swig_specular_color_flag_set = *LibreDWGc::Dwg_Object_MATERIAL_specular_color_flag_set;
*swig_specular_color_factor_get = *LibreDWGc::Dwg_Object_MATERIAL_specular_color_factor_get;
*swig_specular_color_factor_set = *LibreDWGc::Dwg_Object_MATERIAL_specular_color_factor_set;
*swig_specular_color_get = *LibreDWGc::Dwg_Object_MATERIAL_specular_color_get;
*swig_specular_color_set = *LibreDWGc::Dwg_Object_MATERIAL_specular_color_set;
*swig_specularmap_source_get = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_source_get;
*swig_specularmap_source_set = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_source_set;
*swig_specularmap_filename_get = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_filename_get;
*swig_specularmap_filename_set = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_filename_set;
*swig_specularmap_blendfactor_get = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_blendfactor_get;
*swig_specularmap_blendfactor_set = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_blendfactor_set;
*swig_specularmap_projection_get = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_projection_get;
*swig_specularmap_projection_set = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_projection_set;
*swig_specularmap_tiling_get = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_tiling_get;
*swig_specularmap_tiling_set = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_tiling_set;
*swig_specularmap_autotransform_get = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_autotransform_get;
*swig_specularmap_autotransform_set = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_autotransform_set;
*swig_specularmap_transmatrix_get = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_transmatrix_get;
*swig_specularmap_transmatrix_set = *LibreDWGc::Dwg_Object_MATERIAL_specularmap_transmatrix_set;
*swig_reflectionmap_source_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_source_get;
*swig_reflectionmap_source_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_source_set;
*swig_reflectionmap_filename_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_filename_get;
*swig_reflectionmap_filename_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_filename_set;
*swig_reflectionmap_blendfactor_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_blendfactor_get;
*swig_reflectionmap_blendfactor_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_blendfactor_set;
*swig_reflectionmap_projection_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_projection_get;
*swig_reflectionmap_projection_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_projection_set;
*swig_reflectionmap_tiling_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_tiling_get;
*swig_reflectionmap_tiling_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_tiling_set;
*swig_reflectionmap_autotransform_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_autotransform_get;
*swig_reflectionmap_autotransform_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_autotransform_set;
*swig_reflectionmap_transmatrix_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_transmatrix_get;
*swig_reflectionmap_transmatrix_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectionmap_transmatrix_set;
*swig_opacity_percent_get = *LibreDWGc::Dwg_Object_MATERIAL_opacity_percent_get;
*swig_opacity_percent_set = *LibreDWGc::Dwg_Object_MATERIAL_opacity_percent_set;
*swig_opacitymap_source_get = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_source_get;
*swig_opacitymap_source_set = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_source_set;
*swig_opacitymap_filename_get = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_filename_get;
*swig_opacitymap_filename_set = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_filename_set;
*swig_opacitymap_blendfactor_get = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_blendfactor_get;
*swig_opacitymap_blendfactor_set = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_blendfactor_set;
*swig_opacitymap_projection_get = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_projection_get;
*swig_opacitymap_projection_set = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_projection_set;
*swig_opacitymap_tiling_get = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_tiling_get;
*swig_opacitymap_tiling_set = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_tiling_set;
*swig_opacitymap_autotransform_get = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_autotransform_get;
*swig_opacitymap_autotransform_set = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_autotransform_set;
*swig_opacitymap_transmatrix_get = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_transmatrix_get;
*swig_opacitymap_transmatrix_set = *LibreDWGc::Dwg_Object_MATERIAL_opacitymap_transmatrix_set;
*swig_bumpmap_source_get = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_source_get;
*swig_bumpmap_source_set = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_source_set;
*swig_bumpmap_filename_get = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_filename_get;
*swig_bumpmap_filename_set = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_filename_set;
*swig_bumpmap_blendfactor_get = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_blendfactor_get;
*swig_bumpmap_blendfactor_set = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_blendfactor_set;
*swig_bumpmap_projection_get = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_projection_get;
*swig_bumpmap_projection_set = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_projection_set;
*swig_bumpmap_tiling_get = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_tiling_get;
*swig_bumpmap_tiling_set = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_tiling_set;
*swig_bumpmap_autotransform_get = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_autotransform_get;
*swig_bumpmap_autotransform_set = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_autotransform_set;
*swig_bumpmap_transmatrix_get = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_transmatrix_get;
*swig_bumpmap_transmatrix_set = *LibreDWGc::Dwg_Object_MATERIAL_bumpmap_transmatrix_set;
*swig_refraction_index_get = *LibreDWGc::Dwg_Object_MATERIAL_refraction_index_get;
*swig_refraction_index_set = *LibreDWGc::Dwg_Object_MATERIAL_refraction_index_set;
*swig_refractionmap_source_get = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_source_get;
*swig_refractionmap_source_set = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_source_set;
*swig_refractionmap_filename_get = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_filename_get;
*swig_refractionmap_filename_set = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_filename_set;
*swig_refractionmap_blendfactor_get = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_blendfactor_get;
*swig_refractionmap_blendfactor_set = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_blendfactor_set;
*swig_refractionmap_projection_get = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_projection_get;
*swig_refractionmap_projection_set = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_projection_set;
*swig_refractionmap_tiling_get = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_tiling_get;
*swig_refractionmap_tiling_set = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_tiling_set;
*swig_refractionmap_autotransform_get = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_autotransform_get;
*swig_refractionmap_autotransform_set = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_autotransform_set;
*swig_refractionmap_transmatrix_get = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_transmatrix_get;
*swig_refractionmap_transmatrix_set = *LibreDWGc::Dwg_Object_MATERIAL_refractionmap_transmatrix_set;
*swig_color_bleed_scale_get = *LibreDWGc::Dwg_Object_MATERIAL_color_bleed_scale_get;
*swig_color_bleed_scale_set = *LibreDWGc::Dwg_Object_MATERIAL_color_bleed_scale_set;
*swig_indirect_dump_scale_get = *LibreDWGc::Dwg_Object_MATERIAL_indirect_dump_scale_get;
*swig_indirect_dump_scale_set = *LibreDWGc::Dwg_Object_MATERIAL_indirect_dump_scale_set;
*swig_reflectance_scale_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectance_scale_get;
*swig_reflectance_scale_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectance_scale_set;
*swig_transmittance_scale_get = *LibreDWGc::Dwg_Object_MATERIAL_transmittance_scale_get;
*swig_transmittance_scale_set = *LibreDWGc::Dwg_Object_MATERIAL_transmittance_scale_set;
*swig_two_sided_material_get = *LibreDWGc::Dwg_Object_MATERIAL_two_sided_material_get;
*swig_two_sided_material_set = *LibreDWGc::Dwg_Object_MATERIAL_two_sided_material_set;
*swig_luminance_get = *LibreDWGc::Dwg_Object_MATERIAL_luminance_get;
*swig_luminance_set = *LibreDWGc::Dwg_Object_MATERIAL_luminance_set;
*swig_luminance_mode_get = *LibreDWGc::Dwg_Object_MATERIAL_luminance_mode_get;
*swig_luminance_mode_set = *LibreDWGc::Dwg_Object_MATERIAL_luminance_mode_set;
*swig_normalmap_method_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_method_get;
*swig_normalmap_method_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_method_set;
*swig_normalmap_strength_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_strength_get;
*swig_normalmap_strength_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_strength_set;
*swig_normalmap_source_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_source_get;
*swig_normalmap_source_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_source_set;
*swig_normalmap_filename_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_filename_get;
*swig_normalmap_filename_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_filename_set;
*swig_normalmap_blendfactor_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_blendfactor_get;
*swig_normalmap_blendfactor_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_blendfactor_set;
*swig_normalmap_projection_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_projection_get;
*swig_normalmap_projection_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_projection_set;
*swig_normalmap_tiling_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_tiling_get;
*swig_normalmap_tiling_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_tiling_set;
*swig_normalmap_autotransform_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_autotransform_get;
*swig_normalmap_autotransform_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_autotransform_set;
*swig_normalmap_transmatrix_get = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_transmatrix_get;
*swig_normalmap_transmatrix_set = *LibreDWGc::Dwg_Object_MATERIAL_normalmap_transmatrix_set;
*swig_materials_anonymous_get = *LibreDWGc::Dwg_Object_MATERIAL_materials_anonymous_get;
*swig_materials_anonymous_set = *LibreDWGc::Dwg_Object_MATERIAL_materials_anonymous_set;
*swig_global_illumination_mode_get = *LibreDWGc::Dwg_Object_MATERIAL_global_illumination_mode_get;
*swig_global_illumination_mode_set = *LibreDWGc::Dwg_Object_MATERIAL_global_illumination_mode_set;
*swig_final_gather_mode_get = *LibreDWGc::Dwg_Object_MATERIAL_final_gather_mode_get;
*swig_final_gather_mode_set = *LibreDWGc::Dwg_Object_MATERIAL_final_gather_mode_set;
*swig_genprocname_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocname_get;
*swig_genprocname_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocname_set;
*swig_genprocvalbool_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalbool_get;
*swig_genprocvalbool_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalbool_set;
*swig_genprocvalint_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalint_get;
*swig_genprocvalint_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalint_set;
*swig_genprocvalreal_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalreal_get;
*swig_genprocvalreal_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalreal_set;
*swig_genprocvaltext_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocvaltext_get;
*swig_genprocvaltext_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocvaltext_set;
*swig_genproctableend_get = *LibreDWGc::Dwg_Object_MATERIAL_genproctableend_get;
*swig_genproctableend_set = *LibreDWGc::Dwg_Object_MATERIAL_genproctableend_set;
*swig_genprocvalcolorindex_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalcolorindex_get;
*swig_genprocvalcolorindex_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalcolorindex_set;
*swig_genprocvalcolorrgb_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalcolorrgb_get;
*swig_genprocvalcolorrgb_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalcolorrgb_set;
*swig_genprocvalcolorname_get = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalcolorname_get;
*swig_genprocvalcolorname_set = *LibreDWGc::Dwg_Object_MATERIAL_genprocvalcolorname_set;
*swig_map_utile_get = *LibreDWGc::Dwg_Object_MATERIAL_map_utile_get;
*swig_map_utile_set = *LibreDWGc::Dwg_Object_MATERIAL_map_utile_set;
*swig_translucence_get = *LibreDWGc::Dwg_Object_MATERIAL_translucence_get;
*swig_translucence_set = *LibreDWGc::Dwg_Object_MATERIAL_translucence_set;
*swig_self_illumination_get = *LibreDWGc::Dwg_Object_MATERIAL_self_illumination_get;
*swig_self_illumination_set = *LibreDWGc::Dwg_Object_MATERIAL_self_illumination_set;
*swig_reflectivity_get = *LibreDWGc::Dwg_Object_MATERIAL_reflectivity_get;
*swig_reflectivity_set = *LibreDWGc::Dwg_Object_MATERIAL_reflectivity_set;
*swig_illumination_model_get = *LibreDWGc::Dwg_Object_MATERIAL_illumination_model_get;
*swig_illumination_model_set = *LibreDWGc::Dwg_Object_MATERIAL_illumination_model_set;
*swig_channel_flags_get = *LibreDWGc::Dwg_Object_MATERIAL_channel_flags_get;
*swig_channel_flags_set = *LibreDWGc::Dwg_Object_MATERIAL_channel_flags_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_MATERIAL_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_MATERIAL_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_MATERIAL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_MATERIAL_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_MATERIAL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_MATERIAL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_PLOTSETTINGS ##############

package LibreDWG::Dwg_Object_PLOTSETTINGS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_parent_set;
*swig_page_setup_name_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_page_setup_name_get;
*swig_page_setup_name_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_page_setup_name_set;
*swig_printer_cfg_file_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_printer_cfg_file_get;
*swig_printer_cfg_file_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_printer_cfg_file_set;
*swig_paper_size_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_size_get;
*swig_paper_size_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_size_set;
*swig_plotview_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plotview_get;
*swig_plotview_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plotview_set;
*swig_left_margin_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_left_margin_get;
*swig_left_margin_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_left_margin_set;
*swig_bottom_margin_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_bottom_margin_get;
*swig_bottom_margin_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_bottom_margin_set;
*swig_right_margin_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_right_margin_get;
*swig_right_margin_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_right_margin_set;
*swig_top_margin_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_top_margin_get;
*swig_top_margin_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_top_margin_set;
*swig_paper_width_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_width_get;
*swig_paper_width_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_width_set;
*swig_paper_height_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_height_get;
*swig_paper_height_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_height_set;
*swig_plot_origin_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_origin_get;
*swig_plot_origin_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_origin_set;
*swig_plot_window_ll_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_window_ll_get;
*swig_plot_window_ll_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_window_ll_set;
*swig_plot_window_ur_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_window_ur_get;
*swig_plot_window_ur_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_window_ur_set;
*swig_num_custom_print_scale_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_num_custom_print_scale_get;
*swig_num_custom_print_scale_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_num_custom_print_scale_set;
*swig_den_custom_print_scale_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_den_custom_print_scale_get;
*swig_den_custom_print_scale_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_den_custom_print_scale_set;
*swig_plot_layout_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_layout_get;
*swig_plot_layout_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_layout_set;
*swig_plot_paper_units_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_paper_units_get;
*swig_plot_paper_units_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_paper_units_set;
*swig_plot_rotation_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_rotation_get;
*swig_plot_rotation_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_rotation_set;
*swig_plot_type_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_type_get;
*swig_plot_type_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_plot_type_set;
*swig_stylesheet_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_stylesheet_get;
*swig_stylesheet_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_stylesheet_set;
*swig_use_std_scale_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_use_std_scale_get;
*swig_use_std_scale_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_use_std_scale_set;
*swig_std_scale_type_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_std_scale_type_get;
*swig_std_scale_type_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_std_scale_type_set;
*swig_std_scale_factor_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_std_scale_factor_get;
*swig_std_scale_factor_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_std_scale_factor_set;
*swig_shade_plot_mode_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_mode_get;
*swig_shade_plot_mode_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_mode_set;
*swig_shade_plot_res_level_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_res_level_get;
*swig_shade_plot_res_level_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_res_level_set;
*swig_shade_plot_custom_dpi_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_custom_dpi_get;
*swig_shade_plot_custom_dpi_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_custom_dpi_set;
*swig_paper_image_origin_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_image_origin_get;
*swig_paper_image_origin_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_paper_image_origin_set;
*swig_shade_plot_id_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_id_get;
*swig_shade_plot_id_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_shade_plot_id_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_PLOTSETTINGS_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_PLOTSETTINGS_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_PLOTSETTINGS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_PLOTSETTINGS($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_OBJECT_PTR ##############

package LibreDWG::Dwg_Object_OBJECT_PTR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_OBJECT_PTR_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_OBJECT_PTR_parent_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_OBJECT_PTR_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_OBJECT_PTR_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_OBJECT_PTR_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_OBJECT_PTR_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_OBJECT_PTR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_OBJECT_PTR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_LIGHT ##############

package LibreDWG::Dwg_Entity_LIGHT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_LIGHT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_LIGHT_parent_set;
*swig_name_get = *LibreDWGc::Dwg_Entity_LIGHT_name_get;
*swig_name_set = *LibreDWGc::Dwg_Entity_LIGHT_name_set;
*swig_type_get = *LibreDWGc::Dwg_Entity_LIGHT_type_get;
*swig_type_set = *LibreDWGc::Dwg_Entity_LIGHT_type_set;
*swig_status_get = *LibreDWGc::Dwg_Entity_LIGHT_status_get;
*swig_status_set = *LibreDWGc::Dwg_Entity_LIGHT_status_set;
*swig_plot_glyph_get = *LibreDWGc::Dwg_Entity_LIGHT_plot_glyph_get;
*swig_plot_glyph_set = *LibreDWGc::Dwg_Entity_LIGHT_plot_glyph_set;
*swig_intensity_get = *LibreDWGc::Dwg_Entity_LIGHT_intensity_get;
*swig_intensity_set = *LibreDWGc::Dwg_Entity_LIGHT_intensity_set;
*swig_position_get = *LibreDWGc::Dwg_Entity_LIGHT_position_get;
*swig_position_set = *LibreDWGc::Dwg_Entity_LIGHT_position_set;
*swig_target_get = *LibreDWGc::Dwg_Entity_LIGHT_target_get;
*swig_target_set = *LibreDWGc::Dwg_Entity_LIGHT_target_set;
*swig_attenuation_type_get = *LibreDWGc::Dwg_Entity_LIGHT_attenuation_type_get;
*swig_attenuation_type_set = *LibreDWGc::Dwg_Entity_LIGHT_attenuation_type_set;
*swig_use_attenuation_limits_get = *LibreDWGc::Dwg_Entity_LIGHT_use_attenuation_limits_get;
*swig_use_attenuation_limits_set = *LibreDWGc::Dwg_Entity_LIGHT_use_attenuation_limits_set;
*swig_attenuation_start_limit_get = *LibreDWGc::Dwg_Entity_LIGHT_attenuation_start_limit_get;
*swig_attenuation_start_limit_set = *LibreDWGc::Dwg_Entity_LIGHT_attenuation_start_limit_set;
*swig_attenuation_end_limit_get = *LibreDWGc::Dwg_Entity_LIGHT_attenuation_end_limit_get;
*swig_attenuation_end_limit_set = *LibreDWGc::Dwg_Entity_LIGHT_attenuation_end_limit_set;
*swig_hotspot_angle_get = *LibreDWGc::Dwg_Entity_LIGHT_hotspot_angle_get;
*swig_hotspot_angle_set = *LibreDWGc::Dwg_Entity_LIGHT_hotspot_angle_set;
*swig_falloff_angle_get = *LibreDWGc::Dwg_Entity_LIGHT_falloff_angle_get;
*swig_falloff_angle_set = *LibreDWGc::Dwg_Entity_LIGHT_falloff_angle_set;
*swig_cast_shadows_get = *LibreDWGc::Dwg_Entity_LIGHT_cast_shadows_get;
*swig_cast_shadows_set = *LibreDWGc::Dwg_Entity_LIGHT_cast_shadows_set;
*swig_shadow_type_get = *LibreDWGc::Dwg_Entity_LIGHT_shadow_type_get;
*swig_shadow_type_set = *LibreDWGc::Dwg_Entity_LIGHT_shadow_type_set;
*swig_shadow_map_size_get = *LibreDWGc::Dwg_Entity_LIGHT_shadow_map_size_get;
*swig_shadow_map_size_set = *LibreDWGc::Dwg_Entity_LIGHT_shadow_map_size_set;
*swig_shadow_map_softness_get = *LibreDWGc::Dwg_Entity_LIGHT_shadow_map_softness_get;
*swig_shadow_map_softness_set = *LibreDWGc::Dwg_Entity_LIGHT_shadow_map_softness_set;
*swig_lamp_color_preset_get = *LibreDWGc::Dwg_Entity_LIGHT_lamp_color_preset_get;
*swig_lamp_color_preset_set = *LibreDWGc::Dwg_Entity_LIGHT_lamp_color_preset_set;
*swig_lamp_color_type_get = *LibreDWGc::Dwg_Entity_LIGHT_lamp_color_type_get;
*swig_lamp_color_type_set = *LibreDWGc::Dwg_Entity_LIGHT_lamp_color_type_set;
*swig_physical_intensity_method_get = *LibreDWGc::Dwg_Entity_LIGHT_physical_intensity_method_get;
*swig_physical_intensity_method_set = *LibreDWGc::Dwg_Entity_LIGHT_physical_intensity_method_set;
*swig_drawable_type_get = *LibreDWGc::Dwg_Entity_LIGHT_drawable_type_get;
*swig_drawable_type_set = *LibreDWGc::Dwg_Entity_LIGHT_drawable_type_set;
*swig_glyph_display_type_get = *LibreDWGc::Dwg_Entity_LIGHT_glyph_display_type_get;
*swig_glyph_display_type_set = *LibreDWGc::Dwg_Entity_LIGHT_glyph_display_type_set;
*swig_glyph_display_get = *LibreDWGc::Dwg_Entity_LIGHT_glyph_display_get;
*swig_glyph_display_set = *LibreDWGc::Dwg_Entity_LIGHT_glyph_display_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_LIGHT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_LIGHT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_CAMERA ##############

package LibreDWG::Dwg_Entity_CAMERA;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_CAMERA_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_CAMERA_parent_set;
*swig_view_get = *LibreDWGc::Dwg_Entity_CAMERA_view_get;
*swig_view_set = *LibreDWGc::Dwg_Entity_CAMERA_view_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_CAMERA(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_CAMERA($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_GEOPOSITIONMARKER ##############

package LibreDWG::Dwg_Entity_GEOPOSITIONMARKER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_parent_set;
*swig_type_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_type_get;
*swig_type_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_type_set;
*swig_position_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_position_get;
*swig_position_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_position_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_extrusion_set;
*swig_radius_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_radius_get;
*swig_radius_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_radius_set;
*swig_landing_gap_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_landing_gap_get;
*swig_landing_gap_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_landing_gap_set;
*swig_text_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_text_get;
*swig_text_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_text_set;
*swig_text_alignment_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_text_alignment_get;
*swig_text_alignment_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_text_alignment_set;
*swig_mtext_visible_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_mtext_visible_get;
*swig_mtext_visible_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_mtext_visible_set;
*swig_enable_frame_text_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_enable_frame_text_get;
*swig_enable_frame_text_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_enable_frame_text_set;
*swig_notes_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_notes_get;
*swig_notes_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_notes_set;
*swig_mtext_handle_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_mtext_handle_get;
*swig_mtext_handle_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_mtext_handle_set;
*swig_text_style_get = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_text_style_get;
*swig_text_style_set = *LibreDWGc::Dwg_Entity_GEOPOSITIONMARKER_text_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_GEOPOSITIONMARKER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_GEOPOSITIONMARKER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_HELIX ##############

package LibreDWG::Dwg_Entity_HELIX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_HELIX_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_HELIX_parent_set;
*swig_major_version_get = *LibreDWGc::Dwg_Entity_HELIX_major_version_get;
*swig_major_version_set = *LibreDWGc::Dwg_Entity_HELIX_major_version_set;
*swig_maint_version_get = *LibreDWGc::Dwg_Entity_HELIX_maint_version_get;
*swig_maint_version_set = *LibreDWGc::Dwg_Entity_HELIX_maint_version_set;
*swig_axis_base_pt_get = *LibreDWGc::Dwg_Entity_HELIX_axis_base_pt_get;
*swig_axis_base_pt_set = *LibreDWGc::Dwg_Entity_HELIX_axis_base_pt_set;
*swig_start_pt_get = *LibreDWGc::Dwg_Entity_HELIX_start_pt_get;
*swig_start_pt_set = *LibreDWGc::Dwg_Entity_HELIX_start_pt_set;
*swig_axis_vector_get = *LibreDWGc::Dwg_Entity_HELIX_axis_vector_get;
*swig_axis_vector_set = *LibreDWGc::Dwg_Entity_HELIX_axis_vector_set;
*swig_radius_get = *LibreDWGc::Dwg_Entity_HELIX_radius_get;
*swig_radius_set = *LibreDWGc::Dwg_Entity_HELIX_radius_set;
*swig_num_turns_get = *LibreDWGc::Dwg_Entity_HELIX_num_turns_get;
*swig_num_turns_set = *LibreDWGc::Dwg_Entity_HELIX_num_turns_set;
*swig_height_get = *LibreDWGc::Dwg_Entity_HELIX_height_get;
*swig_height_set = *LibreDWGc::Dwg_Entity_HELIX_height_set;
*swig_handedness_get = *LibreDWGc::Dwg_Entity_HELIX_handedness_get;
*swig_handedness_set = *LibreDWGc::Dwg_Entity_HELIX_handedness_set;
*swig_constraint_type_get = *LibreDWGc::Dwg_Entity_HELIX_constraint_type_get;
*swig_constraint_type_set = *LibreDWGc::Dwg_Entity_HELIX_constraint_type_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_HELIX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_HELIX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_SURFACE ##############

package LibreDWG::Dwg_Entity_SURFACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_SURFACE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_SURFACE_parent_set;
*swig_modeler_format_version_get = *LibreDWGc::Dwg_Entity_SURFACE_modeler_format_version_get;
*swig_modeler_format_version_set = *LibreDWGc::Dwg_Entity_SURFACE_modeler_format_version_set;
*swig_u_isolines_get = *LibreDWGc::Dwg_Entity_SURFACE_u_isolines_get;
*swig_u_isolines_set = *LibreDWGc::Dwg_Entity_SURFACE_u_isolines_set;
*swig_v_isolines_get = *LibreDWGc::Dwg_Entity_SURFACE_v_isolines_get;
*swig_v_isolines_set = *LibreDWGc::Dwg_Entity_SURFACE_v_isolines_set;
*swig_class_version_get = *LibreDWGc::Dwg_Entity_SURFACE_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Entity_SURFACE_class_version_set;
*swig_height_get = *LibreDWGc::Dwg_Entity_SURFACE_height_get;
*swig_height_set = *LibreDWGc::Dwg_Entity_SURFACE_height_set;
*swig_sweep_vector_get = *LibreDWGc::Dwg_Entity_SURFACE_sweep_vector_get;
*swig_sweep_vector_set = *LibreDWGc::Dwg_Entity_SURFACE_sweep_vector_set;
*swig_sweep_transmatrix_get = *LibreDWGc::Dwg_Entity_SURFACE_sweep_transmatrix_get;
*swig_sweep_transmatrix_set = *LibreDWGc::Dwg_Entity_SURFACE_sweep_transmatrix_set;
*swig_draft_angle_get = *LibreDWGc::Dwg_Entity_SURFACE_draft_angle_get;
*swig_draft_angle_set = *LibreDWGc::Dwg_Entity_SURFACE_draft_angle_set;
*swig_draft_start_distance_get = *LibreDWGc::Dwg_Entity_SURFACE_draft_start_distance_get;
*swig_draft_start_distance_set = *LibreDWGc::Dwg_Entity_SURFACE_draft_start_distance_set;
*swig_draft_end_distance_get = *LibreDWGc::Dwg_Entity_SURFACE_draft_end_distance_get;
*swig_draft_end_distance_set = *LibreDWGc::Dwg_Entity_SURFACE_draft_end_distance_set;
*swig_twist_angle_get = *LibreDWGc::Dwg_Entity_SURFACE_twist_angle_get;
*swig_twist_angle_set = *LibreDWGc::Dwg_Entity_SURFACE_twist_angle_set;
*swig_scale_factor_get = *LibreDWGc::Dwg_Entity_SURFACE_scale_factor_get;
*swig_scale_factor_set = *LibreDWGc::Dwg_Entity_SURFACE_scale_factor_set;
*swig_align_angle_get = *LibreDWGc::Dwg_Entity_SURFACE_align_angle_get;
*swig_align_angle_set = *LibreDWGc::Dwg_Entity_SURFACE_align_angle_set;
*swig_sweep_entity_transmatrix_get = *LibreDWGc::Dwg_Entity_SURFACE_sweep_entity_transmatrix_get;
*swig_sweep_entity_transmatrix_set = *LibreDWGc::Dwg_Entity_SURFACE_sweep_entity_transmatrix_set;
*swig_path_entity_transmatrix_get = *LibreDWGc::Dwg_Entity_SURFACE_path_entity_transmatrix_get;
*swig_path_entity_transmatrix_set = *LibreDWGc::Dwg_Entity_SURFACE_path_entity_transmatrix_set;
*swig_solid_get = *LibreDWGc::Dwg_Entity_SURFACE_solid_get;
*swig_solid_set = *LibreDWGc::Dwg_Entity_SURFACE_solid_set;
*swig_sweep_alignment_flags_get = *LibreDWGc::Dwg_Entity_SURFACE_sweep_alignment_flags_get;
*swig_sweep_alignment_flags_set = *LibreDWGc::Dwg_Entity_SURFACE_sweep_alignment_flags_set;
*swig_align_start_get = *LibreDWGc::Dwg_Entity_SURFACE_align_start_get;
*swig_align_start_set = *LibreDWGc::Dwg_Entity_SURFACE_align_start_set;
*swig_bank_get = *LibreDWGc::Dwg_Entity_SURFACE_bank_get;
*swig_bank_set = *LibreDWGc::Dwg_Entity_SURFACE_bank_set;
*swig_base_point_set_get = *LibreDWGc::Dwg_Entity_SURFACE_base_point_set_get;
*swig_base_point_set_set = *LibreDWGc::Dwg_Entity_SURFACE_base_point_set_set;
*swig_sweep_entity_transform_computed_get = *LibreDWGc::Dwg_Entity_SURFACE_sweep_entity_transform_computed_get;
*swig_sweep_entity_transform_computed_set = *LibreDWGc::Dwg_Entity_SURFACE_sweep_entity_transform_computed_set;
*swig_path_entity_transform_computed_get = *LibreDWGc::Dwg_Entity_SURFACE_path_entity_transform_computed_get;
*swig_path_entity_transform_computed_set = *LibreDWGc::Dwg_Entity_SURFACE_path_entity_transform_computed_set;
*swig_reference_vector_for_controlling_twist_get = *LibreDWGc::Dwg_Entity_SURFACE_reference_vector_for_controlling_twist_get;
*swig_reference_vector_for_controlling_twist_set = *LibreDWGc::Dwg_Entity_SURFACE_reference_vector_for_controlling_twist_set;
*swig_sweep_entity_get = *LibreDWGc::Dwg_Entity_SURFACE_sweep_entity_get;
*swig_sweep_entity_set = *LibreDWGc::Dwg_Entity_SURFACE_sweep_entity_set;
*swig_path_entity_get = *LibreDWGc::Dwg_Entity_SURFACE_path_entity_get;
*swig_path_entity_set = *LibreDWGc::Dwg_Entity_SURFACE_path_entity_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_SURFACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_SURFACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_UNDERLAY_Boundary ##############

package LibreDWG::Dwg_UNDERLAY_Boundary;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_UNDERLAY_Boundary_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_UNDERLAY_Boundary_parent_set;
*swig_pt_get = *LibreDWGc::Dwg_UNDERLAY_Boundary_pt_get;
*swig_pt_set = *LibreDWGc::Dwg_UNDERLAY_Boundary_pt_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_UNDERLAY_Boundary(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_UNDERLAY_Boundary($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_UNDERLAY ##############

package LibreDWG::Dwg_Entity_UNDERLAY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_UNDERLAY_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_UNDERLAY_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Entity_UNDERLAY_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Entity_UNDERLAY_flag_set;
*swig_insertion_pt_get = *LibreDWGc::Dwg_Entity_UNDERLAY_insertion_pt_get;
*swig_insertion_pt_set = *LibreDWGc::Dwg_Entity_UNDERLAY_insertion_pt_set;
*swig_scale_get = *LibreDWGc::Dwg_Entity_UNDERLAY_scale_get;
*swig_scale_set = *LibreDWGc::Dwg_Entity_UNDERLAY_scale_set;
*swig_angle_get = *LibreDWGc::Dwg_Entity_UNDERLAY_angle_get;
*swig_angle_set = *LibreDWGc::Dwg_Entity_UNDERLAY_angle_set;
*swig_extrusion_get = *LibreDWGc::Dwg_Entity_UNDERLAY_extrusion_get;
*swig_extrusion_set = *LibreDWGc::Dwg_Entity_UNDERLAY_extrusion_set;
*swig_contrast_get = *LibreDWGc::Dwg_Entity_UNDERLAY_contrast_get;
*swig_contrast_set = *LibreDWGc::Dwg_Entity_UNDERLAY_contrast_set;
*swig_fade_get = *LibreDWGc::Dwg_Entity_UNDERLAY_fade_get;
*swig_fade_set = *LibreDWGc::Dwg_Entity_UNDERLAY_fade_set;
*swig_num_clip_boundary_get = *LibreDWGc::Dwg_Entity_UNDERLAY_num_clip_boundary_get;
*swig_num_clip_boundary_set = *LibreDWGc::Dwg_Entity_UNDERLAY_num_clip_boundary_set;
*swig_clip_boundary_get = *LibreDWGc::Dwg_Entity_UNDERLAY_clip_boundary_get;
*swig_clip_boundary_set = *LibreDWGc::Dwg_Entity_UNDERLAY_clip_boundary_set;
*swig_definition_id_get = *LibreDWGc::Dwg_Entity_UNDERLAY_definition_id_get;
*swig_definition_id_set = *LibreDWGc::Dwg_Entity_UNDERLAY_definition_id_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Entity_UNDERLAY_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Entity_UNDERLAY_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_UNDERLAY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_UNDERLAY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_SUN ##############

package LibreDWG::Dwg_Object_SUN;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_SUN_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_SUN_parent_set;
*swig_flag_get = *LibreDWGc::Dwg_Object_SUN_flag_get;
*swig_flag_set = *LibreDWGc::Dwg_Object_SUN_flag_set;
*swig_entry_name_get = *LibreDWGc::Dwg_Object_SUN_entry_name_get;
*swig_entry_name_set = *LibreDWGc::Dwg_Object_SUN_entry_name_set;
*swig_used_get = *LibreDWGc::Dwg_Object_SUN_used_get;
*swig_used_set = *LibreDWGc::Dwg_Object_SUN_used_set;
*swig_xrefref_get = *LibreDWGc::Dwg_Object_SUN_xrefref_get;
*swig_xrefref_set = *LibreDWGc::Dwg_Object_SUN_xrefref_set;
*swig_xrefindex_plus1_get = *LibreDWGc::Dwg_Object_SUN_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDWGc::Dwg_Object_SUN_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDWGc::Dwg_Object_SUN_xrefdep_get;
*swig_xrefdep_set = *LibreDWGc::Dwg_Object_SUN_xrefdep_set;
*swig_class_version_get = *LibreDWGc::Dwg_Object_SUN_class_version_get;
*swig_class_version_set = *LibreDWGc::Dwg_Object_SUN_class_version_set;
*swig_is_on_get = *LibreDWGc::Dwg_Object_SUN_is_on_get;
*swig_is_on_set = *LibreDWGc::Dwg_Object_SUN_is_on_set;
*swig_color_get = *LibreDWGc::Dwg_Object_SUN_color_get;
*swig_color_set = *LibreDWGc::Dwg_Object_SUN_color_set;
*swig_intensity_get = *LibreDWGc::Dwg_Object_SUN_intensity_get;
*swig_intensity_set = *LibreDWGc::Dwg_Object_SUN_intensity_set;
*swig_julian_day_get = *LibreDWGc::Dwg_Object_SUN_julian_day_get;
*swig_julian_day_set = *LibreDWGc::Dwg_Object_SUN_julian_day_set;
*swig_time_get = *LibreDWGc::Dwg_Object_SUN_time_get;
*swig_time_set = *LibreDWGc::Dwg_Object_SUN_time_set;
*swig_is_dst_get = *LibreDWGc::Dwg_Object_SUN_is_dst_get;
*swig_is_dst_set = *LibreDWGc::Dwg_Object_SUN_is_dst_set;
*swig_has_shadow_get = *LibreDWGc::Dwg_Object_SUN_has_shadow_get;
*swig_has_shadow_set = *LibreDWGc::Dwg_Object_SUN_has_shadow_set;
*swig_shadow_type_get = *LibreDWGc::Dwg_Object_SUN_shadow_type_get;
*swig_shadow_type_set = *LibreDWGc::Dwg_Object_SUN_shadow_type_set;
*swig_shadow_mapsize_get = *LibreDWGc::Dwg_Object_SUN_shadow_mapsize_get;
*swig_shadow_mapsize_set = *LibreDWGc::Dwg_Object_SUN_shadow_mapsize_set;
*swig_shadow_softness_get = *LibreDWGc::Dwg_Object_SUN_shadow_softness_get;
*swig_shadow_softness_set = *LibreDWGc::Dwg_Object_SUN_shadow_softness_set;
*swig_num_bytes_get = *LibreDWGc::Dwg_Object_SUN_num_bytes_get;
*swig_num_bytes_set = *LibreDWGc::Dwg_Object_SUN_num_bytes_set;
*swig_bytes_get = *LibreDWGc::Dwg_Object_SUN_bytes_get;
*swig_bytes_set = *LibreDWGc::Dwg_Object_SUN_bytes_set;
*swig_num_bits_get = *LibreDWGc::Dwg_Object_SUN_num_bits_get;
*swig_num_bits_set = *LibreDWGc::Dwg_Object_SUN_num_bits_set;
*swig_bits_get = *LibreDWGc::Dwg_Object_SUN_bits_get;
*swig_bits_set = *LibreDWGc::Dwg_Object_SUN_bits_set;
*swig_skyparams_get = *LibreDWGc::Dwg_Object_SUN_skyparams_get;
*swig_skyparams_set = *LibreDWGc::Dwg_Object_SUN_skyparams_set;
*swig_parenthandle_get = *LibreDWGc::Dwg_Object_SUN_parenthandle_get;
*swig_parenthandle_set = *LibreDWGc::Dwg_Object_SUN_parenthandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_SUN(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_SUN($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_DATATABLE ##############

package LibreDWG::Dwg_Object_DATATABLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_DATATABLE_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_DATATABLE_parent_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_DATATABLE_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_DATATABLE_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_DATATABLE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_DATATABLE_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_DATATABLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_DATATABLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Entity_UNKNOWN_ENT ##############

package LibreDWG::Dwg_Entity_UNKNOWN_ENT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_parent_set;
*swig_num_bytes_get = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_num_bytes_get;
*swig_num_bytes_set = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_num_bytes_set;
*swig_bytes_get = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_bytes_get;
*swig_bytes_set = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_bytes_set;
*swig_num_bits_get = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_num_bits_get;
*swig_num_bits_set = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_num_bits_set;
*swig_bits_get = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_bits_get;
*swig_bits_set = *LibreDWGc::Dwg_Entity_UNKNOWN_ENT_bits_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Entity_UNKNOWN_ENT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Entity_UNKNOWN_ENT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_UNKNOWN_OBJ ##############

package LibreDWG::Dwg_Object_UNKNOWN_OBJ;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_parent_get = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_parent_set;
*swig_num_bytes_get = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_num_bytes_get;
*swig_num_bytes_set = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_num_bytes_set;
*swig_bytes_get = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_bytes_get;
*swig_bytes_set = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_bytes_set;
*swig_num_bits_get = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_num_bits_get;
*swig_num_bits_set = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_num_bits_set;
*swig_bits_get = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_bits_get;
*swig_bits_set = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_bits_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_UNKNOWN_OBJ_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_UNKNOWN_OBJ(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_UNKNOWN_OBJ($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Eed_Data ##############

package LibreDWG::Dwg_Eed_Data;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_u_get = *LibreDWGc::Dwg_Eed_Data_u_get;
*swig_u_set = *LibreDWGc::Dwg_Eed_Data_u_set;
*swig_code_get = *LibreDWGc::Dwg_Eed_Data_code_get;
*swig_code_set = *LibreDWGc::Dwg_Eed_Data_code_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Eed_Data(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Eed_Data($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t ##############

package LibreDWG::eed_data_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_eed_0_get = *LibreDWGc::eed_data_t_eed_0_get;
*swig_eed_0_set = *LibreDWGc::eed_data_t_eed_0_set;
*swig_eed_0_r2007_get = *LibreDWGc::eed_data_t_eed_0_r2007_get;
*swig_eed_0_r2007_set = *LibreDWGc::eed_data_t_eed_0_r2007_set;
*swig_eed_1_get = *LibreDWGc::eed_data_t_eed_1_get;
*swig_eed_1_set = *LibreDWGc::eed_data_t_eed_1_set;
*swig_eed_2_get = *LibreDWGc::eed_data_t_eed_2_get;
*swig_eed_2_set = *LibreDWGc::eed_data_t_eed_2_set;
*swig_eed_3_get = *LibreDWGc::eed_data_t_eed_3_get;
*swig_eed_3_set = *LibreDWGc::eed_data_t_eed_3_set;
*swig_eed_4_get = *LibreDWGc::eed_data_t_eed_4_get;
*swig_eed_4_set = *LibreDWGc::eed_data_t_eed_4_set;
*swig_eed_5_get = *LibreDWGc::eed_data_t_eed_5_get;
*swig_eed_5_set = *LibreDWGc::eed_data_t_eed_5_set;
*swig_eed_10_get = *LibreDWGc::eed_data_t_eed_10_get;
*swig_eed_10_set = *LibreDWGc::eed_data_t_eed_10_set;
*swig_eed_40_get = *LibreDWGc::eed_data_t_eed_40_get;
*swig_eed_40_set = *LibreDWGc::eed_data_t_eed_40_set;
*swig_eed_70_get = *LibreDWGc::eed_data_t_eed_70_get;
*swig_eed_70_set = *LibreDWGc::eed_data_t_eed_70_set;
*swig_eed_71_get = *LibreDWGc::eed_data_t_eed_71_get;
*swig_eed_71_set = *LibreDWGc::eed_data_t_eed_71_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_71 ##############

package LibreDWG::eed_data_t_eed_71;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_rl_get = *LibreDWGc::eed_data_t_eed_71_rl_get;
*swig_rl_set = *LibreDWGc::eed_data_t_eed_71_rl_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_71(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_71($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_70 ##############

package LibreDWG::eed_data_t_eed_70;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_rs_get = *LibreDWGc::eed_data_t_eed_70_rs_get;
*swig_rs_set = *LibreDWGc::eed_data_t_eed_70_rs_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_70(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_70($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_40 ##############

package LibreDWG::eed_data_t_eed_40;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_real_get = *LibreDWGc::eed_data_t_eed_40_real_get;
*swig_real_set = *LibreDWGc::eed_data_t_eed_40_real_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_40(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_40($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_10 ##############

package LibreDWG::eed_data_t_eed_10;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_point_get = *LibreDWGc::eed_data_t_eed_10_point_get;
*swig_point_set = *LibreDWGc::eed_data_t_eed_10_point_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_10(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_10($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_5 ##############

package LibreDWG::eed_data_t_eed_5;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_entity_get = *LibreDWGc::eed_data_t_eed_5_entity_get;
*swig_entity_set = *LibreDWGc::eed_data_t_eed_5_entity_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_5(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_5($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_4 ##############

package LibreDWG::eed_data_t_eed_4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_length_get = *LibreDWGc::eed_data_t_eed_4_length_get;
*swig_length_set = *LibreDWGc::eed_data_t_eed_4_length_set;
*swig_data_get = *LibreDWGc::eed_data_t_eed_4_data_get;
*swig_data_set = *LibreDWGc::eed_data_t_eed_4_data_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_3 ##############

package LibreDWG::eed_data_t_eed_3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_layer_get = *LibreDWGc::eed_data_t_eed_3_layer_get;
*swig_layer_set = *LibreDWGc::eed_data_t_eed_3_layer_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_2 ##############

package LibreDWG::eed_data_t_eed_2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_byte_get = *LibreDWGc::eed_data_t_eed_2_byte_get;
*swig_byte_set = *LibreDWGc::eed_data_t_eed_2_byte_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_1 ##############

package LibreDWG::eed_data_t_eed_1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_invalid_get = *LibreDWGc::eed_data_t_eed_1_invalid_get;
*swig_invalid_set = *LibreDWGc::eed_data_t_eed_1_invalid_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_0_r2007 ##############

package LibreDWG::eed_data_t_eed_0_r2007;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_length_get = *LibreDWGc::eed_data_t_eed_0_r2007_length_get;
*swig_length_set = *LibreDWGc::eed_data_t_eed_0_r2007_length_set;
*swig_string_get = *LibreDWGc::eed_data_t_eed_0_r2007_string_get;
*swig_string_set = *LibreDWGc::eed_data_t_eed_0_r2007_string_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_0_r2007(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_0_r2007($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::eed_data_t_eed_0 ##############

package LibreDWG::eed_data_t_eed_0;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_length_get = *LibreDWGc::eed_data_t_eed_0_length_get;
*swig_length_set = *LibreDWGc::eed_data_t_eed_0_length_set;
*swig_codepage_get = *LibreDWGc::eed_data_t_eed_0_codepage_get;
*swig_codepage_set = *LibreDWGc::eed_data_t_eed_0_codepage_set;
*swig_string_get = *LibreDWGc::eed_data_t_eed_0_string_get;
*swig_string_set = *LibreDWGc::eed_data_t_eed_0_string_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_eed_data_t_eed_0(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_eed_data_t_eed_0($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Eed ##############

package LibreDWG::Dwg_Eed;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDWGc::Dwg_Eed_size_get;
*swig_size_set = *LibreDWGc::Dwg_Eed_size_set;
*swig_handle_get = *LibreDWGc::Dwg_Eed_handle_get;
*swig_handle_set = *LibreDWGc::Dwg_Eed_handle_set;
*swig_data_get = *LibreDWGc::Dwg_Eed_data_get;
*swig_data_set = *LibreDWGc::Dwg_Eed_data_set;
*swig_raw_get = *LibreDWGc::Dwg_Eed_raw_get;
*swig_raw_set = *LibreDWGc::Dwg_Eed_raw_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Eed(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Eed($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_Entity ##############

package LibreDWG::Dwg_Object_Entity;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_objid_get = *LibreDWGc::Dwg_Object_Entity_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_Entity_objid_set;
*swig_tio_get = *LibreDWGc::Dwg_Object_Entity_tio_get;
*swig_tio_set = *LibreDWGc::Dwg_Object_Entity_tio_set;
*swig_dwg_get = *LibreDWGc::Dwg_Object_Entity_dwg_get;
*swig_dwg_set = *LibreDWGc::Dwg_Object_Entity_dwg_set;
*swig_num_eed_get = *LibreDWGc::Dwg_Object_Entity_num_eed_get;
*swig_num_eed_set = *LibreDWGc::Dwg_Object_Entity_num_eed_set;
*swig_eed_get = *LibreDWGc::Dwg_Object_Entity_eed_get;
*swig_eed_set = *LibreDWGc::Dwg_Object_Entity_eed_set;
*swig_picture_exists_get = *LibreDWGc::Dwg_Object_Entity_picture_exists_get;
*swig_picture_exists_set = *LibreDWGc::Dwg_Object_Entity_picture_exists_set;
*swig_picture_size_get = *LibreDWGc::Dwg_Object_Entity_picture_size_get;
*swig_picture_size_set = *LibreDWGc::Dwg_Object_Entity_picture_size_set;
*swig_picture_get = *LibreDWGc::Dwg_Object_Entity_picture_get;
*swig_picture_set = *LibreDWGc::Dwg_Object_Entity_picture_set;
*swig_entity_mode_get = *LibreDWGc::Dwg_Object_Entity_entity_mode_get;
*swig_entity_mode_set = *LibreDWGc::Dwg_Object_Entity_entity_mode_set;
*swig_num_reactors_get = *LibreDWGc::Dwg_Object_Entity_num_reactors_get;
*swig_num_reactors_set = *LibreDWGc::Dwg_Object_Entity_num_reactors_set;
*swig_xdic_missing_flag_get = *LibreDWGc::Dwg_Object_Entity_xdic_missing_flag_get;
*swig_xdic_missing_flag_set = *LibreDWGc::Dwg_Object_Entity_xdic_missing_flag_set;
*swig_has_ds_binary_data_get = *LibreDWGc::Dwg_Object_Entity_has_ds_binary_data_get;
*swig_has_ds_binary_data_set = *LibreDWGc::Dwg_Object_Entity_has_ds_binary_data_set;
*swig_isbylayerlt_get = *LibreDWGc::Dwg_Object_Entity_isbylayerlt_get;
*swig_isbylayerlt_set = *LibreDWGc::Dwg_Object_Entity_isbylayerlt_set;
*swig_nolinks_get = *LibreDWGc::Dwg_Object_Entity_nolinks_get;
*swig_nolinks_set = *LibreDWGc::Dwg_Object_Entity_nolinks_set;
*swig_color_get = *LibreDWGc::Dwg_Object_Entity_color_get;
*swig_color_set = *LibreDWGc::Dwg_Object_Entity_color_set;
*swig_linetype_scale_get = *LibreDWGc::Dwg_Object_Entity_linetype_scale_get;
*swig_linetype_scale_set = *LibreDWGc::Dwg_Object_Entity_linetype_scale_set;
*swig_linetype_flags_get = *LibreDWGc::Dwg_Object_Entity_linetype_flags_get;
*swig_linetype_flags_set = *LibreDWGc::Dwg_Object_Entity_linetype_flags_set;
*swig_plotstyle_flags_get = *LibreDWGc::Dwg_Object_Entity_plotstyle_flags_get;
*swig_plotstyle_flags_set = *LibreDWGc::Dwg_Object_Entity_plotstyle_flags_set;
*swig_material_flags_get = *LibreDWGc::Dwg_Object_Entity_material_flags_get;
*swig_material_flags_set = *LibreDWGc::Dwg_Object_Entity_material_flags_set;
*swig_shadow_flags_get = *LibreDWGc::Dwg_Object_Entity_shadow_flags_get;
*swig_shadow_flags_set = *LibreDWGc::Dwg_Object_Entity_shadow_flags_set;
*swig_has_full_visualstyle_get = *LibreDWGc::Dwg_Object_Entity_has_full_visualstyle_get;
*swig_has_full_visualstyle_set = *LibreDWGc::Dwg_Object_Entity_has_full_visualstyle_set;
*swig_has_face_visualstyle_get = *LibreDWGc::Dwg_Object_Entity_has_face_visualstyle_get;
*swig_has_face_visualstyle_set = *LibreDWGc::Dwg_Object_Entity_has_face_visualstyle_set;
*swig_has_edge_visualstyle_get = *LibreDWGc::Dwg_Object_Entity_has_edge_visualstyle_get;
*swig_has_edge_visualstyle_set = *LibreDWGc::Dwg_Object_Entity_has_edge_visualstyle_set;
*swig_invisible_get = *LibreDWGc::Dwg_Object_Entity_invisible_get;
*swig_invisible_set = *LibreDWGc::Dwg_Object_Entity_invisible_set;
*swig_lineweight_get = *LibreDWGc::Dwg_Object_Entity_lineweight_get;
*swig_lineweight_set = *LibreDWGc::Dwg_Object_Entity_lineweight_set;
*swig_flag_r11_get = *LibreDWGc::Dwg_Object_Entity_flag_r11_get;
*swig_flag_r11_set = *LibreDWGc::Dwg_Object_Entity_flag_r11_set;
*swig_kind_r11_get = *LibreDWGc::Dwg_Object_Entity_kind_r11_get;
*swig_kind_r11_set = *LibreDWGc::Dwg_Object_Entity_kind_r11_set;
*swig_opts_r11_get = *LibreDWGc::Dwg_Object_Entity_opts_r11_get;
*swig_opts_r11_set = *LibreDWGc::Dwg_Object_Entity_opts_r11_set;
*swig_extra_r11_get = *LibreDWGc::Dwg_Object_Entity_extra_r11_get;
*swig_extra_r11_set = *LibreDWGc::Dwg_Object_Entity_extra_r11_set;
*swig_layer_r11_get = *LibreDWGc::Dwg_Object_Entity_layer_r11_get;
*swig_layer_r11_set = *LibreDWGc::Dwg_Object_Entity_layer_r11_set;
*swig_color_r11_get = *LibreDWGc::Dwg_Object_Entity_color_r11_get;
*swig_color_r11_set = *LibreDWGc::Dwg_Object_Entity_color_r11_set;
*swig_linetype_r11_get = *LibreDWGc::Dwg_Object_Entity_linetype_r11_get;
*swig_linetype_r11_set = *LibreDWGc::Dwg_Object_Entity_linetype_r11_set;
*swig_elevation_r11_get = *LibreDWGc::Dwg_Object_Entity_elevation_r11_get;
*swig_elevation_r11_set = *LibreDWGc::Dwg_Object_Entity_elevation_r11_set;
*swig_thickness_r11_get = *LibreDWGc::Dwg_Object_Entity_thickness_r11_get;
*swig_thickness_r11_set = *LibreDWGc::Dwg_Object_Entity_thickness_r11_set;
*swig_paper_r11_get = *LibreDWGc::Dwg_Object_Entity_paper_r11_get;
*swig_paper_r11_set = *LibreDWGc::Dwg_Object_Entity_paper_r11_set;
*swig_subentity_get = *LibreDWGc::Dwg_Object_Entity_subentity_get;
*swig_subentity_set = *LibreDWGc::Dwg_Object_Entity_subentity_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_Entity_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_Entity_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_Entity_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_Entity_xdicobjhandle_set;
*swig_prev_entity_get = *LibreDWGc::Dwg_Object_Entity_prev_entity_get;
*swig_prev_entity_set = *LibreDWGc::Dwg_Object_Entity_prev_entity_set;
*swig_next_entity_get = *LibreDWGc::Dwg_Object_Entity_next_entity_get;
*swig_next_entity_set = *LibreDWGc::Dwg_Object_Entity_next_entity_set;
*swig_color_handle_get = *LibreDWGc::Dwg_Object_Entity_color_handle_get;
*swig_color_handle_set = *LibreDWGc::Dwg_Object_Entity_color_handle_set;
*swig_layer_get = *LibreDWGc::Dwg_Object_Entity_layer_get;
*swig_layer_set = *LibreDWGc::Dwg_Object_Entity_layer_set;
*swig_ltype_get = *LibreDWGc::Dwg_Object_Entity_ltype_get;
*swig_ltype_set = *LibreDWGc::Dwg_Object_Entity_ltype_set;
*swig_material_get = *LibreDWGc::Dwg_Object_Entity_material_get;
*swig_material_set = *LibreDWGc::Dwg_Object_Entity_material_set;
*swig_shadow_get = *LibreDWGc::Dwg_Object_Entity_shadow_get;
*swig_shadow_set = *LibreDWGc::Dwg_Object_Entity_shadow_set;
*swig_plotstyle_get = *LibreDWGc::Dwg_Object_Entity_plotstyle_get;
*swig_plotstyle_set = *LibreDWGc::Dwg_Object_Entity_plotstyle_set;
*swig_full_visualstyle_get = *LibreDWGc::Dwg_Object_Entity_full_visualstyle_get;
*swig_full_visualstyle_set = *LibreDWGc::Dwg_Object_Entity_full_visualstyle_set;
*swig_face_visualstyle_get = *LibreDWGc::Dwg_Object_Entity_face_visualstyle_get;
*swig_face_visualstyle_set = *LibreDWGc::Dwg_Object_Entity_face_visualstyle_set;
*swig_edge_visualstyle_get = *LibreDWGc::Dwg_Object_Entity_edge_visualstyle_get;
*swig_edge_visualstyle_set = *LibreDWGc::Dwg_Object_Entity_edge_visualstyle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_Entity(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_Entity($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_object_entity_tio ##############

package LibreDWG::_dwg_object_entity_tio;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_UNUSED_get = *LibreDWGc::_dwg_object_entity_tio_UNUSED_get;
*swig_UNUSED_set = *LibreDWGc::_dwg_object_entity_tio_UNUSED_set;
*swig_TEXT_get = *LibreDWGc::_dwg_object_entity_tio_TEXT_get;
*swig_TEXT_set = *LibreDWGc::_dwg_object_entity_tio_TEXT_set;
*swig_ATTRIB_get = *LibreDWGc::_dwg_object_entity_tio_ATTRIB_get;
*swig_ATTRIB_set = *LibreDWGc::_dwg_object_entity_tio_ATTRIB_set;
*swig_ATTDEF_get = *LibreDWGc::_dwg_object_entity_tio_ATTDEF_get;
*swig_ATTDEF_set = *LibreDWGc::_dwg_object_entity_tio_ATTDEF_set;
*swig_BLOCK_get = *LibreDWGc::_dwg_object_entity_tio_BLOCK_get;
*swig_BLOCK_set = *LibreDWGc::_dwg_object_entity_tio_BLOCK_set;
*swig_ENDBLK_get = *LibreDWGc::_dwg_object_entity_tio_ENDBLK_get;
*swig_ENDBLK_set = *LibreDWGc::_dwg_object_entity_tio_ENDBLK_set;
*swig_SEQEND_get = *LibreDWGc::_dwg_object_entity_tio_SEQEND_get;
*swig_SEQEND_set = *LibreDWGc::_dwg_object_entity_tio_SEQEND_set;
*swig_INSERT_get = *LibreDWGc::_dwg_object_entity_tio_INSERT_get;
*swig_INSERT_set = *LibreDWGc::_dwg_object_entity_tio_INSERT_set;
*swig_MINSERT_get = *LibreDWGc::_dwg_object_entity_tio_MINSERT_get;
*swig_MINSERT_set = *LibreDWGc::_dwg_object_entity_tio_MINSERT_set;
*swig_VERTEX_2D_get = *LibreDWGc::_dwg_object_entity_tio_VERTEX_2D_get;
*swig_VERTEX_2D_set = *LibreDWGc::_dwg_object_entity_tio_VERTEX_2D_set;
*swig_VERTEX_3D_get = *LibreDWGc::_dwg_object_entity_tio_VERTEX_3D_get;
*swig_VERTEX_3D_set = *LibreDWGc::_dwg_object_entity_tio_VERTEX_3D_set;
*swig_VERTEX_MESH_get = *LibreDWGc::_dwg_object_entity_tio_VERTEX_MESH_get;
*swig_VERTEX_MESH_set = *LibreDWGc::_dwg_object_entity_tio_VERTEX_MESH_set;
*swig_VERTEX_PFACE_get = *LibreDWGc::_dwg_object_entity_tio_VERTEX_PFACE_get;
*swig_VERTEX_PFACE_set = *LibreDWGc::_dwg_object_entity_tio_VERTEX_PFACE_set;
*swig_VERTEX_PFACE_FACE_get = *LibreDWGc::_dwg_object_entity_tio_VERTEX_PFACE_FACE_get;
*swig_VERTEX_PFACE_FACE_set = *LibreDWGc::_dwg_object_entity_tio_VERTEX_PFACE_FACE_set;
*swig_POLYLINE_2D_get = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_2D_get;
*swig_POLYLINE_2D_set = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_2D_set;
*swig_POLYLINE_3D_get = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_3D_get;
*swig_POLYLINE_3D_set = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_3D_set;
*swig_ARC_get = *LibreDWGc::_dwg_object_entity_tio_ARC_get;
*swig_ARC_set = *LibreDWGc::_dwg_object_entity_tio_ARC_set;
*swig_CIRCLE_get = *LibreDWGc::_dwg_object_entity_tio_CIRCLE_get;
*swig_CIRCLE_set = *LibreDWGc::_dwg_object_entity_tio_CIRCLE_set;
*swig_LINE_get = *LibreDWGc::_dwg_object_entity_tio_LINE_get;
*swig_LINE_set = *LibreDWGc::_dwg_object_entity_tio_LINE_set;
*swig_DIMENSION_common_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_common_get;
*swig_DIMENSION_common_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_common_set;
*swig_DIMENSION_ORDINATE_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ORDINATE_get;
*swig_DIMENSION_ORDINATE_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ORDINATE_set;
*swig_DIMENSION_LINEAR_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_LINEAR_get;
*swig_DIMENSION_LINEAR_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_LINEAR_set;
*swig_DIMENSION_ALIGNED_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ALIGNED_get;
*swig_DIMENSION_ALIGNED_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ALIGNED_set;
*swig_DIMENSION_ANG3PT_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ANG3PT_get;
*swig_DIMENSION_ANG3PT_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ANG3PT_set;
*swig_DIMENSION_ANG2LN_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ANG2LN_get;
*swig_DIMENSION_ANG2LN_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_ANG2LN_set;
*swig_DIMENSION_RADIUS_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_RADIUS_get;
*swig_DIMENSION_RADIUS_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_RADIUS_set;
*swig_DIMENSION_DIAMETER_get = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_DIAMETER_get;
*swig_DIMENSION_DIAMETER_set = *LibreDWGc::_dwg_object_entity_tio_DIMENSION_DIAMETER_set;
*swig_POINT_get = *LibreDWGc::_dwg_object_entity_tio_POINT_get;
*swig_POINT_set = *LibreDWGc::_dwg_object_entity_tio_POINT_set;
*swig__3DFACE_get = *LibreDWGc::_dwg_object_entity_tio__3DFACE_get;
*swig__3DFACE_set = *LibreDWGc::_dwg_object_entity_tio__3DFACE_set;
*swig_POLYLINE_PFACE_get = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_PFACE_get;
*swig_POLYLINE_PFACE_set = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_PFACE_set;
*swig_POLYLINE_MESH_get = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_MESH_get;
*swig_POLYLINE_MESH_set = *LibreDWGc::_dwg_object_entity_tio_POLYLINE_MESH_set;
*swig_SOLID_get = *LibreDWGc::_dwg_object_entity_tio_SOLID_get;
*swig_SOLID_set = *LibreDWGc::_dwg_object_entity_tio_SOLID_set;
*swig_TRACE_get = *LibreDWGc::_dwg_object_entity_tio_TRACE_get;
*swig_TRACE_set = *LibreDWGc::_dwg_object_entity_tio_TRACE_set;
*swig_SHAPE_get = *LibreDWGc::_dwg_object_entity_tio_SHAPE_get;
*swig_SHAPE_set = *LibreDWGc::_dwg_object_entity_tio_SHAPE_set;
*swig_VIEWPORT_get = *LibreDWGc::_dwg_object_entity_tio_VIEWPORT_get;
*swig_VIEWPORT_set = *LibreDWGc::_dwg_object_entity_tio_VIEWPORT_set;
*swig_ELLIPSE_get = *LibreDWGc::_dwg_object_entity_tio_ELLIPSE_get;
*swig_ELLIPSE_set = *LibreDWGc::_dwg_object_entity_tio_ELLIPSE_set;
*swig_SPLINE_get = *LibreDWGc::_dwg_object_entity_tio_SPLINE_get;
*swig_SPLINE_set = *LibreDWGc::_dwg_object_entity_tio_SPLINE_set;
*swig__3DSOLID_get = *LibreDWGc::_dwg_object_entity_tio__3DSOLID_get;
*swig__3DSOLID_set = *LibreDWGc::_dwg_object_entity_tio__3DSOLID_set;
*swig_REGION_get = *LibreDWGc::_dwg_object_entity_tio_REGION_get;
*swig_REGION_set = *LibreDWGc::_dwg_object_entity_tio_REGION_set;
*swig_BODY_get = *LibreDWGc::_dwg_object_entity_tio_BODY_get;
*swig_BODY_set = *LibreDWGc::_dwg_object_entity_tio_BODY_set;
*swig_RAY_get = *LibreDWGc::_dwg_object_entity_tio_RAY_get;
*swig_RAY_set = *LibreDWGc::_dwg_object_entity_tio_RAY_set;
*swig_XLINE_get = *LibreDWGc::_dwg_object_entity_tio_XLINE_get;
*swig_XLINE_set = *LibreDWGc::_dwg_object_entity_tio_XLINE_set;
*swig_OLEFRAME_get = *LibreDWGc::_dwg_object_entity_tio_OLEFRAME_get;
*swig_OLEFRAME_set = *LibreDWGc::_dwg_object_entity_tio_OLEFRAME_set;
*swig_MTEXT_get = *LibreDWGc::_dwg_object_entity_tio_MTEXT_get;
*swig_MTEXT_set = *LibreDWGc::_dwg_object_entity_tio_MTEXT_set;
*swig_LEADER_get = *LibreDWGc::_dwg_object_entity_tio_LEADER_get;
*swig_LEADER_set = *LibreDWGc::_dwg_object_entity_tio_LEADER_set;
*swig_TOLERANCE_get = *LibreDWGc::_dwg_object_entity_tio_TOLERANCE_get;
*swig_TOLERANCE_set = *LibreDWGc::_dwg_object_entity_tio_TOLERANCE_set;
*swig_MLINE_get = *LibreDWGc::_dwg_object_entity_tio_MLINE_get;
*swig_MLINE_set = *LibreDWGc::_dwg_object_entity_tio_MLINE_set;
*swig_OLE2FRAME_get = *LibreDWGc::_dwg_object_entity_tio_OLE2FRAME_get;
*swig_OLE2FRAME_set = *LibreDWGc::_dwg_object_entity_tio_OLE2FRAME_set;
*swig_HATCH_get = *LibreDWGc::_dwg_object_entity_tio_HATCH_get;
*swig_HATCH_set = *LibreDWGc::_dwg_object_entity_tio_HATCH_set;
*swig_CAMERA_get = *LibreDWGc::_dwg_object_entity_tio_CAMERA_get;
*swig_CAMERA_set = *LibreDWGc::_dwg_object_entity_tio_CAMERA_set;
*swig_SURFACE_get = *LibreDWGc::_dwg_object_entity_tio_SURFACE_get;
*swig_SURFACE_set = *LibreDWGc::_dwg_object_entity_tio_SURFACE_set;
*swig_GEOPOSITIONMARKER_get = *LibreDWGc::_dwg_object_entity_tio_GEOPOSITIONMARKER_get;
*swig_GEOPOSITIONMARKER_set = *LibreDWGc::_dwg_object_entity_tio_GEOPOSITIONMARKER_set;
*swig_HELIX_get = *LibreDWGc::_dwg_object_entity_tio_HELIX_get;
*swig_HELIX_set = *LibreDWGc::_dwg_object_entity_tio_HELIX_set;
*swig_IMAGE_get = *LibreDWGc::_dwg_object_entity_tio_IMAGE_get;
*swig_IMAGE_set = *LibreDWGc::_dwg_object_entity_tio_IMAGE_set;
*swig_LIGHT_get = *LibreDWGc::_dwg_object_entity_tio_LIGHT_get;
*swig_LIGHT_set = *LibreDWGc::_dwg_object_entity_tio_LIGHT_set;
*swig_LWPOLYLINE_get = *LibreDWGc::_dwg_object_entity_tio_LWPOLYLINE_get;
*swig_LWPOLYLINE_set = *LibreDWGc::_dwg_object_entity_tio_LWPOLYLINE_set;
*swig_MULTILEADER_get = *LibreDWGc::_dwg_object_entity_tio_MULTILEADER_get;
*swig_MULTILEADER_set = *LibreDWGc::_dwg_object_entity_tio_MULTILEADER_set;
*swig_PROXY_ENTITY_get = *LibreDWGc::_dwg_object_entity_tio_PROXY_ENTITY_get;
*swig_PROXY_ENTITY_set = *LibreDWGc::_dwg_object_entity_tio_PROXY_ENTITY_set;
*swig_PROXY_LWPOLYLINE_get = *LibreDWGc::_dwg_object_entity_tio_PROXY_LWPOLYLINE_get;
*swig_PROXY_LWPOLYLINE_set = *LibreDWGc::_dwg_object_entity_tio_PROXY_LWPOLYLINE_set;
*swig_TABLE_get = *LibreDWGc::_dwg_object_entity_tio_TABLE_get;
*swig_TABLE_set = *LibreDWGc::_dwg_object_entity_tio_TABLE_set;
*swig_UNDERLAY_get = *LibreDWGc::_dwg_object_entity_tio_UNDERLAY_get;
*swig_UNDERLAY_set = *LibreDWGc::_dwg_object_entity_tio_UNDERLAY_set;
*swig_WIPEOUT_get = *LibreDWGc::_dwg_object_entity_tio_WIPEOUT_get;
*swig_WIPEOUT_set = *LibreDWGc::_dwg_object_entity_tio_WIPEOUT_set;
*swig_UNKNOWN_ENT_get = *LibreDWGc::_dwg_object_entity_tio_UNKNOWN_ENT_get;
*swig_UNKNOWN_ENT_set = *LibreDWGc::_dwg_object_entity_tio_UNKNOWN_ENT_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_object_entity_tio(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_object_entity_tio($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object_Object ##############

package LibreDWG::Dwg_Object_Object;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_objid_get = *LibreDWGc::Dwg_Object_Object_objid_get;
*swig_objid_set = *LibreDWGc::Dwg_Object_Object_objid_set;
*swig_tio_get = *LibreDWGc::Dwg_Object_Object_tio_get;
*swig_tio_set = *LibreDWGc::Dwg_Object_Object_tio_set;
*swig_dwg_get = *LibreDWGc::Dwg_Object_Object_dwg_get;
*swig_dwg_set = *LibreDWGc::Dwg_Object_Object_dwg_set;
*swig_num_eed_get = *LibreDWGc::Dwg_Object_Object_num_eed_get;
*swig_num_eed_set = *LibreDWGc::Dwg_Object_Object_num_eed_set;
*swig_eed_get = *LibreDWGc::Dwg_Object_Object_eed_get;
*swig_eed_set = *LibreDWGc::Dwg_Object_Object_eed_set;
*swig_datpos_get = *LibreDWGc::Dwg_Object_Object_datpos_get;
*swig_datpos_set = *LibreDWGc::Dwg_Object_Object_datpos_set;
*swig_num_reactors_get = *LibreDWGc::Dwg_Object_Object_num_reactors_get;
*swig_num_reactors_set = *LibreDWGc::Dwg_Object_Object_num_reactors_set;
*swig_reactors_get = *LibreDWGc::Dwg_Object_Object_reactors_get;
*swig_reactors_set = *LibreDWGc::Dwg_Object_Object_reactors_set;
*swig_xdicobjhandle_get = *LibreDWGc::Dwg_Object_Object_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDWGc::Dwg_Object_Object_xdicobjhandle_set;
*swig_xdic_missing_flag_get = *LibreDWGc::Dwg_Object_Object_xdic_missing_flag_get;
*swig_xdic_missing_flag_set = *LibreDWGc::Dwg_Object_Object_xdic_missing_flag_set;
*swig_has_ds_binary_data_get = *LibreDWGc::Dwg_Object_Object_has_ds_binary_data_get;
*swig_has_ds_binary_data_set = *LibreDWGc::Dwg_Object_Object_has_ds_binary_data_set;
*swig_num_handles_get = *LibreDWGc::Dwg_Object_Object_num_handles_get;
*swig_num_handles_set = *LibreDWGc::Dwg_Object_Object_num_handles_set;
*swig_handleref_get = *LibreDWGc::Dwg_Object_Object_handleref_get;
*swig_handleref_set = *LibreDWGc::Dwg_Object_Object_handleref_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object_Object(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object_Object($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_object_object_tio ##############

package LibreDWG::_dwg_object_object_tio;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_BLOCK_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_BLOCK_CONTROL_get;
*swig_BLOCK_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_BLOCK_CONTROL_set;
*swig_BLOCK_HEADER_get = *LibreDWGc::_dwg_object_object_tio_BLOCK_HEADER_get;
*swig_BLOCK_HEADER_set = *LibreDWGc::_dwg_object_object_tio_BLOCK_HEADER_set;
*swig_LAYER_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_LAYER_CONTROL_get;
*swig_LAYER_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_LAYER_CONTROL_set;
*swig_LAYER_get = *LibreDWGc::_dwg_object_object_tio_LAYER_get;
*swig_LAYER_set = *LibreDWGc::_dwg_object_object_tio_LAYER_set;
*swig_STYLE_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_STYLE_CONTROL_get;
*swig_STYLE_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_STYLE_CONTROL_set;
*swig_STYLE_get = *LibreDWGc::_dwg_object_object_tio_STYLE_get;
*swig_STYLE_set = *LibreDWGc::_dwg_object_object_tio_STYLE_set;
*swig_LTYPE_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_LTYPE_CONTROL_get;
*swig_LTYPE_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_LTYPE_CONTROL_set;
*swig_LTYPE_get = *LibreDWGc::_dwg_object_object_tio_LTYPE_get;
*swig_LTYPE_set = *LibreDWGc::_dwg_object_object_tio_LTYPE_set;
*swig_VIEW_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_VIEW_CONTROL_get;
*swig_VIEW_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_VIEW_CONTROL_set;
*swig_VIEW_get = *LibreDWGc::_dwg_object_object_tio_VIEW_get;
*swig_VIEW_set = *LibreDWGc::_dwg_object_object_tio_VIEW_set;
*swig_UCS_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_UCS_CONTROL_get;
*swig_UCS_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_UCS_CONTROL_set;
*swig_UCS_get = *LibreDWGc::_dwg_object_object_tio_UCS_get;
*swig_UCS_set = *LibreDWGc::_dwg_object_object_tio_UCS_set;
*swig_VPORT_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_VPORT_CONTROL_get;
*swig_VPORT_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_VPORT_CONTROL_set;
*swig_VPORT_get = *LibreDWGc::_dwg_object_object_tio_VPORT_get;
*swig_VPORT_set = *LibreDWGc::_dwg_object_object_tio_VPORT_set;
*swig_APPID_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_APPID_CONTROL_get;
*swig_APPID_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_APPID_CONTROL_set;
*swig_APPID_get = *LibreDWGc::_dwg_object_object_tio_APPID_get;
*swig_APPID_set = *LibreDWGc::_dwg_object_object_tio_APPID_set;
*swig_DIMSTYLE_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_DIMSTYLE_CONTROL_get;
*swig_DIMSTYLE_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_DIMSTYLE_CONTROL_set;
*swig_DIMSTYLE_get = *LibreDWGc::_dwg_object_object_tio_DIMSTYLE_get;
*swig_DIMSTYLE_set = *LibreDWGc::_dwg_object_object_tio_DIMSTYLE_set;
*swig_VPORT_ENTITY_CONTROL_get = *LibreDWGc::_dwg_object_object_tio_VPORT_ENTITY_CONTROL_get;
*swig_VPORT_ENTITY_CONTROL_set = *LibreDWGc::_dwg_object_object_tio_VPORT_ENTITY_CONTROL_set;
*swig_VPORT_ENTITY_HEADER_get = *LibreDWGc::_dwg_object_object_tio_VPORT_ENTITY_HEADER_get;
*swig_VPORT_ENTITY_HEADER_set = *LibreDWGc::_dwg_object_object_tio_VPORT_ENTITY_HEADER_set;
*swig_CELLSTYLEMAP_get = *LibreDWGc::_dwg_object_object_tio_CELLSTYLEMAP_get;
*swig_CELLSTYLEMAP_set = *LibreDWGc::_dwg_object_object_tio_CELLSTYLEMAP_set;
*swig_DATATABLE_get = *LibreDWGc::_dwg_object_object_tio_DATATABLE_get;
*swig_DATATABLE_set = *LibreDWGc::_dwg_object_object_tio_DATATABLE_set;
*swig_DBCOLOR_get = *LibreDWGc::_dwg_object_object_tio_DBCOLOR_get;
*swig_DBCOLOR_set = *LibreDWGc::_dwg_object_object_tio_DBCOLOR_set;
*swig_DICTIONARY_get = *LibreDWGc::_dwg_object_object_tio_DICTIONARY_get;
*swig_DICTIONARY_set = *LibreDWGc::_dwg_object_object_tio_DICTIONARY_set;
*swig_DICTIONARYVAR_get = *LibreDWGc::_dwg_object_object_tio_DICTIONARYVAR_get;
*swig_DICTIONARYVAR_set = *LibreDWGc::_dwg_object_object_tio_DICTIONARYVAR_set;
*swig_DICTIONARYWDFLT_get = *LibreDWGc::_dwg_object_object_tio_DICTIONARYWDFLT_get;
*swig_DICTIONARYWDFLT_set = *LibreDWGc::_dwg_object_object_tio_DICTIONARYWDFLT_set;
*swig_DUMMY_get = *LibreDWGc::_dwg_object_object_tio_DUMMY_get;
*swig_DUMMY_set = *LibreDWGc::_dwg_object_object_tio_DUMMY_set;
*swig_FIELD_get = *LibreDWGc::_dwg_object_object_tio_FIELD_get;
*swig_FIELD_set = *LibreDWGc::_dwg_object_object_tio_FIELD_set;
*swig_FIELDLIST_get = *LibreDWGc::_dwg_object_object_tio_FIELDLIST_get;
*swig_FIELDLIST_set = *LibreDWGc::_dwg_object_object_tio_FIELDLIST_set;
*swig_GEODATA_get = *LibreDWGc::_dwg_object_object_tio_GEODATA_get;
*swig_GEODATA_set = *LibreDWGc::_dwg_object_object_tio_GEODATA_set;
*swig_GROUP_get = *LibreDWGc::_dwg_object_object_tio_GROUP_get;
*swig_GROUP_set = *LibreDWGc::_dwg_object_object_tio_GROUP_set;
*swig_IDBUFFER_get = *LibreDWGc::_dwg_object_object_tio_IDBUFFER_get;
*swig_IDBUFFER_set = *LibreDWGc::_dwg_object_object_tio_IDBUFFER_set;
*swig_IMAGEDEF_get = *LibreDWGc::_dwg_object_object_tio_IMAGEDEF_get;
*swig_IMAGEDEF_set = *LibreDWGc::_dwg_object_object_tio_IMAGEDEF_set;
*swig_IMAGEDEF_REACTOR_get = *LibreDWGc::_dwg_object_object_tio_IMAGEDEF_REACTOR_get;
*swig_IMAGEDEF_REACTOR_set = *LibreDWGc::_dwg_object_object_tio_IMAGEDEF_REACTOR_set;
*swig_LAYER_INDEX_get = *LibreDWGc::_dwg_object_object_tio_LAYER_INDEX_get;
*swig_LAYER_INDEX_set = *LibreDWGc::_dwg_object_object_tio_LAYER_INDEX_set;
*swig_LAYOUT_get = *LibreDWGc::_dwg_object_object_tio_LAYOUT_get;
*swig_LAYOUT_set = *LibreDWGc::_dwg_object_object_tio_LAYOUT_set;
*swig_LONG_TRANSACTION_get = *LibreDWGc::_dwg_object_object_tio_LONG_TRANSACTION_get;
*swig_LONG_TRANSACTION_set = *LibreDWGc::_dwg_object_object_tio_LONG_TRANSACTION_set;
*swig_MATERIAL_get = *LibreDWGc::_dwg_object_object_tio_MATERIAL_get;
*swig_MATERIAL_set = *LibreDWGc::_dwg_object_object_tio_MATERIAL_set;
*swig_MLEADERSTYLE_get = *LibreDWGc::_dwg_object_object_tio_MLEADERSTYLE_get;
*swig_MLEADERSTYLE_set = *LibreDWGc::_dwg_object_object_tio_MLEADERSTYLE_set;
*swig_MLINESTYLE_get = *LibreDWGc::_dwg_object_object_tio_MLINESTYLE_get;
*swig_MLINESTYLE_set = *LibreDWGc::_dwg_object_object_tio_MLINESTYLE_set;
*swig_OBJECT_PTR_get = *LibreDWGc::_dwg_object_object_tio_OBJECT_PTR_get;
*swig_OBJECT_PTR_set = *LibreDWGc::_dwg_object_object_tio_OBJECT_PTR_set;
*swig_OBJECTCONTEXTDATA_get = *LibreDWGc::_dwg_object_object_tio_OBJECTCONTEXTDATA_get;
*swig_OBJECTCONTEXTDATA_set = *LibreDWGc::_dwg_object_object_tio_OBJECTCONTEXTDATA_set;
*swig_PLACEHOLDER_get = *LibreDWGc::_dwg_object_object_tio_PLACEHOLDER_get;
*swig_PLACEHOLDER_set = *LibreDWGc::_dwg_object_object_tio_PLACEHOLDER_set;
*swig_PLOTSETTINGS_get = *LibreDWGc::_dwg_object_object_tio_PLOTSETTINGS_get;
*swig_PLOTSETTINGS_set = *LibreDWGc::_dwg_object_object_tio_PLOTSETTINGS_set;
*swig_PROXY_OBJECT_get = *LibreDWGc::_dwg_object_object_tio_PROXY_OBJECT_get;
*swig_PROXY_OBJECT_set = *LibreDWGc::_dwg_object_object_tio_PROXY_OBJECT_set;
*swig_RASTERVARIABLES_get = *LibreDWGc::_dwg_object_object_tio_RASTERVARIABLES_get;
*swig_RASTERVARIABLES_set = *LibreDWGc::_dwg_object_object_tio_RASTERVARIABLES_set;
*swig_SCALE_get = *LibreDWGc::_dwg_object_object_tio_SCALE_get;
*swig_SCALE_set = *LibreDWGc::_dwg_object_object_tio_SCALE_set;
*swig_SORTENTSTABLE_get = *LibreDWGc::_dwg_object_object_tio_SORTENTSTABLE_get;
*swig_SORTENTSTABLE_set = *LibreDWGc::_dwg_object_object_tio_SORTENTSTABLE_set;
*swig_SPATIAL_FILTER_get = *LibreDWGc::_dwg_object_object_tio_SPATIAL_FILTER_get;
*swig_SPATIAL_FILTER_set = *LibreDWGc::_dwg_object_object_tio_SPATIAL_FILTER_set;
*swig_SPATIAL_INDEX_get = *LibreDWGc::_dwg_object_object_tio_SPATIAL_INDEX_get;
*swig_SPATIAL_INDEX_set = *LibreDWGc::_dwg_object_object_tio_SPATIAL_INDEX_set;
*swig_SUN_get = *LibreDWGc::_dwg_object_object_tio_SUN_get;
*swig_SUN_set = *LibreDWGc::_dwg_object_object_tio_SUN_set;
*swig_TABLECONTENT_get = *LibreDWGc::_dwg_object_object_tio_TABLECONTENT_get;
*swig_TABLECONTENT_set = *LibreDWGc::_dwg_object_object_tio_TABLECONTENT_set;
*swig_TABLEGEOMETRY_get = *LibreDWGc::_dwg_object_object_tio_TABLEGEOMETRY_get;
*swig_TABLEGEOMETRY_set = *LibreDWGc::_dwg_object_object_tio_TABLEGEOMETRY_set;
*swig_TABLESTYLE_get = *LibreDWGc::_dwg_object_object_tio_TABLESTYLE_get;
*swig_TABLESTYLE_set = *LibreDWGc::_dwg_object_object_tio_TABLESTYLE_set;
*swig_VBA_PROJECT_get = *LibreDWGc::_dwg_object_object_tio_VBA_PROJECT_get;
*swig_VBA_PROJECT_set = *LibreDWGc::_dwg_object_object_tio_VBA_PROJECT_set;
*swig_VISUALSTYLE_get = *LibreDWGc::_dwg_object_object_tio_VISUALSTYLE_get;
*swig_VISUALSTYLE_set = *LibreDWGc::_dwg_object_object_tio_VISUALSTYLE_set;
*swig_WIPEOUTVARIABLES_get = *LibreDWGc::_dwg_object_object_tio_WIPEOUTVARIABLES_get;
*swig_WIPEOUTVARIABLES_set = *LibreDWGc::_dwg_object_object_tio_WIPEOUTVARIABLES_set;
*swig_XRECORD_get = *LibreDWGc::_dwg_object_object_tio_XRECORD_get;
*swig_XRECORD_set = *LibreDWGc::_dwg_object_object_tio_XRECORD_set;
*swig_UNKNOWN_OBJ_get = *LibreDWGc::_dwg_object_object_tio_UNKNOWN_OBJ_get;
*swig_UNKNOWN_OBJ_set = *LibreDWGc::_dwg_object_object_tio_UNKNOWN_OBJ_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_object_object_tio(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_object_object_tio($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Object ##############

package LibreDWG::Dwg_Object;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDWGc::Dwg_Object_size_get;
*swig_size_set = *LibreDWGc::Dwg_Object_size_set;
*swig_address_get = *LibreDWGc::Dwg_Object_address_get;
*swig_address_set = *LibreDWGc::Dwg_Object_address_set;
*swig_type_get = *LibreDWGc::Dwg_Object_type_get;
*swig_type_set = *LibreDWGc::Dwg_Object_type_set;
*swig_index_get = *LibreDWGc::Dwg_Object_index_get;
*swig_index_set = *LibreDWGc::Dwg_Object_index_set;
*swig_fixedtype_get = *LibreDWGc::Dwg_Object_fixedtype_get;
*swig_fixedtype_set = *LibreDWGc::Dwg_Object_fixedtype_set;
*swig_bitsize_address_get = *LibreDWGc::Dwg_Object_bitsize_address_get;
*swig_bitsize_address_set = *LibreDWGc::Dwg_Object_bitsize_address_set;
*swig_has_strings_get = *LibreDWGc::Dwg_Object_has_strings_get;
*swig_has_strings_set = *LibreDWGc::Dwg_Object_has_strings_set;
*swig_stringstream_size_get = *LibreDWGc::Dwg_Object_stringstream_size_get;
*swig_stringstream_size_set = *LibreDWGc::Dwg_Object_stringstream_size_set;
*swig_handlestream_size_get = *LibreDWGc::Dwg_Object_handlestream_size_get;
*swig_handlestream_size_set = *LibreDWGc::Dwg_Object_handlestream_size_set;
*swig_supertype_get = *LibreDWGc::Dwg_Object_supertype_get;
*swig_supertype_set = *LibreDWGc::Dwg_Object_supertype_set;
*swig_tio_get = *LibreDWGc::Dwg_Object_tio_get;
*swig_tio_set = *LibreDWGc::Dwg_Object_tio_set;
*swig_dxfname_get = *LibreDWGc::Dwg_Object_dxfname_get;
*swig_dxfname_set = *LibreDWGc::Dwg_Object_dxfname_set;
*swig_bitsize_get = *LibreDWGc::Dwg_Object_bitsize_get;
*swig_bitsize_set = *LibreDWGc::Dwg_Object_bitsize_set;
*swig_hdlpos_get = *LibreDWGc::Dwg_Object_hdlpos_get;
*swig_hdlpos_set = *LibreDWGc::Dwg_Object_hdlpos_set;
*swig_handle_get = *LibreDWGc::Dwg_Object_handle_get;
*swig_handle_set = *LibreDWGc::Dwg_Object_handle_set;
*swig_parent_get = *LibreDWGc::Dwg_Object_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Object_parent_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Object(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Object($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_object_tio ##############

package LibreDWG::_dwg_object_tio;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_entity_get = *LibreDWGc::_dwg_object_tio_entity_get;
*swig_entity_set = *LibreDWGc::_dwg_object_tio_entity_set;
*swig_object_get = *LibreDWGc::_dwg_object_tio_object_get;
*swig_object_set = *LibreDWGc::_dwg_object_tio_object_set;
*swig_unknown_get = *LibreDWGc::_dwg_object_tio_unknown_get;
*swig_unknown_set = *LibreDWGc::_dwg_object_tio_unknown_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_object_tio(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_object_tio($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Class ##############

package LibreDWG::Dwg_Class;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_number_get = *LibreDWGc::Dwg_Class_number_get;
*swig_number_set = *LibreDWGc::Dwg_Class_number_set;
*swig_proxyflag_get = *LibreDWGc::Dwg_Class_proxyflag_get;
*swig_proxyflag_set = *LibreDWGc::Dwg_Class_proxyflag_set;
*swig_appname_get = *LibreDWGc::Dwg_Class_appname_get;
*swig_appname_set = *LibreDWGc::Dwg_Class_appname_set;
*swig_cppname_get = *LibreDWGc::Dwg_Class_cppname_get;
*swig_cppname_set = *LibreDWGc::Dwg_Class_cppname_set;
*swig_dxfname_get = *LibreDWGc::Dwg_Class_dxfname_get;
*swig_dxfname_set = *LibreDWGc::Dwg_Class_dxfname_set;
*swig_dxfname_u_get = *LibreDWGc::Dwg_Class_dxfname_u_get;
*swig_dxfname_u_set = *LibreDWGc::Dwg_Class_dxfname_u_set;
*swig_wasazombie_get = *LibreDWGc::Dwg_Class_wasazombie_get;
*swig_wasazombie_set = *LibreDWGc::Dwg_Class_wasazombie_set;
*swig_item_class_id_get = *LibreDWGc::Dwg_Class_item_class_id_get;
*swig_item_class_id_set = *LibreDWGc::Dwg_Class_item_class_id_set;
*swig_num_instances_get = *LibreDWGc::Dwg_Class_num_instances_get;
*swig_num_instances_set = *LibreDWGc::Dwg_Class_num_instances_set;
*swig_dwg_version_get = *LibreDWGc::Dwg_Class_dwg_version_get;
*swig_dwg_version_set = *LibreDWGc::Dwg_Class_dwg_version_set;
*swig_maint_version_get = *LibreDWGc::Dwg_Class_maint_version_get;
*swig_maint_version_set = *LibreDWGc::Dwg_Class_maint_version_set;
*swig_unknown_1_get = *LibreDWGc::Dwg_Class_unknown_1_get;
*swig_unknown_1_set = *LibreDWGc::Dwg_Class_unknown_1_set;
*swig_unknown_2_get = *LibreDWGc::Dwg_Class_unknown_2_get;
*swig_unknown_2_set = *LibreDWGc::Dwg_Class_unknown_2_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Class(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Class($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Chain ##############

package LibreDWG::Dwg_Chain;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_chain_get = *LibreDWGc::Dwg_Chain_chain_get;
*swig_chain_set = *LibreDWGc::Dwg_Chain_chain_set;
*swig_size_get = *LibreDWGc::Dwg_Chain_size_get;
*swig_size_set = *LibreDWGc::Dwg_Chain_size_set;
*swig_byte_get = *LibreDWGc::Dwg_Chain_byte_get;
*swig_byte_set = *LibreDWGc::Dwg_Chain_byte_set;
*swig_bit_get = *LibreDWGc::Dwg_Chain_bit_get;
*swig_bit_set = *LibreDWGc::Dwg_Chain_bit_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Chain(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Chain($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Section ##############

package LibreDWG::Dwg_Section;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_number_get = *LibreDWGc::Dwg_Section_number_get;
*swig_number_set = *LibreDWGc::Dwg_Section_number_set;
*swig_address_get = *LibreDWGc::Dwg_Section_address_get;
*swig_address_set = *LibreDWGc::Dwg_Section_address_set;
*swig_size_get = *LibreDWGc::Dwg_Section_size_get;
*swig_size_set = *LibreDWGc::Dwg_Section_size_set;
*swig_parent_get = *LibreDWGc::Dwg_Section_parent_get;
*swig_parent_set = *LibreDWGc::Dwg_Section_parent_set;
*swig_left_get = *LibreDWGc::Dwg_Section_left_get;
*swig_left_set = *LibreDWGc::Dwg_Section_left_set;
*swig_right_get = *LibreDWGc::Dwg_Section_right_get;
*swig_right_set = *LibreDWGc::Dwg_Section_right_set;
*swig_x00_get = *LibreDWGc::Dwg_Section_x00_get;
*swig_x00_set = *LibreDWGc::Dwg_Section_x00_set;
*swig_type_get = *LibreDWGc::Dwg_Section_type_get;
*swig_type_set = *LibreDWGc::Dwg_Section_type_set;
*swig_name_get = *LibreDWGc::Dwg_Section_name_get;
*swig_name_set = *LibreDWGc::Dwg_Section_name_set;
*swig_section_type_get = *LibreDWGc::Dwg_Section_section_type_get;
*swig_section_type_set = *LibreDWGc::Dwg_Section_section_type_set;
*swig_decomp_data_size_get = *LibreDWGc::Dwg_Section_decomp_data_size_get;
*swig_decomp_data_size_set = *LibreDWGc::Dwg_Section_decomp_data_size_set;
*swig_comp_data_size_get = *LibreDWGc::Dwg_Section_comp_data_size_get;
*swig_comp_data_size_set = *LibreDWGc::Dwg_Section_comp_data_size_set;
*swig_compression_type_get = *LibreDWGc::Dwg_Section_compression_type_get;
*swig_compression_type_set = *LibreDWGc::Dwg_Section_compression_type_set;
*swig_checksum_get = *LibreDWGc::Dwg_Section_checksum_get;
*swig_checksum_set = *LibreDWGc::Dwg_Section_checksum_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Section(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Section($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Section_Info ##############

package LibreDWG::Dwg_Section_Info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDWGc::Dwg_Section_Info_size_get;
*swig_size_set = *LibreDWGc::Dwg_Section_Info_size_set;
*swig_pagecount_get = *LibreDWGc::Dwg_Section_Info_pagecount_get;
*swig_pagecount_set = *LibreDWGc::Dwg_Section_Info_pagecount_set;
*swig_num_sections_get = *LibreDWGc::Dwg_Section_Info_num_sections_get;
*swig_num_sections_set = *LibreDWGc::Dwg_Section_Info_num_sections_set;
*swig_max_decomp_size_get = *LibreDWGc::Dwg_Section_Info_max_decomp_size_get;
*swig_max_decomp_size_set = *LibreDWGc::Dwg_Section_Info_max_decomp_size_set;
*swig_unknown2_get = *LibreDWGc::Dwg_Section_Info_unknown2_get;
*swig_unknown2_set = *LibreDWGc::Dwg_Section_Info_unknown2_set;
*swig_compressed_get = *LibreDWGc::Dwg_Section_Info_compressed_get;
*swig_compressed_set = *LibreDWGc::Dwg_Section_Info_compressed_set;
*swig_type_get = *LibreDWGc::Dwg_Section_Info_type_get;
*swig_type_set = *LibreDWGc::Dwg_Section_Info_type_set;
*swig_encrypted_get = *LibreDWGc::Dwg_Section_Info_encrypted_get;
*swig_encrypted_set = *LibreDWGc::Dwg_Section_Info_encrypted_set;
*swig_name_get = *LibreDWGc::Dwg_Section_Info_name_get;
*swig_name_set = *LibreDWGc::Dwg_Section_Info_name_set;
*swig_sections_get = *LibreDWGc::Dwg_Section_Info_sections_get;
*swig_sections_set = *LibreDWGc::Dwg_Section_Info_sections_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Section_Info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Section_Info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Data ##############

package LibreDWG::Dwg_Data;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_header_get = *LibreDWGc::Dwg_Data_header_get;
*swig_header_set = *LibreDWGc::Dwg_Data_header_set;
*swig_r2004_header_get = *LibreDWGc::Dwg_Data_r2004_header_get;
*swig_r2004_header_set = *LibreDWGc::Dwg_Data_r2004_header_set;
*swig_auxheader_get = *LibreDWGc::Dwg_Data_auxheader_get;
*swig_auxheader_set = *LibreDWGc::Dwg_Data_auxheader_set;
*swig_second_header_get = *LibreDWGc::Dwg_Data_second_header_get;
*swig_second_header_set = *LibreDWGc::Dwg_Data_second_header_set;
*swig_picture_get = *LibreDWGc::Dwg_Data_picture_get;
*swig_picture_set = *LibreDWGc::Dwg_Data_picture_set;
*swig_header_vars_get = *LibreDWGc::Dwg_Data_header_vars_get;
*swig_header_vars_set = *LibreDWGc::Dwg_Data_header_vars_set;
*swig_num_classes_get = *LibreDWGc::Dwg_Data_num_classes_get;
*swig_num_classes_set = *LibreDWGc::Dwg_Data_num_classes_set;
*swig_dwg_class_get = *LibreDWGc::Dwg_Data_dwg_class_get;
*swig_dwg_class_set = *LibreDWGc::Dwg_Data_dwg_class_set;
*swig_num_objects_get = *LibreDWGc::Dwg_Data_num_objects_get;
*swig_num_objects_set = *LibreDWGc::Dwg_Data_num_objects_set;
*swig_object_get = *LibreDWGc::Dwg_Data_object_get;
*swig_object_set = *LibreDWGc::Dwg_Data_object_set;
*swig_num_entities_get = *LibreDWGc::Dwg_Data_num_entities_get;
*swig_num_entities_set = *LibreDWGc::Dwg_Data_num_entities_set;
*swig_num_object_refs_get = *LibreDWGc::Dwg_Data_num_object_refs_get;
*swig_num_object_refs_set = *LibreDWGc::Dwg_Data_num_object_refs_set;
*swig_object_ref_get = *LibreDWGc::Dwg_Data_object_ref_get;
*swig_object_ref_set = *LibreDWGc::Dwg_Data_object_ref_set;
*swig_object_map_get = *LibreDWGc::Dwg_Data_object_map_get;
*swig_object_map_set = *LibreDWGc::Dwg_Data_object_map_set;
*swig_dirty_refs_get = *LibreDWGc::Dwg_Data_dirty_refs_get;
*swig_dirty_refs_set = *LibreDWGc::Dwg_Data_dirty_refs_set;
*swig_mspace_block_get = *LibreDWGc::Dwg_Data_mspace_block_get;
*swig_mspace_block_set = *LibreDWGc::Dwg_Data_mspace_block_set;
*swig_pspace_block_get = *LibreDWGc::Dwg_Data_pspace_block_get;
*swig_pspace_block_set = *LibreDWGc::Dwg_Data_pspace_block_set;
*swig_block_control_get = *LibreDWGc::Dwg_Data_block_control_get;
*swig_block_control_set = *LibreDWGc::Dwg_Data_block_control_set;
*swig_layer_control_get = *LibreDWGc::Dwg_Data_layer_control_get;
*swig_layer_control_set = *LibreDWGc::Dwg_Data_layer_control_set;
*swig_style_control_get = *LibreDWGc::Dwg_Data_style_control_get;
*swig_style_control_set = *LibreDWGc::Dwg_Data_style_control_set;
*swig_ltype_control_get = *LibreDWGc::Dwg_Data_ltype_control_get;
*swig_ltype_control_set = *LibreDWGc::Dwg_Data_ltype_control_set;
*swig_view_control_get = *LibreDWGc::Dwg_Data_view_control_get;
*swig_view_control_set = *LibreDWGc::Dwg_Data_view_control_set;
*swig_ucs_control_get = *LibreDWGc::Dwg_Data_ucs_control_get;
*swig_ucs_control_set = *LibreDWGc::Dwg_Data_ucs_control_set;
*swig_vport_control_get = *LibreDWGc::Dwg_Data_vport_control_get;
*swig_vport_control_set = *LibreDWGc::Dwg_Data_vport_control_set;
*swig_appid_control_get = *LibreDWGc::Dwg_Data_appid_control_get;
*swig_appid_control_set = *LibreDWGc::Dwg_Data_appid_control_set;
*swig_dimstyle_control_get = *LibreDWGc::Dwg_Data_dimstyle_control_get;
*swig_dimstyle_control_set = *LibreDWGc::Dwg_Data_dimstyle_control_set;
*swig_vport_entity_control_get = *LibreDWGc::Dwg_Data_vport_entity_control_get;
*swig_vport_entity_control_set = *LibreDWGc::Dwg_Data_vport_entity_control_set;
*swig_measurement_get = *LibreDWGc::Dwg_Data_measurement_get;
*swig_measurement_set = *LibreDWGc::Dwg_Data_measurement_set;
*swig_layout_number_get = *LibreDWGc::Dwg_Data_layout_number_get;
*swig_layout_number_set = *LibreDWGc::Dwg_Data_layout_number_set;
*swig_opts_get = *LibreDWGc::Dwg_Data_opts_get;
*swig_opts_set = *LibreDWGc::Dwg_Data_opts_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Data(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Data($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_Header ##############

package LibreDWG::Dwg_Header;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_version_get = *LibreDWGc::Dwg_Header_version_get;
*swig_version_set = *LibreDWGc::Dwg_Header_version_set;
*swig_from_version_get = *LibreDWGc::Dwg_Header_from_version_get;
*swig_from_version_set = *LibreDWGc::Dwg_Header_from_version_set;
*swig_zero_5_get = *LibreDWGc::Dwg_Header_zero_5_get;
*swig_zero_5_set = *LibreDWGc::Dwg_Header_zero_5_set;
*swig_is_maint_get = *LibreDWGc::Dwg_Header_is_maint_get;
*swig_is_maint_set = *LibreDWGc::Dwg_Header_is_maint_set;
*swig_zero_one_or_three_get = *LibreDWGc::Dwg_Header_zero_one_or_three_get;
*swig_zero_one_or_three_set = *LibreDWGc::Dwg_Header_zero_one_or_three_set;
*swig_unknown_s_get = *LibreDWGc::Dwg_Header_unknown_s_get;
*swig_unknown_s_set = *LibreDWGc::Dwg_Header_unknown_s_set;
*swig_preview_addr_get = *LibreDWGc::Dwg_Header_preview_addr_get;
*swig_preview_addr_set = *LibreDWGc::Dwg_Header_preview_addr_set;
*swig_dwg_version_get = *LibreDWGc::Dwg_Header_dwg_version_get;
*swig_dwg_version_set = *LibreDWGc::Dwg_Header_dwg_version_set;
*swig_maint_version_get = *LibreDWGc::Dwg_Header_maint_version_get;
*swig_maint_version_set = *LibreDWGc::Dwg_Header_maint_version_set;
*swig_codepage_get = *LibreDWGc::Dwg_Header_codepage_get;
*swig_codepage_set = *LibreDWGc::Dwg_Header_codepage_set;
*swig_unknown_0_get = *LibreDWGc::Dwg_Header_unknown_0_get;
*swig_unknown_0_set = *LibreDWGc::Dwg_Header_unknown_0_set;
*swig_app_dwg_version_get = *LibreDWGc::Dwg_Header_app_dwg_version_get;
*swig_app_dwg_version_set = *LibreDWGc::Dwg_Header_app_dwg_version_set;
*swig_app_maint_version_get = *LibreDWGc::Dwg_Header_app_maint_version_get;
*swig_app_maint_version_set = *LibreDWGc::Dwg_Header_app_maint_version_set;
*swig_security_type_get = *LibreDWGc::Dwg_Header_security_type_get;
*swig_security_type_set = *LibreDWGc::Dwg_Header_security_type_set;
*swig_rl_1c_address_get = *LibreDWGc::Dwg_Header_rl_1c_address_get;
*swig_rl_1c_address_set = *LibreDWGc::Dwg_Header_rl_1c_address_set;
*swig_summary_info_address_get = *LibreDWGc::Dwg_Header_summary_info_address_get;
*swig_summary_info_address_set = *LibreDWGc::Dwg_Header_summary_info_address_set;
*swig_vba_proj_address_get = *LibreDWGc::Dwg_Header_vba_proj_address_get;
*swig_vba_proj_address_set = *LibreDWGc::Dwg_Header_vba_proj_address_set;
*swig_rl_28_80_get = *LibreDWGc::Dwg_Header_rl_28_80_get;
*swig_rl_28_80_set = *LibreDWGc::Dwg_Header_rl_28_80_set;
*swig_num_sections_get = *LibreDWGc::Dwg_Header_num_sections_get;
*swig_num_sections_set = *LibreDWGc::Dwg_Header_num_sections_set;
*swig_section_get = *LibreDWGc::Dwg_Header_section_get;
*swig_section_set = *LibreDWGc::Dwg_Header_section_set;
*swig_num_infos_get = *LibreDWGc::Dwg_Header_num_infos_get;
*swig_num_infos_set = *LibreDWGc::Dwg_Header_num_infos_set;
*swig_section_info_get = *LibreDWGc::Dwg_Header_section_info_get;
*swig_section_info_set = *LibreDWGc::Dwg_Header_section_info_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_Header(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_Header($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_R2004_Header ##############

package LibreDWG::Dwg_R2004_Header;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_file_ID_string_get = *LibreDWGc::Dwg_R2004_Header_file_ID_string_get;
*swig_file_ID_string_set = *LibreDWGc::Dwg_R2004_Header_file_ID_string_set;
*swig_header_offset_get = *LibreDWGc::Dwg_R2004_Header_header_offset_get;
*swig_header_offset_set = *LibreDWGc::Dwg_R2004_Header_header_offset_set;
*swig_header_size_get = *LibreDWGc::Dwg_R2004_Header_header_size_get;
*swig_header_size_set = *LibreDWGc::Dwg_R2004_Header_header_size_set;
*swig_x04_get = *LibreDWGc::Dwg_R2004_Header_x04_get;
*swig_x04_set = *LibreDWGc::Dwg_R2004_Header_x04_set;
*swig_root_tree_node_gap_get = *LibreDWGc::Dwg_R2004_Header_root_tree_node_gap_get;
*swig_root_tree_node_gap_set = *LibreDWGc::Dwg_R2004_Header_root_tree_node_gap_set;
*swig_lowermost_left_tree_node_gap_get = *LibreDWGc::Dwg_R2004_Header_lowermost_left_tree_node_gap_get;
*swig_lowermost_left_tree_node_gap_set = *LibreDWGc::Dwg_R2004_Header_lowermost_left_tree_node_gap_set;
*swig_lowermost_right_tree_node_gap_get = *LibreDWGc::Dwg_R2004_Header_lowermost_right_tree_node_gap_get;
*swig_lowermost_right_tree_node_gap_set = *LibreDWGc::Dwg_R2004_Header_lowermost_right_tree_node_gap_set;
*swig_unknown_long_get = *LibreDWGc::Dwg_R2004_Header_unknown_long_get;
*swig_unknown_long_set = *LibreDWGc::Dwg_R2004_Header_unknown_long_set;
*swig_last_section_id_get = *LibreDWGc::Dwg_R2004_Header_last_section_id_get;
*swig_last_section_id_set = *LibreDWGc::Dwg_R2004_Header_last_section_id_set;
*swig_last_section_address_get = *LibreDWGc::Dwg_R2004_Header_last_section_address_get;
*swig_last_section_address_set = *LibreDWGc::Dwg_R2004_Header_last_section_address_set;
*swig_second_header_address_get = *LibreDWGc::Dwg_R2004_Header_second_header_address_get;
*swig_second_header_address_set = *LibreDWGc::Dwg_R2004_Header_second_header_address_set;
*swig_gap_amount_get = *LibreDWGc::Dwg_R2004_Header_gap_amount_get;
*swig_gap_amount_set = *LibreDWGc::Dwg_R2004_Header_gap_amount_set;
*swig_section_amount_get = *LibreDWGc::Dwg_R2004_Header_section_amount_get;
*swig_section_amount_set = *LibreDWGc::Dwg_R2004_Header_section_amount_set;
*swig_x20_get = *LibreDWGc::Dwg_R2004_Header_x20_get;
*swig_x20_set = *LibreDWGc::Dwg_R2004_Header_x20_set;
*swig_x80_get = *LibreDWGc::Dwg_R2004_Header_x80_get;
*swig_x80_set = *LibreDWGc::Dwg_R2004_Header_x80_set;
*swig_x40_get = *LibreDWGc::Dwg_R2004_Header_x40_get;
*swig_x40_set = *LibreDWGc::Dwg_R2004_Header_x40_set;
*swig_section_map_id_get = *LibreDWGc::Dwg_R2004_Header_section_map_id_get;
*swig_section_map_id_set = *LibreDWGc::Dwg_R2004_Header_section_map_id_set;
*swig_section_map_address_get = *LibreDWGc::Dwg_R2004_Header_section_map_address_get;
*swig_section_map_address_set = *LibreDWGc::Dwg_R2004_Header_section_map_address_set;
*swig_section_info_id_get = *LibreDWGc::Dwg_R2004_Header_section_info_id_get;
*swig_section_info_id_set = *LibreDWGc::Dwg_R2004_Header_section_info_id_set;
*swig_section_array_size_get = *LibreDWGc::Dwg_R2004_Header_section_array_size_get;
*swig_section_array_size_set = *LibreDWGc::Dwg_R2004_Header_section_array_size_set;
*swig_gap_array_size_get = *LibreDWGc::Dwg_R2004_Header_gap_array_size_get;
*swig_gap_array_size_set = *LibreDWGc::Dwg_R2004_Header_gap_array_size_set;
*swig_CRC_get = *LibreDWGc::Dwg_R2004_Header_CRC_get;
*swig_CRC_set = *LibreDWGc::Dwg_R2004_Header_CRC_set;
*swig_padding_get = *LibreDWGc::Dwg_R2004_Header_padding_get;
*swig_padding_set = *LibreDWGc::Dwg_R2004_Header_padding_set;
*swig_section_type_get = *LibreDWGc::Dwg_R2004_Header_section_type_get;
*swig_section_type_set = *LibreDWGc::Dwg_R2004_Header_section_type_set;
*swig_decomp_data_size_get = *LibreDWGc::Dwg_R2004_Header_decomp_data_size_get;
*swig_decomp_data_size_set = *LibreDWGc::Dwg_R2004_Header_decomp_data_size_set;
*swig_comp_data_size_get = *LibreDWGc::Dwg_R2004_Header_comp_data_size_get;
*swig_comp_data_size_set = *LibreDWGc::Dwg_R2004_Header_comp_data_size_set;
*swig_compression_type_get = *LibreDWGc::Dwg_R2004_Header_compression_type_get;
*swig_compression_type_set = *LibreDWGc::Dwg_R2004_Header_compression_type_set;
*swig_checksum_get = *LibreDWGc::Dwg_R2004_Header_checksum_get;
*swig_checksum_set = *LibreDWGc::Dwg_R2004_Header_checksum_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_R2004_Header(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_R2004_Header($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::Dwg_AuxHeader ##############

package LibreDWG::Dwg_AuxHeader;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_aux_intro_get = *LibreDWGc::Dwg_AuxHeader_aux_intro_get;
*swig_aux_intro_set = *LibreDWGc::Dwg_AuxHeader_aux_intro_set;
*swig_dwg_version_get = *LibreDWGc::Dwg_AuxHeader_dwg_version_get;
*swig_dwg_version_set = *LibreDWGc::Dwg_AuxHeader_dwg_version_set;
*swig_maint_version_get = *LibreDWGc::Dwg_AuxHeader_maint_version_get;
*swig_maint_version_set = *LibreDWGc::Dwg_AuxHeader_maint_version_set;
*swig_num_saves_get = *LibreDWGc::Dwg_AuxHeader_num_saves_get;
*swig_num_saves_set = *LibreDWGc::Dwg_AuxHeader_num_saves_set;
*swig_minus_1_get = *LibreDWGc::Dwg_AuxHeader_minus_1_get;
*swig_minus_1_set = *LibreDWGc::Dwg_AuxHeader_minus_1_set;
*swig_num_saves_1_get = *LibreDWGc::Dwg_AuxHeader_num_saves_1_get;
*swig_num_saves_1_set = *LibreDWGc::Dwg_AuxHeader_num_saves_1_set;
*swig_num_saves_2_get = *LibreDWGc::Dwg_AuxHeader_num_saves_2_get;
*swig_num_saves_2_set = *LibreDWGc::Dwg_AuxHeader_num_saves_2_set;
*swig_zero_get = *LibreDWGc::Dwg_AuxHeader_zero_get;
*swig_zero_set = *LibreDWGc::Dwg_AuxHeader_zero_set;
*swig_dwg_version_1_get = *LibreDWGc::Dwg_AuxHeader_dwg_version_1_get;
*swig_dwg_version_1_set = *LibreDWGc::Dwg_AuxHeader_dwg_version_1_set;
*swig_maint_version_1_get = *LibreDWGc::Dwg_AuxHeader_maint_version_1_get;
*swig_maint_version_1_set = *LibreDWGc::Dwg_AuxHeader_maint_version_1_set;
*swig_dwg_version_2_get = *LibreDWGc::Dwg_AuxHeader_dwg_version_2_get;
*swig_dwg_version_2_set = *LibreDWGc::Dwg_AuxHeader_dwg_version_2_set;
*swig_maint_version_2_get = *LibreDWGc::Dwg_AuxHeader_maint_version_2_get;
*swig_maint_version_2_set = *LibreDWGc::Dwg_AuxHeader_maint_version_2_set;
*swig_unknown_rs_get = *LibreDWGc::Dwg_AuxHeader_unknown_rs_get;
*swig_unknown_rs_set = *LibreDWGc::Dwg_AuxHeader_unknown_rs_set;
*swig_unknown_rc_get = *LibreDWGc::Dwg_AuxHeader_unknown_rc_get;
*swig_unknown_rc_set = *LibreDWGc::Dwg_AuxHeader_unknown_rc_set;
*swig_TDCREATE_get = *LibreDWGc::Dwg_AuxHeader_TDCREATE_get;
*swig_TDCREATE_set = *LibreDWGc::Dwg_AuxHeader_TDCREATE_set;
*swig_TDUPDATE_get = *LibreDWGc::Dwg_AuxHeader_TDUPDATE_get;
*swig_TDUPDATE_set = *LibreDWGc::Dwg_AuxHeader_TDUPDATE_set;
*swig_HANDSEED_get = *LibreDWGc::Dwg_AuxHeader_HANDSEED_get;
*swig_HANDSEED_set = *LibreDWGc::Dwg_AuxHeader_HANDSEED_set;
*swig_plot_stamp_get = *LibreDWGc::Dwg_AuxHeader_plot_stamp_get;
*swig_plot_stamp_set = *LibreDWGc::Dwg_AuxHeader_plot_stamp_set;
*swig_zero_1_get = *LibreDWGc::Dwg_AuxHeader_zero_1_get;
*swig_zero_1_set = *LibreDWGc::Dwg_AuxHeader_zero_1_set;
*swig_num_saves_3_get = *LibreDWGc::Dwg_AuxHeader_num_saves_3_get;
*swig_num_saves_3_set = *LibreDWGc::Dwg_AuxHeader_num_saves_3_set;
*swig_zero_2_get = *LibreDWGc::Dwg_AuxHeader_zero_2_get;
*swig_zero_2_set = *LibreDWGc::Dwg_AuxHeader_zero_2_set;
*swig_zero_3_get = *LibreDWGc::Dwg_AuxHeader_zero_3_get;
*swig_zero_3_set = *LibreDWGc::Dwg_AuxHeader_zero_3_set;
*swig_zero_4_get = *LibreDWGc::Dwg_AuxHeader_zero_4_get;
*swig_zero_4_set = *LibreDWGc::Dwg_AuxHeader_zero_4_set;
*swig_num_saves_4_get = *LibreDWGc::Dwg_AuxHeader_num_saves_4_get;
*swig_num_saves_4_set = *LibreDWGc::Dwg_AuxHeader_num_saves_4_set;
*swig_zero_5_get = *LibreDWGc::Dwg_AuxHeader_zero_5_get;
*swig_zero_5_set = *LibreDWGc::Dwg_AuxHeader_zero_5_set;
*swig_zero_6_get = *LibreDWGc::Dwg_AuxHeader_zero_6_get;
*swig_zero_6_set = *LibreDWGc::Dwg_AuxHeader_zero_6_set;
*swig_zero_7_get = *LibreDWGc::Dwg_AuxHeader_zero_7_get;
*swig_zero_7_set = *LibreDWGc::Dwg_AuxHeader_zero_7_set;
*swig_zero_8_get = *LibreDWGc::Dwg_AuxHeader_zero_8_get;
*swig_zero_8_set = *LibreDWGc::Dwg_AuxHeader_zero_8_set;
*swig_zero_18_get = *LibreDWGc::Dwg_AuxHeader_zero_18_get;
*swig_zero_18_set = *LibreDWGc::Dwg_AuxHeader_zero_18_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_Dwg_AuxHeader(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_Dwg_AuxHeader($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_sections ##############

package LibreDWG::_sections;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_nr_get = *LibreDWGc::_sections_nr_get;
*swig_nr_set = *LibreDWGc::_sections_nr_set;
*swig_address_get = *LibreDWGc::_sections_address_get;
*swig_address_set = *LibreDWGc::_sections_address_set;
*swig_size_get = *LibreDWGc::_sections_size_get;
*swig_size_set = *LibreDWGc::_sections_size_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__sections(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__sections($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_handler ##############

package LibreDWG::_handler;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDWGc::_handler_size_get;
*swig_size_set = *LibreDWGc::_handler_size_set;
*swig_nr_get = *LibreDWGc::_handler_nr_get;
*swig_nr_set = *LibreDWGc::_handler_nr_set;
*swig_data_get = *LibreDWGc::_handler_data_get;
*swig_data_set = *LibreDWGc::_handler_data_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__handler(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__handler($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::_dwg_second_header ##############

package LibreDWG::_dwg_second_header;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_section_get = *LibreDWGc::_dwg_second_header_section_get;
*swig_section_set = *LibreDWGc::_dwg_second_header_section_set;
*swig_handlers_get = *LibreDWGc::_dwg_second_header_handlers_get;
*swig_handlers_set = *LibreDWGc::_dwg_second_header_handlers_set;
*swig_size_get = *LibreDWGc::_dwg_second_header_size_get;
*swig_size_set = *LibreDWGc::_dwg_second_header_size_set;
*swig_address_get = *LibreDWGc::_dwg_second_header_address_get;
*swig_address_set = *LibreDWGc::_dwg_second_header_address_set;
*swig_version_get = *LibreDWGc::_dwg_second_header_version_get;
*swig_version_set = *LibreDWGc::_dwg_second_header_version_set;
*swig_null_b_get = *LibreDWGc::_dwg_second_header_null_b_get;
*swig_null_b_set = *LibreDWGc::_dwg_second_header_null_b_set;
*swig_unknown_10_get = *LibreDWGc::_dwg_second_header_unknown_10_get;
*swig_unknown_10_set = *LibreDWGc::_dwg_second_header_unknown_10_set;
*swig_unknown_rc4_get = *LibreDWGc::_dwg_second_header_unknown_rc4_get;
*swig_unknown_rc4_set = *LibreDWGc::_dwg_second_header_unknown_rc4_set;
*swig_num_sections_get = *LibreDWGc::_dwg_second_header_num_sections_get;
*swig_num_sections_set = *LibreDWGc::_dwg_second_header_num_sections_set;
*swig_num_handlers_get = *LibreDWGc::_dwg_second_header_num_handlers_get;
*swig_num_handlers_set = *LibreDWGc::_dwg_second_header_num_handlers_set;
*swig_junk_r14_1_get = *LibreDWGc::_dwg_second_header_junk_r14_1_get;
*swig_junk_r14_1_set = *LibreDWGc::_dwg_second_header_junk_r14_1_set;
*swig_junk_r14_2_get = *LibreDWGc::_dwg_second_header_junk_r14_2_get;
*swig_junk_r14_2_set = *LibreDWGc::_dwg_second_header_junk_r14_2_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new__dwg_second_header(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete__dwg_second_header($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::dwg_point_3d ##############

package LibreDWG::dwg_point_3d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDWGc::dwg_point_3d_x_get;
*swig_x_set = *LibreDWGc::dwg_point_3d_x_set;
*swig_y_get = *LibreDWGc::dwg_point_3d_y_get;
*swig_y_set = *LibreDWGc::dwg_point_3d_y_set;
*swig_z_get = *LibreDWGc::dwg_point_3d_z_get;
*swig_z_set = *LibreDWGc::dwg_point_3d_z_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_dwg_point_3d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_dwg_point_3d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::dwg_point_2d ##############

package LibreDWG::dwg_point_2d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDWGc::dwg_point_2d_x_get;
*swig_x_set = *LibreDWGc::dwg_point_2d_x_set;
*swig_y_get = *LibreDWGc::dwg_point_2d_y_get;
*swig_y_set = *LibreDWGc::dwg_point_2d_y_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_dwg_point_2d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_dwg_point_2d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDWG::dwg_lwpline_widths ##############

package LibreDWG::dwg_lwpline_widths;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDWG );
%OWNER = ();
%ITERATORS = ();
*swig_start_get = *LibreDWGc::dwg_lwpline_widths_start_get;
*swig_start_set = *LibreDWGc::dwg_lwpline_widths_start_set;
*swig_end_get = *LibreDWGc::dwg_lwpline_widths_end_get;
*swig_end_set = *LibreDWGc::dwg_lwpline_widths_end_set;
sub new {
    my $pkg = shift;
    my $self = LibreDWGc::new_dwg_lwpline_widths(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDWGc::delete_dwg_lwpline_widths($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package LibreDWG;

*FORMAT_RC = *LibreDWGc::FORMAT_RC;
*FORMAT_MC = *LibreDWGc::FORMAT_MC;
*FORMAT_UMC = *LibreDWGc::FORMAT_UMC;
*FORMAT_MS = *LibreDWGc::FORMAT_MS;
*FORMAT_B = *LibreDWGc::FORMAT_B;
*FORMAT_BB = *LibreDWGc::FORMAT_BB;
*FORMAT_3B = *LibreDWGc::FORMAT_3B;
*FORMAT_BS = *LibreDWGc::FORMAT_BS;
*FORMAT_RS = *LibreDWGc::FORMAT_RS;
*FORMAT_BL = *LibreDWGc::FORMAT_BL;
*FORMAT_RL = *LibreDWGc::FORMAT_RL;
*FORMAT_RD = *LibreDWGc::FORMAT_RD;
*FORMAT_RLL = *LibreDWGc::FORMAT_RLL;
*FORMAT_BLL = *LibreDWGc::FORMAT_BLL;
*FORMAT_TF = *LibreDWGc::FORMAT_TF;
*FORMAT_TV = *LibreDWGc::FORMAT_TV;
*FORMAT_BT = *LibreDWGc::FORMAT_BT;
*FORMAT_DD = *LibreDWGc::FORMAT_DD;
*FORMAT_BD = *LibreDWGc::FORMAT_BD;
*FORMAT_4BITS = *LibreDWGc::FORMAT_4BITS;
*FORMAT_TU = *LibreDWGc::FORMAT_TU;
*DWG_SUPERTYPE_UNKNOWN = *LibreDWGc::DWG_SUPERTYPE_UNKNOWN;
*DWG_SUPERTYPE_ENTITY = *LibreDWGc::DWG_SUPERTYPE_ENTITY;
*DWG_SUPERTYPE_OBJECT = *LibreDWGc::DWG_SUPERTYPE_OBJECT;
*DWG_TYPE_UNUSED = *LibreDWGc::DWG_TYPE_UNUSED;
*DWG_TYPE_TEXT = *LibreDWGc::DWG_TYPE_TEXT;
*DWG_TYPE_ATTRIB = *LibreDWGc::DWG_TYPE_ATTRIB;
*DWG_TYPE_ATTDEF = *LibreDWGc::DWG_TYPE_ATTDEF;
*DWG_TYPE_BLOCK = *LibreDWGc::DWG_TYPE_BLOCK;
*DWG_TYPE_ENDBLK = *LibreDWGc::DWG_TYPE_ENDBLK;
*DWG_TYPE_SEQEND = *LibreDWGc::DWG_TYPE_SEQEND;
*DWG_TYPE_INSERT = *LibreDWGc::DWG_TYPE_INSERT;
*DWG_TYPE_MINSERT = *LibreDWGc::DWG_TYPE_MINSERT;
*DWG_TYPE_VERTEX_2D = *LibreDWGc::DWG_TYPE_VERTEX_2D;
*DWG_TYPE_VERTEX_3D = *LibreDWGc::DWG_TYPE_VERTEX_3D;
*DWG_TYPE_VERTEX_MESH = *LibreDWGc::DWG_TYPE_VERTEX_MESH;
*DWG_TYPE_VERTEX_PFACE = *LibreDWGc::DWG_TYPE_VERTEX_PFACE;
*DWG_TYPE_VERTEX_PFACE_FACE = *LibreDWGc::DWG_TYPE_VERTEX_PFACE_FACE;
*DWG_TYPE_POLYLINE_2D = *LibreDWGc::DWG_TYPE_POLYLINE_2D;
*DWG_TYPE_POLYLINE_3D = *LibreDWGc::DWG_TYPE_POLYLINE_3D;
*DWG_TYPE_ARC = *LibreDWGc::DWG_TYPE_ARC;
*DWG_TYPE_CIRCLE = *LibreDWGc::DWG_TYPE_CIRCLE;
*DWG_TYPE_LINE = *LibreDWGc::DWG_TYPE_LINE;
*DWG_TYPE_DIMENSION_ORDINATE = *LibreDWGc::DWG_TYPE_DIMENSION_ORDINATE;
*DWG_TYPE_DIMENSION_LINEAR = *LibreDWGc::DWG_TYPE_DIMENSION_LINEAR;
*DWG_TYPE_DIMENSION_ALIGNED = *LibreDWGc::DWG_TYPE_DIMENSION_ALIGNED;
*DWG_TYPE_DIMENSION_ANG3PT = *LibreDWGc::DWG_TYPE_DIMENSION_ANG3PT;
*DWG_TYPE_DIMENSION_ANG2LN = *LibreDWGc::DWG_TYPE_DIMENSION_ANG2LN;
*DWG_TYPE_DIMENSION_RADIUS = *LibreDWGc::DWG_TYPE_DIMENSION_RADIUS;
*DWG_TYPE_DIMENSION_DIAMETER = *LibreDWGc::DWG_TYPE_DIMENSION_DIAMETER;
*DWG_TYPE_POINT = *LibreDWGc::DWG_TYPE_POINT;
*DWG_TYPE__3DFACE = *LibreDWGc::DWG_TYPE__3DFACE;
*DWG_TYPE_POLYLINE_PFACE = *LibreDWGc::DWG_TYPE_POLYLINE_PFACE;
*DWG_TYPE_POLYLINE_MESH = *LibreDWGc::DWG_TYPE_POLYLINE_MESH;
*DWG_TYPE_SOLID = *LibreDWGc::DWG_TYPE_SOLID;
*DWG_TYPE_TRACE = *LibreDWGc::DWG_TYPE_TRACE;
*DWG_TYPE_SHAPE = *LibreDWGc::DWG_TYPE_SHAPE;
*DWG_TYPE_VIEWPORT = *LibreDWGc::DWG_TYPE_VIEWPORT;
*DWG_TYPE_ELLIPSE = *LibreDWGc::DWG_TYPE_ELLIPSE;
*DWG_TYPE_SPLINE = *LibreDWGc::DWG_TYPE_SPLINE;
*DWG_TYPE_REGION = *LibreDWGc::DWG_TYPE_REGION;
*DWG_TYPE__3DSOLID = *LibreDWGc::DWG_TYPE__3DSOLID;
*DWG_TYPE_BODY = *LibreDWGc::DWG_TYPE_BODY;
*DWG_TYPE_RAY = *LibreDWGc::DWG_TYPE_RAY;
*DWG_TYPE_XLINE = *LibreDWGc::DWG_TYPE_XLINE;
*DWG_TYPE_DICTIONARY = *LibreDWGc::DWG_TYPE_DICTIONARY;
*DWG_TYPE_OLEFRAME = *LibreDWGc::DWG_TYPE_OLEFRAME;
*DWG_TYPE_MTEXT = *LibreDWGc::DWG_TYPE_MTEXT;
*DWG_TYPE_LEADER = *LibreDWGc::DWG_TYPE_LEADER;
*DWG_TYPE_TOLERANCE = *LibreDWGc::DWG_TYPE_TOLERANCE;
*DWG_TYPE_MLINE = *LibreDWGc::DWG_TYPE_MLINE;
*DWG_TYPE_BLOCK_CONTROL = *LibreDWGc::DWG_TYPE_BLOCK_CONTROL;
*DWG_TYPE_BLOCK_HEADER = *LibreDWGc::DWG_TYPE_BLOCK_HEADER;
*DWG_TYPE_LAYER_CONTROL = *LibreDWGc::DWG_TYPE_LAYER_CONTROL;
*DWG_TYPE_LAYER = *LibreDWGc::DWG_TYPE_LAYER;
*DWG_TYPE_STYLE_CONTROL = *LibreDWGc::DWG_TYPE_STYLE_CONTROL;
*DWG_TYPE_STYLE = *LibreDWGc::DWG_TYPE_STYLE;
*DWG_TYPE_LTYPE_CONTROL = *LibreDWGc::DWG_TYPE_LTYPE_CONTROL;
*DWG_TYPE_LTYPE = *LibreDWGc::DWG_TYPE_LTYPE;
*DWG_TYPE_VIEW_CONTROL = *LibreDWGc::DWG_TYPE_VIEW_CONTROL;
*DWG_TYPE_VIEW = *LibreDWGc::DWG_TYPE_VIEW;
*DWG_TYPE_UCS_CONTROL = *LibreDWGc::DWG_TYPE_UCS_CONTROL;
*DWG_TYPE_UCS = *LibreDWGc::DWG_TYPE_UCS;
*DWG_TYPE_VPORT_CONTROL = *LibreDWGc::DWG_TYPE_VPORT_CONTROL;
*DWG_TYPE_VPORT = *LibreDWGc::DWG_TYPE_VPORT;
*DWG_TYPE_APPID_CONTROL = *LibreDWGc::DWG_TYPE_APPID_CONTROL;
*DWG_TYPE_APPID = *LibreDWGc::DWG_TYPE_APPID;
*DWG_TYPE_DIMSTYLE_CONTROL = *LibreDWGc::DWG_TYPE_DIMSTYLE_CONTROL;
*DWG_TYPE_DIMSTYLE = *LibreDWGc::DWG_TYPE_DIMSTYLE;
*DWG_TYPE_VPORT_ENTITY_CONTROL = *LibreDWGc::DWG_TYPE_VPORT_ENTITY_CONTROL;
*DWG_TYPE_VPORT_ENTITY_HEADER = *LibreDWGc::DWG_TYPE_VPORT_ENTITY_HEADER;
*DWG_TYPE_GROUP = *LibreDWGc::DWG_TYPE_GROUP;
*DWG_TYPE_MLINESTYLE = *LibreDWGc::DWG_TYPE_MLINESTYLE;
*DWG_TYPE_OLE2FRAME = *LibreDWGc::DWG_TYPE_OLE2FRAME;
*DWG_TYPE_DUMMY = *LibreDWGc::DWG_TYPE_DUMMY;
*DWG_TYPE_LONG_TRANSACTION = *LibreDWGc::DWG_TYPE_LONG_TRANSACTION;
*DWG_TYPE_LWPOLYLINE = *LibreDWGc::DWG_TYPE_LWPOLYLINE;
*DWG_TYPE_HATCH = *LibreDWGc::DWG_TYPE_HATCH;
*DWG_TYPE_XRECORD = *LibreDWGc::DWG_TYPE_XRECORD;
*DWG_TYPE_PLACEHOLDER = *LibreDWGc::DWG_TYPE_PLACEHOLDER;
*DWG_TYPE_VBA_PROJECT = *LibreDWGc::DWG_TYPE_VBA_PROJECT;
*DWG_TYPE_LAYOUT = *LibreDWGc::DWG_TYPE_LAYOUT;
*DWG_TYPE_PROXY_ENTITY = *LibreDWGc::DWG_TYPE_PROXY_ENTITY;
*DWG_TYPE_PROXY_OBJECT = *LibreDWGc::DWG_TYPE_PROXY_OBJECT;
*DWG_TYPE_FREED = *LibreDWGc::DWG_TYPE_FREED;
*DWG_TYPE_ACAD_EVALUATION_GRAPH = *LibreDWGc::DWG_TYPE_ACAD_EVALUATION_GRAPH;
*DWG_TYPE_ACSH_HISTORY_CLASS = *LibreDWGc::DWG_TYPE_ACSH_HISTORY_CLASS;
*DWG_TYPE_ACSH_SWEEP_CLASS = *LibreDWGc::DWG_TYPE_ACSH_SWEEP_CLASS;
*DWG_TYPE_ARCALIGNEDTEXT = *LibreDWGc::DWG_TYPE_ARCALIGNEDTEXT;
*DWG_TYPE_ARC_DIMENSION = *LibreDWGc::DWG_TYPE_ARC_DIMENSION;
*DWG_TYPE_ASSOC2DCONSTRAINTGROUP = *LibreDWGc::DWG_TYPE_ASSOC2DCONSTRAINTGROUP;
*DWG_TYPE_ASSOCACTION = *LibreDWGc::DWG_TYPE_ASSOCACTION;
*DWG_TYPE_ASSOCALIGNEDDIMACTIONBODY = *LibreDWGc::DWG_TYPE_ASSOCALIGNEDDIMACTIONBODY;
*DWG_TYPE_ASSOCDEPENDENCY = *LibreDWGc::DWG_TYPE_ASSOCDEPENDENCY;
*DWG_TYPE_ASSOCGEOMDEPENDENCY = *LibreDWGc::DWG_TYPE_ASSOCGEOMDEPENDENCY;
*DWG_TYPE_ASSOCNETWORK = *LibreDWGc::DWG_TYPE_ASSOCNETWORK;
*DWG_TYPE_ASSOCOSNAPPOINTREFACTIONPARAM = *LibreDWGc::DWG_TYPE_ASSOCOSNAPPOINTREFACTIONPARAM;
*DWG_TYPE_ASSOCPERSSUBENTMANAGER = *LibreDWGc::DWG_TYPE_ASSOCPERSSUBENTMANAGER;
*DWG_TYPE_ASSOCVERTEXACTIONPARAM = *LibreDWGc::DWG_TYPE_ASSOCVERTEXACTIONPARAM;
*DWG_TYPE_CAMERA = *LibreDWGc::DWG_TYPE_CAMERA;
*DWG_TYPE_CELLSTYLEMAP = *LibreDWGc::DWG_TYPE_CELLSTYLEMAP;
*DWG_TYPE_CSACDOCUMENTOPTIONS = *LibreDWGc::DWG_TYPE_CSACDOCUMENTOPTIONS;
*DWG_TYPE_DATATABLE = *LibreDWGc::DWG_TYPE_DATATABLE;
*DWG_TYPE_DBCOLOR = *LibreDWGc::DWG_TYPE_DBCOLOR;
*DWG_TYPE_DETAILVIEWSTYLE = *LibreDWGc::DWG_TYPE_DETAILVIEWSTYLE;
*DWG_TYPE_DICTIONARYVAR = *LibreDWGc::DWG_TYPE_DICTIONARYVAR;
*DWG_TYPE_DICTIONARYWDFLT = *LibreDWGc::DWG_TYPE_DICTIONARYWDFLT;
*DWG_TYPE_DIMASSOC = *LibreDWGc::DWG_TYPE_DIMASSOC;
*DWG_TYPE_FIELD = *LibreDWGc::DWG_TYPE_FIELD;
*DWG_TYPE_FIELDLIST = *LibreDWGc::DWG_TYPE_FIELDLIST;
*DWG_TYPE_GEODATA = *LibreDWGc::DWG_TYPE_GEODATA;
*DWG_TYPE_GEOPOSITIONMARKER = *LibreDWGc::DWG_TYPE_GEOPOSITIONMARKER;
*DWG_TYPE_HELIX = *LibreDWGc::DWG_TYPE_HELIX;
*DWG_TYPE_IDBUFFER = *LibreDWGc::DWG_TYPE_IDBUFFER;
*DWG_TYPE_IMAGE = *LibreDWGc::DWG_TYPE_IMAGE;
*DWG_TYPE_IMAGEDEF = *LibreDWGc::DWG_TYPE_IMAGEDEF;
*DWG_TYPE_IMAGEDEF_REACTOR = *LibreDWGc::DWG_TYPE_IMAGEDEF_REACTOR;
*DWG_TYPE_LAYER_FILTER = *LibreDWGc::DWG_TYPE_LAYER_FILTER;
*DWG_TYPE_LAYER_INDEX = *LibreDWGc::DWG_TYPE_LAYER_INDEX;
*DWG_TYPE_LAYOUTPRINTCONFIG = *LibreDWGc::DWG_TYPE_LAYOUTPRINTCONFIG;
*DWG_TYPE_LEADEROBJECTCONTEXTDATA = *LibreDWGc::DWG_TYPE_LEADEROBJECTCONTEXTDATA;
*DWG_TYPE_LIGHT = *LibreDWGc::DWG_TYPE_LIGHT;
*DWG_TYPE_LIGHTLIST = *LibreDWGc::DWG_TYPE_LIGHTLIST;
*DWG_TYPE_MATERIAL = *LibreDWGc::DWG_TYPE_MATERIAL;
*DWG_TYPE_MLEADERSTYLE = *LibreDWGc::DWG_TYPE_MLEADERSTYLE;
*DWG_TYPE_MULTILEADER = *LibreDWGc::DWG_TYPE_MULTILEADER;
*DWG_TYPE_NPOCOLLECTION = *LibreDWGc::DWG_TYPE_NPOCOLLECTION;
*DWG_TYPE_OBJECTCONTEXTDATA = *LibreDWGc::DWG_TYPE_OBJECTCONTEXTDATA;
*DWG_TYPE_OBJECT_PTR = *LibreDWGc::DWG_TYPE_OBJECT_PTR;
*DWG_TYPE_PERSSUBENTMANAGER = *LibreDWGc::DWG_TYPE_PERSSUBENTMANAGER;
*DWG_TYPE_PLOTSETTINGS = *LibreDWGc::DWG_TYPE_PLOTSETTINGS;
*DWG_TYPE_POINTCLOUD = *LibreDWGc::DWG_TYPE_POINTCLOUD;
*DWG_TYPE_RASTERVARIABLES = *LibreDWGc::DWG_TYPE_RASTERVARIABLES;
*DWG_TYPE_RTEXT = *LibreDWGc::DWG_TYPE_RTEXT;
*DWG_TYPE_SCALE = *LibreDWGc::DWG_TYPE_SCALE;
*DWG_TYPE_SECTIONVIEWSTYLE = *LibreDWGc::DWG_TYPE_SECTIONVIEWSTYLE;
*DWG_TYPE_SORTENTSTABLE = *LibreDWGc::DWG_TYPE_SORTENTSTABLE;
*DWG_TYPE_SPATIAL_FILTER = *LibreDWGc::DWG_TYPE_SPATIAL_FILTER;
*DWG_TYPE_SPATIAL_INDEX = *LibreDWGc::DWG_TYPE_SPATIAL_INDEX;
*DWG_TYPE_SUN = *LibreDWGc::DWG_TYPE_SUN;
*DWG_TYPE_SURFACE = *LibreDWGc::DWG_TYPE_SURFACE;
*DWG_TYPE_TABLE = *LibreDWGc::DWG_TYPE_TABLE;
*DWG_TYPE_TABLECONTENT = *LibreDWGc::DWG_TYPE_TABLECONTENT;
*DWG_TYPE_TABLEGEOMETRY = *LibreDWGc::DWG_TYPE_TABLEGEOMETRY;
*DWG_TYPE_TABLESTYLE = *LibreDWGc::DWG_TYPE_TABLESTYLE;
*DWG_TYPE_UNDERLAY = *LibreDWGc::DWG_TYPE_UNDERLAY;
*DWG_TYPE_UNDERLAYDEFINITION = *LibreDWGc::DWG_TYPE_UNDERLAYDEFINITION;
*DWG_TYPE_VISUALSTYLE = *LibreDWGc::DWG_TYPE_VISUALSTYLE;
*DWG_TYPE_WIPEOUT = *LibreDWGc::DWG_TYPE_WIPEOUT;
*DWG_TYPE_WIPEOUTVARIABLES = *LibreDWGc::DWG_TYPE_WIPEOUTVARIABLES;
*DWG_TYPE_XREFPANELOBJECT = *LibreDWGc::DWG_TYPE_XREFPANELOBJECT;
*DWG_TYPE_UNKNOWN_ENT = *LibreDWGc::DWG_TYPE_UNKNOWN_ENT;
*DWG_TYPE_UNKNOWN_OBJ = *LibreDWGc::DWG_TYPE_UNKNOWN_OBJ;
*DWG_NOERR = *LibreDWGc::DWG_NOERR;
*DWG_ERR_WRONGCRC = *LibreDWGc::DWG_ERR_WRONGCRC;
*DWG_ERR_NOTYETSUPPORTED = *LibreDWGc::DWG_ERR_NOTYETSUPPORTED;
*DWG_ERR_UNHANDLEDCLASS = *LibreDWGc::DWG_ERR_UNHANDLEDCLASS;
*DWG_ERR_INVALIDTYPE = *LibreDWGc::DWG_ERR_INVALIDTYPE;
*DWG_ERR_INVALIDHANDLE = *LibreDWGc::DWG_ERR_INVALIDHANDLE;
*DWG_ERR_INVALIDEED = *LibreDWGc::DWG_ERR_INVALIDEED;
*DWG_ERR_VALUEOUTOFBOUNDS = *LibreDWGc::DWG_ERR_VALUEOUTOFBOUNDS;
*DWG_ERR_CLASSESNOTFOUND = *LibreDWGc::DWG_ERR_CLASSESNOTFOUND;
*DWG_ERR_SECTIONNOTFOUND = *LibreDWGc::DWG_ERR_SECTIONNOTFOUND;
*DWG_ERR_PAGENOTFOUND = *LibreDWGc::DWG_ERR_PAGENOTFOUND;
*DWG_ERR_INTERNALERROR = *LibreDWGc::DWG_ERR_INTERNALERROR;
*DWG_ERR_INVALIDDWG = *LibreDWGc::DWG_ERR_INVALIDDWG;
*DWG_ERR_IOERROR = *LibreDWGc::DWG_ERR_IOERROR;
*DWG_ERR_OUTOFMEM = *LibreDWGc::DWG_ERR_OUTOFMEM;
*SECTION_HEADER = *LibreDWGc::SECTION_HEADER;
*SECTION_AUXHEADER = *LibreDWGc::SECTION_AUXHEADER;
*SECTION_CLASSES = *LibreDWGc::SECTION_CLASSES;
*SECTION_HANDLES = *LibreDWGc::SECTION_HANDLES;
*SECTION_TEMPLATE = *LibreDWGc::SECTION_TEMPLATE;
*SECTION_OBJFREESPACE = *LibreDWGc::SECTION_OBJFREESPACE;
*SECTION_OBJECTS = *LibreDWGc::SECTION_OBJECTS;
*SECTION_REVHISTORY = *LibreDWGc::SECTION_REVHISTORY;
*SECTION_SUMMARYINFO = *LibreDWGc::SECTION_SUMMARYINFO;
*SECTION_PREVIEW = *LibreDWGc::SECTION_PREVIEW;
*SECTION_APPINFO = *LibreDWGc::SECTION_APPINFO;
*SECTION_APPINFOHISTORY = *LibreDWGc::SECTION_APPINFOHISTORY;
*SECTION_FILEDEPLIST = *LibreDWGc::SECTION_FILEDEPLIST;
*SECTION_SECURITY = *LibreDWGc::SECTION_SECURITY;
*SECTION_VBAPROJECT = *LibreDWGc::SECTION_VBAPROJECT;
*SECTION_SIGNATURE = *LibreDWGc::SECTION_SIGNATURE;
*SECTION_PROTOTYPE = *LibreDWGc::SECTION_PROTOTYPE;
*SECTION_UNKNOWN = *LibreDWGc::SECTION_UNKNOWN;
*SECTION_HEADER_R13 = *LibreDWGc::SECTION_HEADER_R13;
*SECTION_CLASSES_R13 = *LibreDWGc::SECTION_CLASSES_R13;
*SECTION_OBJECTS_R13 = *LibreDWGc::SECTION_OBJECTS_R13;
*SECTION_2NDHEADER_R13 = *LibreDWGc::SECTION_2NDHEADER_R13;
*SECTION_MEASUREMENT_R13 = *LibreDWGc::SECTION_MEASUREMENT_R13;
*SECTION_AUXHEADER_R2000 = *LibreDWGc::SECTION_AUXHEADER_R2000;
*SECTION_HEADER_R11 = *LibreDWGc::SECTION_HEADER_R11;
*SECTION_BLOCK = *LibreDWGc::SECTION_BLOCK;
*SECTION_LAYER = *LibreDWGc::SECTION_LAYER;
*SECTION_STYLE = *LibreDWGc::SECTION_STYLE;
*SECTION_LTYPE = *LibreDWGc::SECTION_LTYPE;
*SECTION_VIEW = *LibreDWGc::SECTION_VIEW;
*SECTION_UCS = *LibreDWGc::SECTION_UCS;
*SECTION_VPORT = *LibreDWGc::SECTION_VPORT;
*SECTION_APPID = *LibreDWGc::SECTION_APPID;
*SECTION_DIMSTYLE = *LibreDWGc::SECTION_DIMSTYLE;
*SECTION_VPORT_ENTITY = *LibreDWGc::SECTION_VPORT_ENTITY;
1;
